{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require(\"react\"));else if (typeof define === 'function' && define.amd) define([\"react\"], factory);else if (typeof exports === 'object') exports[\"ProductVideo\"] = factory(require(\"react\"));else root[\"ProductVideo\"] = factory(root[\"React\"]);\n})(this, function (__WEBPACK_EXTERNAL_MODULE_2__) {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      module.exports = __webpack_require__(1).default;\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _react = __webpack_require__(2);\n\n      var _react2 = _interopRequireDefault(_react);\n\n      var _video = __webpack_require__(3);\n\n      var _video2 = _interopRequireDefault(_video);\n\n      var _classnames2 = __webpack_require__(108);\n\n      var _classnames3 = _interopRequireDefault(_classnames2);\n\n      var _addEventListener = __webpack_require__(109);\n\n      var _addEventListener2 = _interopRequireDefault(_addEventListener);\n\n      var _removeEventListener = __webpack_require__(110);\n\n      var _removeEventListener2 = _interopRequireDefault(_removeEventListener);\n\n      var _zvuiBigPlayButton = __webpack_require__(111);\n\n      var _zvuiBigPlayButton2 = _interopRequireDefault(_zvuiBigPlayButton);\n\n      var _zvuiHDButton = __webpack_require__(112);\n\n      var _zvuiHDButton2 = _interopRequireDefault(_zvuiHDButton);\n\n      var _zvuiZoomButton = __webpack_require__(113);\n\n      var _zvuiZoomButton2 = _interopRequireDefault(_zvuiZoomButton);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _defineProperty(obj, key, value) {\n        if (key in obj) {\n          Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n          });\n        } else {\n          obj[key] = value;\n        }\n\n        return obj;\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /*eslint-disable no-unused-vars*/\n\n      /*eslint-disable no-unused-vars*/\n\n\n      var BASE_CLASS = 'zvui-product-video';\n      var VJS_BASE_CLASS = 'video-js';\n      var VJS_DEFAULT_SKIN_CLASS = 'vjs-default-skin';\n      var VJS_CENTER_PLAY_CLASS = 'vjs-big-play-centered';\n      var VJS_FRAMEWORK_DEFAULT = {\n        width: 480,\n        height: 693,\n        preload: 'auto',\n        autoplay: false,\n        controls: true,\n        muted: true,\n        controlBar: {\n          playToggle: false,\n          fullscreenToggle: false,\n          currentTimeDisplay: false,\n          timeDivider: false,\n          durationDisplay: false,\n          remainingTimeDisplay: false,\n          progressControl: {\n            seekBar: {\n              seekHandle: false\n            }\n          },\n          volumeMenuButton: false,\n          playbackRateMenuButton: false,\n          audioTrackButton: false,\n          captionsButton: false,\n          chaptersButton: false,\n          descriptionsButton: false,\n          subtitlesButton: false\n        }\n      };\n\n      var NOOP = function NOOP() {};\n\n      var ProductVideo = function (_Component) {\n        _inherits(ProductVideo, _Component);\n\n        function ProductVideo() {\n          var _ref;\n\n          var _temp, _this, _ret;\n\n          _classCallCheck(this, ProductVideo);\n\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ProductVideo.__proto__ || Object.getPrototypeOf(ProductVideo)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n            showingHD: false,\n            events: {},\n            aspectRatio: VJS_FRAMEWORK_DEFAULT.width / VJS_FRAMEWORK_DEFAULT.height\n          }, _this.componentWillMount = function () {\n            var _this$props = _this.props,\n                width = _this$props.width,\n                height = _this$props.height;\n\n            _this.setState({\n              uid: _this._getRandomID()\n            });\n          }, _this.componentDidMount = function () {\n            var resize = _this.props.resize;\n\n            _this.setUpPlayer();\n\n            if (resize) {\n              _this.setState({\n                events: {\n                  resize: (0, _addEventListener2.default)(window, 'resize', _this._handleResize, _this)\n                }\n              });\n            }\n          }, _this.componentWillReceiveProps = function (nextProps) {\n            var _this$props2 = _this.props,\n                _this$props2$source = _this$props2.source,\n                oldSource = _this$props2$source === undefined ? '' : _this$props2$source,\n                oldWidth = _this$props2.width,\n                oldHeight = _this$props2.height;\n            var _nextProps$source = nextProps.source,\n                newSource = _nextProps$source === undefined ? '' : _nextProps$source,\n                newWidth = nextProps.width,\n                newHeight = nextProps.height;\n\n            if (newSource !== oldSource && newSource !== '') {\n              _this._updatePlayerSrc(newSource);\n            }\n\n            if (oldWidth !== newWidth || oldHeight !== newHeight) {\n              _this.setState({\n                aspectRatio: newWidth / newHeight\n              });\n            }\n          }, _this.componentWillUnMount = function () {\n            var resize = _this.state.events.resize;\n\n            _this.unloadPlayer();\n\n            (0, _removeEventListener2.default)(resize);\n          }, _this._getRandomID = function () {\n            return Math.floor(Math.random() * 16749 + 1);\n          }, _this._buildPlayerOptions = function () {\n            var _this$props3 = _this.props,\n                options = _this$props3.options,\n                resize = _this$props3.resize,\n                height = _this$props3.height,\n                width = _this$props3.width;\n            var defaultWidth = VJS_FRAMEWORK_DEFAULT.width,\n                defaultHeight = VJS_FRAMEWORK_DEFAULT.height;\n            var result = Object.assign({}, VJS_FRAMEWORK_DEFAULT, options, {\n              height: height || defaultHeight,\n              width: width || defaultWidth\n            });\n\n            _this.setState({\n              aspectRatio: result.width / result.height\n            });\n\n            return result;\n          }, _this._updateToHD = function () {\n            var showingHD = _this.state.showingHD;\n            var _this$props4 = _this.props,\n                source = _this$props4.source,\n                sourceHD = _this$props4.sourceHD;\n\n            if (sourceHD && !showingHD) {\n              _this._updatePlayerSrc(sourceHD);\n\n              _this.setState({\n                showingHD: true\n              });\n            } else {\n              _this._updatePlayerSrc(source);\n\n              _this.setState({\n                showingHD: false\n              });\n            }\n          }, _this._updatePlayerSrc = function (source) {\n            var player = _this._getProductPlayer();\n\n            player.src(source);\n          }, _this._handleResize = function () {\n            var debounce = _this.props.debounce;\n\n            var player = _this._getProductPlayer();\n\n            clearTimeout(_this.handleResizeTimer);\n            _this.handleResizeTimer = setTimeout(function () {\n              var _this$_getPlayerDimen = _this._getPlayerDimensions(),\n                  width = _this$_getPlayerDimen.width,\n                  height = _this$_getPlayerDimen.height;\n\n              player.dimensions(width, height);\n            }, debounce);\n          }, _this._playerReady = function () {\n            var _this$props5 = _this.props,\n                onEnded = _this$props5.onEnded,\n                onPlay = _this$props5.onPlay,\n                onPause = _this$props5.onPause,\n                loop = _this$props5.loop,\n                onReady = _this$props5.onReady;\n\n            var player = _this._getProductPlayer();\n\n            _this._handleResize();\n\n            player.on('play', function () {\n              player.posterImage.hide();\n              player.controlBar.show();\n\n              _this._elToggle('bigPlayButton', false);\n\n              _this._elToggle('_zvuiBigPauseButton', true);\n\n              if (onPlay && typeof onPlay === 'function') {\n                onPlay.call(_this, player);\n              }\n            });\n            player.on('pause', function () {\n              player.controlBar.hide();\n\n              _this._elToggle('bigPlayButton', true);\n\n              _this._elToggle('_zvuiBigPauseButton', false);\n\n              if (onPause && typeof onPause === 'function') {\n                onPause.call(_this, player);\n              }\n            });\n            player.on('ended', function () {\n              player.posterImage.show();\n              player.controlBar.hide();\n\n              _this._elToggle('bigPlayButton', true);\n\n              if (!loop && onEnded && typeof onEnded === 'function') {\n                onEnded.call(_this, player);\n              }\n            });\n\n            if (onReady && typeof onReady === 'function') {\n              onReady.call(_this, player);\n            }\n          }, _this._getResizeOption = function () {\n            var aspectRatio = _this.state.aspectRatio;\n            return Object.assign({}, {\n              aspectRatio: aspectRatio\n            });\n          }, _this._getPlayerDimensions = function () {\n            var _this$_getResizeOptio = _this._getResizeOption(),\n                aspectRatio = _this$_getResizeOptio.aspectRatio;\n\n            var player = _this._getProductPlayer();\n\n            var _this$props6 = _this.props,\n                width = _this$props6.width,\n                height = _this$props6.height;\n            var containerWidth = player.el_.parentElement.offsetWidth;\n\n            if (containerWidth < width) {\n              width = containerWidth;\n              height = containerWidth / aspectRatio;\n            }\n\n            return {\n              width: width,\n              height: height\n            };\n          }, _this._elToggle = function (obj, flag) {\n            var _this$_player$obj = _this._player[obj];\n            _this$_player$obj = _this$_player$obj === undefined ? {} : _this$_player$obj;\n            var _this$_player$obj$el_ = _this$_player$obj.el_,\n                targetEl = _this$_player$obj$el_ === undefined ? null : _this$_player$obj$el_;\n            var _this2 = _this,\n                _this2$obj = _this2[obj];\n            _this2$obj = _this2$obj === undefined ? {} : _this2$obj;\n            var _this2$obj$el_ = _this2$obj.el_,\n                targetParentEl = _this2$obj$el_ === undefined ? null : _this2$obj$el_;\n\n            if (targetEl) {\n              targetEl.style.display = flag ? 'block' : 'none';\n            }\n\n            if (targetParentEl) {\n              targetParentEl.style.display = flag ? 'block' : 'none';\n            }\n          }, _this.insertComponents = function () {\n            var player = _this._getProductPlayer();\n\n            var _this$props7 = _this.props,\n                sourceHD = _this$props7.sourceHD,\n                zoomIn = _this$props7.zoomIn;\n            _this._zvuiBigPauseButton = new _zvuiBigPlayButton2.default(player);\n            player.addChild(_this._zvuiBigPauseButton);\n\n            if (sourceHD) {\n              _this._zvuiHDButton = new _zvuiHDButton2.default(_this);\n              player.addChild(_this._zvuiHDButton);\n            }\n\n            if (typeof zoomIn === 'function') {\n              _this._zvuiZoomButton = new _zvuiZoomButton2.default(_this);\n              player.addChild(_this._zvuiZoomButton);\n            }\n          }, _this.getUid = function () {\n            return _this.state.uid;\n          }, _this.getVideoId = function () {\n            return _this.refs[BASE_CLASS].id;\n          }, _this.setUpPlayer = function () {\n            var _this$props8 = _this.props,\n                source = _this$props8.source,\n                onEnded = _this$props8.onEnded,\n                onPlay = _this$props8.onPlay,\n                onPause = _this$props8.onPause,\n                loop = _this$props8.loop;\n\n            var options = _this._buildPlayerOptions();\n\n            _this._player = (0, _video2.default)(_this.refs[BASE_CLASS], options);\n\n            _this.insertComponents();\n\n            _this._player.ready(_this._playerReady);\n\n            setTimeout(function () {\n              _this._updatePlayerSrc(source);\n            }, 50);\n          }, _this.unloadPlayer = function () {\n            var player = _this._getProductPlayer();\n\n            var dispose = _this.props.dispose;\n\n            if (dispose) {\n              player.dispose();\n            }\n          }, _this._getProductPlayer = function () {\n            return _this._player;\n          }, _this.render = function () {\n            var _classnames;\n\n            var _this$props9 = _this.props,\n                skin = _this$props9.skin,\n                customSkinClass = _this$props9.customSkinClass,\n                bigPlayButton = _this$props9.bigPlayButton,\n                _this$props9$poster = _this$props9.poster,\n                poster = _this$props9$poster === undefined ? null : _this$props9$poster;\n            var uid = _this.state.uid;\n            return _react2.default.createElement('video', {\n              ref: BASE_CLASS,\n              id: BASE_CLASS + '-' + uid,\n              className: (0, _classnames3.default)(BASE_CLASS, VJS_BASE_CLASS, (_classnames = {}, _defineProperty(_classnames, VJS_DEFAULT_SKIN_CLASS, skin === 'default'), _defineProperty(_classnames, customSkinClass, skin !== 'default'), _defineProperty(_classnames, VJS_CENTER_PLAY_CLASS, bigPlayButton), _classnames)),\n              poster: poster\n            });\n          }, _temp), _possibleConstructorReturn(_this, _ret);\n        }\n\n        return ProductVideo;\n      }(_react.Component);\n\n      ProductVideo.defaultProps = {\n        uid: '',\n        source: '',\n        poster: '',\n        skin: 'default',\n        bigPlayButton: true,\n        customSkinClass: '',\n        loop: false,\n        options: VJS_FRAMEWORK_DEFAULT,\n        resize: true,\n        dispose: true,\n        debounce: 300,\n        height: VJS_FRAMEWORK_DEFAULT.height,\n        width: VJS_FRAMEWORK_DEFAULT.width\n      };\n      ProductVideo.propTypes = {\n        source: _react.PropTypes.string.isRequired,\n        sourceHD: _react.PropTypes.string,\n        poster: _react.PropTypes.string,\n        zoomIn: _react.PropTypes.func,\n        skin: _react.PropTypes.string,\n        bigPlayButton: _react.PropTypes.bool,\n        customSkinClass: _react.PropTypes.string,\n        height: _react.PropTypes.number,\n        width: _react.PropTypes.number,\n        loop: _react.PropTypes.bool,\n        onReady: _react.PropTypes.func,\n        resize: _react.PropTypes.bool,\n        eventListeners: _react.PropTypes.object,\n        options: _react.PropTypes.object,\n        onEnded: _react.PropTypes.func,\n        onPlay: _react.PropTypes.func,\n        onPause: _react.PropTypes.func,\n        debounce: _react.PropTypes.number\n      };\n      exports.default = ProductVideo;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n      /**\n       * @file video.js\n       * @module videojs\n       */\n\n      /* global define */\n      // Include the built-in techs\n\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      var _setup = __webpack_require__(7);\n\n      var setup = _interopRequireWildcard(_setup);\n\n      var _stylesheet = __webpack_require__(15);\n\n      var stylesheet = _interopRequireWildcard(_stylesheet);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _eventTarget = __webpack_require__(20);\n\n      var _eventTarget2 = _interopRequireDefault(_eventTarget);\n\n      var _events = __webpack_require__(8);\n\n      var Events = _interopRequireWildcard(_events);\n\n      var _player = __webpack_require__(21);\n\n      var _player2 = _interopRequireDefault(_player);\n\n      var _plugins = __webpack_require__(104);\n\n      var _plugins2 = _interopRequireDefault(_plugins);\n\n      var _mergeOptions2 = __webpack_require__(19);\n\n      var _mergeOptions3 = _interopRequireDefault(_mergeOptions2);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _textTrack = __webpack_require__(31);\n\n      var _textTrack2 = _interopRequireDefault(_textTrack);\n\n      var _audioTrack = __webpack_require__(105);\n\n      var _audioTrack2 = _interopRequireDefault(_audioTrack);\n\n      var _videoTrack = __webpack_require__(106);\n\n      var _videoTrack2 = _interopRequireDefault(_videoTrack);\n\n      var _timeRanges = __webpack_require__(22);\n\n      var _formatTime = __webpack_require__(61);\n\n      var _formatTime2 = _interopRequireDefault(_formatTime);\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      var _url = __webpack_require__(35);\n\n      var Url = _interopRequireWildcard(_url);\n\n      var _obj = __webpack_require__(13);\n\n      var _computedStyle = __webpack_require__(69);\n\n      var _computedStyle2 = _interopRequireDefault(_computedStyle);\n\n      var _extend = __webpack_require__(107);\n\n      var _extend2 = _interopRequireDefault(_extend);\n\n      var _xhr = __webpack_require__(36);\n\n      var _xhr2 = _interopRequireDefault(_xhr);\n\n      var _tech = __webpack_require__(29);\n\n      var _tech2 = _interopRequireDefault(_tech);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      } // HTML5 Element Shim for IE8\n\n\n      if (typeof HTMLVideoElement === 'undefined' && _window2['default'].document && _window2['default'].document.createElement) {\n        _document2['default'].createElement('video');\n\n        _document2['default'].createElement('audio');\n\n        _document2['default'].createElement('track');\n      }\n      /**\n       * Doubles as the main function for users to create a player instance and also\n       * the main library object.\n       * The `videojs` function can be used to initialize or retrieve a player.\n       * ```js\n       *   var myPlayer = videojs('my_video_id');\n       * ```\n       *\n       * @param {string|Element} id\n       *        Video element or video element ID\n       *\n       * @param {Object} [options]\n       *        Optional options object for config/settings\n       *\n       * @param {Component~ReadyCallback} [ready]\n       *        Optional ready callback\n       *\n       * @return {Player}\n       *         A player instance\n       *\n       * @mixes videojs\n       */\n\n\n      function videojs(id, options, ready) {\n        var tag = void 0;\n        options = options || {}; // Allow for element or ID to be passed in\n        // String ID\n\n        if (typeof id === 'string') {\n          // Adjust for jQuery ID syntax\n          if (id.indexOf('#') === 0) {\n            id = id.slice(1);\n          } // If a player instance has already been created for this ID return it.\n\n\n          if (videojs.getPlayers()[id]) {\n            // If options or ready funtion are passed, warn\n            if (options) {\n              _log2['default'].warn('Player \"' + id + '\" is already initialised. Options will not be applied.');\n            }\n\n            if (ready) {\n              videojs.getPlayers()[id].ready(ready);\n            }\n\n            return videojs.getPlayers()[id];\n          } // Otherwise get element for ID\n\n\n          tag = Dom.getEl(id); // ID is a media element\n        } else {\n          tag = id;\n        } // Check for a useable element\n        // re: nodeName, could be a box div also\n\n\n        if (!tag || !tag.nodeName) {\n          throw new TypeError('The element or ID supplied is not valid. (videojs)');\n        } // Element may have a player attr referring to an already created player instance.\n        // If so return that otherwise set up a new player below\n\n\n        if (tag.player || _player2['default'].players[tag.playerId]) {\n          return tag.player || _player2['default'].players[tag.playerId];\n        }\n\n        videojs.hooks('beforesetup').forEach(function (hookFunction) {\n          var opts = hookFunction(tag, (0, _mergeOptions3['default'])(options));\n\n          if (!(0, _obj.isObject)(opts) || Array.isArray(opts)) {\n            videojs.log.error('please return an object in beforesetup hooks');\n            return;\n          }\n\n          options = (0, _mergeOptions3['default'])(options, opts);\n        });\n\n        var PlayerComponent = _component2['default'].getComponent('Player'); // If not, set up a new player\n\n\n        var player = new PlayerComponent(tag, options, ready);\n        videojs.hooks('setup').forEach(function (hookFunction) {\n          return hookFunction(player);\n        });\n        return player;\n      }\n      /**\n       * An Object that contains lifecycle hooks as keys which point to an array\n       * of functions that are run when a lifecycle is triggered\n       */\n\n\n      videojs.hooks_ = {};\n      /**\n       * Get a list of hooks for a specific lifecycle\n       *\n       * @param {string} type\n       *        the lifecyle to get hooks from\n       *\n       * @param {Function} [fn]\n       *        Optionally add a hook to the lifecycle that your are getting.\n       *\n       * @return {Array}\n       *         an array of hooks, or an empty array if there are none.\n       */\n\n      videojs.hooks = function (type, fn) {\n        videojs.hooks_[type] = videojs.hooks_[type] || [];\n\n        if (fn) {\n          videojs.hooks_[type] = videojs.hooks_[type].concat(fn);\n        }\n\n        return videojs.hooks_[type];\n      };\n      /**\n       * Add a function hook to a specific videojs lifecycle.\n       *\n       * @param {string} type\n       *        the lifecycle to hook the function to.\n       *\n       * @param {Function|Function[]}\n       *        The function or array of functions to attach.\n       */\n\n\n      videojs.hook = function (type, fn) {\n        videojs.hooks(type, fn);\n      };\n      /**\n       * Remove a hook from a specific videojs lifecycle.\n       *\n       * @param {string} type\n       *        the lifecycle that the function hooked to\n       *\n       * @param {Function} fn\n       *        The hooked function to remove\n       *\n       * @return {boolean}\n       *         The function that was removed or undef\n       */\n\n\n      videojs.removeHook = function (type, fn) {\n        var index = videojs.hooks(type).indexOf(fn);\n\n        if (index <= -1) {\n          return false;\n        }\n\n        videojs.hooks_[type] = videojs.hooks_[type].slice();\n        videojs.hooks_[type].splice(index, 1);\n        return true;\n      }; // Add default styles\n\n\n      if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n        var style = Dom.$('.vjs-styles-defaults');\n\n        if (!style) {\n          style = stylesheet.createStyleElement('vjs-styles-defaults');\n          var head = Dom.$('head');\n\n          if (head) {\n            head.insertBefore(style, head.firstChild);\n          }\n\n          stylesheet.setTextContent(style, '\\n      .video-js {\\n        width: 300px;\\n        height: 150px;\\n      }\\n\\n      .vjs-fluid {\\n        padding-top: 56.25%\\n      }\\n    ');\n        }\n      } // Run Auto-load players\n      // You have to wait at least once in case this script is loaded after your\n      // video in the DOM (weird behavior only with minified version)\n\n\n      setup.autoSetupTimeout(1, videojs);\n      /**\n       * Current software version. Follows semver.\n       *\n       * @type {string}\n       */\n\n      videojs.VERSION = '5.14.1';\n      /**\n       * The global options object. These are the settings that take effect\n       * if no overrides are specified when the player is created.\n       *\n       * ```js\n       *     videojs.options.autoplay = true\n       *     // -> all players will autoplay by default\n       * ```\n       *\n       * @type {Object}\n       */\n\n      videojs.options = _player2['default'].prototype.options_;\n      /**\n       * Get an object with the currently created players, keyed by player ID\n       *\n       * @return {Object}\n       *         The created players\n       */\n\n      videojs.getPlayers = function () {\n        return _player2['default'].players;\n      };\n      /**\n       * Expose players object.\n       *\n       * @memberOf videojs\n       * @property {Object} players\n       */\n\n\n      videojs.players = _player2['default'].players;\n      /**\n       * Get a component class object by name\n       * ```js\n       *     var VjsButton = videojs.getComponent('Button');\n       *     // Create a new instance of the component\n       *     var myButton = new VjsButton(myPlayer);\n       * ```\n       *\n       * @borrows Component.getComponent as videojs.getComponent\n       */\n\n      videojs.getComponent = _component2['default'].getComponent;\n      /**\n       * Register a component so it can referred to by name\n       * Used when adding to other\n       * components, either through addChild\n       * `component.addChild('myComponent')`\n       * or through default children options\n       * `{ children: ['myComponent'] }`.\n       * ```js\n       *   // Get a component to subclass\n       *   var VjsButton = videojs.getComponent('Button');\n       *   // Subclass the component (see 'extend' doc for more info)\n       *   var MySpecialButton = videojs.extend(VjsButton, {});\n       *   // Register the new component\n       *   VjsButton.registerComponent('MySepcialButton', MySepcialButton);\n       *   // (optionally) add the new component as a default player child\n       *   myPlayer.addChild('MySepcialButton');\n       * ```\n       * > NOTE: You could also just initialize the component before adding.\n       * `component.addChild(new MyComponent());`\n       *\n       * @param {string} name\n       *        The class name of the component\n       *\n       * @param {Component} comp\n       *        The component class\n       *\n       * @return {Component}\n       *         The newly registered component\n       */\n\n      videojs.registerComponent = function (name, comp) {\n        if (_tech2['default'].isTech(comp)) {\n          _log2['default'].warn('The ' + name + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');\n        }\n\n        _component2['default'].registerComponent.call(_component2['default'], name, comp);\n      };\n      /**\n       * Get a Tech class object by name\n       * ```js\n       *   var Html5 = videojs.getTech('Html5');\n       *   // Create a new instance of the component\n       *   var html5 = new Html5(options);\n       * ```\n       *\n       * @borrows Tech.getTech as videojs.getTech\n       */\n\n\n      videojs.getTech = _tech2['default'].getTech;\n      /**\n       * Register a Tech so it can referred to by name.\n       * This is used in the tech order for the player.\n       *\n       * ```js\n       *     // get the Html5 Tech\n       *     var Html5 = videojs.getTech('Html5');\n       *     var MyTech = videojs.extend(Html5, {});\n       *     // Register the new Tech\n       *     VjsButton.registerTech('Tech', MyTech);\n       *     var player = videojs('myplayer', {\n       *       techOrder: ['myTech', 'html5']\n       *     });\n       * ```\n       *\n       * @borrows Tech.registerTech as videojs.registerTech\n       */\n\n      videojs.registerTech = _tech2['default'].registerTech;\n      /**\n       * A suite of browser and device tests from {@link browser}.\n       *\n       * @type {Object}\n       * @private\n       */\n\n      videojs.browser = browser;\n      /**\n       * Whether or not the browser supports touch events. Included for backward\n       * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`\n       * instead going forward.\n       *\n       * @deprecated since version 5.0\n       * @type {boolean}\n       */\n\n      videojs.TOUCH_ENABLED = browser.TOUCH_ENABLED;\n      /**\n       * Subclass an existing class\n       * Mimics ES6 subclassing with the `extend` keyword\n       * ```js\n       *     // Create a basic javascript 'class'\n       *     function MyClass(name) {\n       *       // Set a property at initialization\n       *       this.myName = name;\n       *     }\n       *     // Create an instance method\n       *     MyClass.prototype.sayMyName = function() {\n       *       alert(this.myName);\n       *     };\n       *     // Subclass the exisitng class and change the name\n       *     // when initializing\n       *     var MySubClass = videojs.extend(MyClass, {\n       *       constructor: function(name) {\n       *         // Call the super class constructor for the subclass\n       *         MyClass.call(this, name)\n       *       }\n       *     });\n       *     // Create an instance of the new sub class\n       *     var myInstance = new MySubClass('John');\n       *     myInstance.sayMyName(); // -> should alert \"John\"\n       * ```\n       *\n       * @borrows extend:extendFn as videojs.extend\n       */\n\n      videojs.extend = _extend2['default'];\n      /**\n       * Merge two options objects recursively\n       * Performs a deep merge like lodash.merge but **only merges plain objects**\n       * (not arrays, elements, anything else)\n       * Other values will be copied directly from the second object.\n       * ```js\n       *     var defaultOptions = {\n       *       foo: true,\n       *       bar: {\n       *         a: true,\n       *         b: [1,2,3]\n       *       }\n       *     };\n       *     var newOptions = {\n       *       foo: false,\n       *       bar: {\n       *         b: [4,5,6]\n       *       }\n       *     };\n       *     var result = videojs.mergeOptions(defaultOptions, newOptions);\n       *     // result.foo = false;\n       *     // result.bar.a = true;\n       *     // result.bar.b = [4,5,6];\n       * ```\n       *\n       * @borrows merge-options:mergeOptions as videojs.mergeOptions\n       */\n\n      videojs.mergeOptions = _mergeOptions3['default'];\n      /**\n       * Change the context (this) of a function\n       *\n       * ``` js\n       *     videojs.bind(newContext, function() {\n       *       this === newContext\n       *     });\n       * ```\n       *\n       * > NOTE: as of v5.0 we require an ES5 shim, so you should use the native\n       * `function() {}.bind(newContext);` instead of this.\n       *\n       * @borrows fn:bind as videojs.bind\n       */\n\n      videojs.bind = Fn.bind;\n      /**\n       * Create a Video.js player plugin.\n       * Plugins are only initialized when options for the plugin are included\n       * in the player options, or the plugin function on the player instance is\n       * called.\n       * **See the plugin guide in the docs for a more detailed example**\n       * ```js\n       *     // Make a plugin that alerts when the player plays\n       *     videojs.plugin('myPlugin', function(myPluginOptions) {\n       *       myPluginOptions = myPluginOptions || {};\n       *\n       *       var player = this;\n       *       var alertText = myPluginOptions.text || 'Player is playing!'\n       *\n       *       player.on('play', function() {\n       *         alert(alertText);\n       *       });\n       *     });\n       *     // USAGE EXAMPLES\n       *     // EXAMPLE 1: New player with plugin options, call plugin immediately\n       *     var player1 = videojs('idOne', {\n       *       myPlugin: {\n       *         text: 'Custom text!'\n       *       }\n       *     });\n       *     // Click play\n       *     // --> Should alert 'Custom text!'\n       *     // EXAMPLE 3: New player, initialize plugin later\n       *     var player3 = videojs('idThree');\n       *     // Click play\n       *     // --> NO ALERT\n       *     // Click pause\n       *     // Initialize plugin using the plugin function on the player instance\n       *     player3.myPlugin({\n       *       text: 'Plugin added later!'\n       *     });\n       *     // Click play\n       *     // --> Should alert 'Plugin added later!'\n       * ```\n       *\n       * @borrows plugin:plugin as videojs.plugin\n       */\n\n      videojs.plugin = _plugins2['default'];\n      /**\n       * Adding languages so that they're available to all players.\n       * ```js\n       *   videojs.addLanguage('es', { 'Hello': 'Hola' });\n       * ```\n       *\n       * @param {string} code\n       *        The language code or dictionary property\n       *\n       * @param {Object} data\n       *        The data values to be translated\n       *\n       * @return {Object}\n       *         The resulting language dictionary object\n       */\n\n      videojs.addLanguage = function (code, data) {\n        var _mergeOptions;\n\n        code = ('' + code).toLowerCase();\n        videojs.options.languages = (0, _mergeOptions3['default'])(videojs.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));\n        return videojs.options.languages[code];\n      };\n      /**\n       * Log messages\n       *\n       * @borrows log:log as videojs.log\n       */\n\n\n      videojs.log = _log2['default'];\n      /**\n       * Creates an emulated TimeRange object.\n       *\n       * @borrows time-ranges:createTimeRanges as videojs.createTimeRange\n       */\n\n      /**\n       * @borrows time-ranges:createTimeRanges as videojs.createTimeRanges\n       */\n\n      videojs.createTimeRange = videojs.createTimeRanges = _timeRanges.createTimeRanges;\n      /**\n       * Format seconds as a time string, H:MM:SS or M:SS\n       * Supplying a guide (in seconds) will force a number of leading zeros\n       * to cover the length of the guide\n       *\n       * @borrows format-time:formatTime as videojs.formatTime\n       */\n\n      videojs.formatTime = _formatTime2['default'];\n      /**\n       * Resolve and parse the elements of a URL\n       *\n       * @borrows url:parseUrl as videojs.parseUrl\n       */\n\n      videojs.parseUrl = Url.parseUrl;\n      /**\n       * Returns whether the url passed is a cross domain request or not.\n       *\n       * @borrows url:isCrossOrigin as videojs.isCrossOrigin\n       */\n\n      videojs.isCrossOrigin = Url.isCrossOrigin;\n      /**\n       * Event target class.\n       *\n       * @borrows EventTarget as videojs.EventTarget\n       */\n\n      videojs.EventTarget = _eventTarget2['default'];\n      /**\n       * Add an event listener to element\n       * It stores the handler function in a separate cache object\n       * and adds a generic handler to the element's event,\n       * along with a unique id (guid) to the element.\n       *\n       * @borrows events:on as videojs.on\n       */\n\n      videojs.on = Events.on;\n      /**\n       * Trigger a listener only once for an event\n       *\n       * @borrows events:one as videojs.one\n       */\n\n      videojs.one = Events.one;\n      /**\n       * Removes event listeners from an element\n       *\n       * @borrows events:off as videojs.off\n       */\n\n      videojs.off = Events.off;\n      /**\n       * Trigger an event for an element\n       *\n       * @borrows events:trigger as videojs.trigger\n       */\n\n      videojs.trigger = Events.trigger;\n      /**\n       * A cross-browser XMLHttpRequest wrapper. Here's a simple example:\n       *\n       * ```js\n       *     videojs.xhr({\n       *       body: someJSONString,\n       *       uri: \"/foo\",\n       *       headers: {\n       *         \"Content-Type\": \"application/json\"\n       *       }\n       *     }, function (err, resp, body) {\n       *       // check resp.statusCode\n       *     });\n       * ```\n       *\n       * @param {Object} options\n       *        settings for the request.\n       *\n       * @return {XMLHttpRequest|XDomainRequest}\n       *         The request object.\n       *\n       * @see https://github.com/Raynos/xhr\n       */\n\n      videojs.xhr = _xhr2['default'];\n      /**\n       * TextTrack class\n       *\n       * @borrows TextTrack as videojs.TextTrack\n       */\n\n      videojs.TextTrack = _textTrack2['default'];\n      /**\n       * export the AudioTrack class so that source handlers can create\n       * AudioTracks and then add them to the players AudioTrackList\n       *\n       * @borrows AudioTrack as videojs.AudioTrack\n       */\n\n      videojs.AudioTrack = _audioTrack2['default'];\n      /**\n       * export the VideoTrack class so that source handlers can create\n       * VideoTracks and then add them to the players VideoTrackList\n       *\n       * @borrows VideoTrack as videojs.VideoTrack\n       */\n\n      videojs.VideoTrack = _videoTrack2['default'];\n      /**\n       * Determines, via duck typing, whether or not a value is a DOM element.\n       *\n       * @borrows dom:isEl as videojs.isEl\n       */\n\n      videojs.isEl = Dom.isEl;\n      /**\n       * Determines, via duck typing, whether or not a value is a text node.\n       *\n       * @borrows dom:isTextNode as videojs.isTextNode\n       */\n\n      videojs.isTextNode = Dom.isTextNode;\n      /**\n       * Creates an element and applies properties.\n       *\n       * @borrows dom:createEl as videojs.createEl\n       */\n\n      videojs.createEl = Dom.createEl;\n      /**\n       * Check if an element has a CSS class\n       *\n       * @borrows dom:hasElClass as videojs.hasClass\n       */\n\n      videojs.hasClass = Dom.hasElClass;\n      /**\n       * Add a CSS class name to an element\n       *\n       * @borrows dom:addElClass as videojs.addClass\n       */\n\n      videojs.addClass = Dom.addElClass;\n      /**\n       * Remove a CSS class name from an element\n       *\n       * @borrows dom:removeElClass as videojs.removeClass\n       */\n\n      videojs.removeClass = Dom.removeElClass;\n      /**\n       * Adds or removes a CSS class name on an element depending on an optional\n       * condition or the presence/absence of the class name.\n       *\n       * @borrows dom:toggleElClass as videojs.toggleClass\n       */\n\n      videojs.toggleClass = Dom.toggleElClass;\n      /**\n       * Apply attributes to an HTML element.\n       *\n       * @borrows dom:setElAttributes as videojs.setAttribute\n       */\n\n      videojs.setAttributes = Dom.setElAttributes;\n      /**\n       * Get an element's attribute values, as defined on the HTML tag\n       * Attributes are not the same as properties. They're defined on the tag\n       * or with setAttribute (which shouldn't be used with HTML)\n       * This will return true or false for boolean attributes.\n       *\n       * @borrows dom:getElAttributes as videojs.getAttributes\n       */\n\n      videojs.getAttributes = Dom.getElAttributes;\n      /**\n       * Empties the contents of an element.\n       *\n       * @borrows dom:emptyEl as videojs.emptyEl\n       */\n\n      videojs.emptyEl = Dom.emptyEl;\n      /**\n       * Normalizes and appends content to an element.\n       *\n       * The content for an element can be passed in multiple types and\n       * combinations, whose behavior is as follows:\n       *\n       * - String\n       *   Normalized into a text node.\n       *\n       * - Element, TextNode\n       *   Passed through.\n       *\n       * - Array\n       *   A one-dimensional array of strings, elements, nodes, or functions (which\n       *   return single strings, elements, or nodes).\n       *\n       * - Function\n       *   If the sole argument, is expected to produce a string, element,\n       *   node, or array.\n       *\n       * @borrows dom:appendContents as videojs.appendContet\n       */\n\n      videojs.appendContent = Dom.appendContent;\n      /**\n       * Normalizes and inserts content into an element; this is identical to\n       * `appendContent()`, except it empties the element first.\n       *\n       * The content for an element can be passed in multiple types and\n       * combinations, whose behavior is as follows:\n       *\n       * - String\n       *   Normalized into a text node.\n       *\n       * - Element, TextNode\n       *   Passed through.\n       *\n       * - Array\n       *   A one-dimensional array of strings, elements, nodes, or functions (which\n       *   return single strings, elements, or nodes).\n       *\n       * - Function\n       *   If the sole argument, is expected to produce a string, element,\n       *   node, or array.\n       *\n       * @borrows dom:insertContent as videojs.insertContent\n       */\n\n      videojs.insertContent = Dom.insertContent;\n      /**\n       * A safe getComputedStyle with an IE8 fallback.\n       *\n       * This is because in Firefox, if the player is loaded in an iframe with `display:none`,\n       * then `getComputedStyle` returns `null`, so, we do a null-check to make sure\n       * that the player doesn't break in these cases.\n       * See https://bugzilla.mozilla.org/show_bug.cgi?id=548397 for more details.\n       *\n       * @borrows computed-style:computedStyle as videojs.computedStyle\n       */\n\n      videojs.computedStyle = _computedStyle2['default'];\n      /*\n       * Custom Universal Module Definition (UMD)\n       *\n       * Video.js will never be a non-browser lib so we can simplify UMD a bunch and\n       * still support requirejs and browserify. This also needs to be closure\n       * compiler compatible, so string keys are used.\n       */\n\n      if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n          return videojs;\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // checking that module is an object too because of umdjs/umd#35\n      } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && (typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') {\n        module.exports = videojs;\n      }\n\n      exports['default'] = videojs;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports) {\n      /* WEBPACK VAR INJECTION */\n      (function (global) {\n        if (typeof window !== \"undefined\") {\n          module.exports = window;\n        } else if (typeof global !== \"undefined\") {\n          module.exports = global;\n        } else if (typeof self !== \"undefined\") {\n          module.exports = self;\n        } else {\n          module.exports = {};\n        }\n        /* WEBPACK VAR INJECTION */\n\n      }).call(exports, function () {\n        return this;\n      }());\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /* WEBPACK VAR INJECTION */\n      (function (global) {\n        var topLevel = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : {};\n\n        var minDoc = __webpack_require__(6);\n\n        if (typeof document !== 'undefined') {\n          module.exports = document;\n        } else {\n          var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n          if (!doccy) {\n            doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n          }\n\n          module.exports = doccy;\n        }\n        /* WEBPACK VAR INJECTION */\n\n      }).call(exports, function () {\n        return this;\n      }());\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports) {\n      /* (ignored) */\n\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.hasLoaded = exports.autoSetupTimeout = exports.autoSetup = undefined;\n\n      var _events = __webpack_require__(8);\n\n      var Events = _interopRequireWildcard(_events);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      var _windowLoaded = false;\n      /**\n       * Functions for setting up a player without user insteraction based on the data-setup\n       * `attribute` of the video tag.\n       *\n       * @file setup.js\n       * @module setup\n       */\n\n      var videojs = void 0;\n      /**\n       * Set up any tags that have a data-setup `attribute` when the player is started.\n       */\n\n      var autoSetup = function autoSetup() {\n        // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*\n        // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));\n        // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));\n        // var mediaEls = vids.concat(audios);\n        // Because IE8 doesn't support calling slice on a node list, we need to loop\n        // through each list of elements to build up a new, combined list of elements.\n        var vids = _document2['default'].getElementsByTagName('video');\n\n        var audios = _document2['default'].getElementsByTagName('audio');\n\n        var mediaEls = [];\n\n        if (vids && vids.length > 0) {\n          for (var i = 0, e = vids.length; i < e; i++) {\n            mediaEls.push(vids[i]);\n          }\n        }\n\n        if (audios && audios.length > 0) {\n          for (var _i = 0, _e = audios.length; _i < _e; _i++) {\n            mediaEls.push(audios[_i]);\n          }\n        } // Check if any media elements exist\n\n\n        if (mediaEls && mediaEls.length > 0) {\n          for (var _i2 = 0, _e2 = mediaEls.length; _i2 < _e2; _i2++) {\n            var mediaEl = mediaEls[_i2]; // Check if element exists, has getAttribute func.\n            // IE seems to consider typeof el.getAttribute == 'object' instead of\n            // 'function' like expected, at least when loading the player immediately.\n\n            if (mediaEl && mediaEl.getAttribute) {\n              // Make sure this player hasn't already been set up.\n              if (mediaEl.player === undefined) {\n                var options = mediaEl.getAttribute('data-setup'); // Check if data-setup attr exists.\n                // We only auto-setup if they've added the data-setup attr.\n\n                if (options !== null) {\n                  // Create new video.js instance.\n                  videojs(mediaEl);\n                }\n              } // If getAttribute isn't defined, we need to wait for the DOM.\n\n            } else {\n              autoSetupTimeout(1);\n              break;\n            }\n          } // No videos were found, so keep looping unless page is finished loading.\n\n        } else if (!_windowLoaded) {\n          autoSetupTimeout(1);\n        }\n      };\n      /**\n       * Wait until the page is loaded before running autoSetup. This will be called in\n       * autoSetup if `hasLoaded` returns false.\n       */\n\n\n      function autoSetupTimeout(wait, vjs) {\n        if (vjs) {\n          videojs = vjs;\n        }\n\n        setTimeout(autoSetup, wait);\n      }\n\n      if (_document2['default'].readyState === 'complete') {\n        _windowLoaded = true;\n      } else {\n        /**\n         * Listen for the load event on window, and set _windowLoaded to true.\n         *\n         * @listens load\n         */\n        Events.one(_window2['default'], 'load', function () {\n          _windowLoaded = true;\n        });\n      }\n      /**\n       * check if the document has been loaded\n       */\n\n\n      var hasLoaded = function hasLoaded() {\n        return _windowLoaded;\n      };\n\n      exports.autoSetup = autoSetup;\n      exports.autoSetupTimeout = autoSetupTimeout;\n      exports.hasLoaded = hasLoaded;\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.fixEvent = fixEvent;\n      exports.on = on;\n      exports.off = off;\n      exports.trigger = trigger;\n      exports.one = one;\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _guid = __webpack_require__(10);\n\n      var Guid = _interopRequireWildcard(_guid);\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n      /**\n       * Clean up the listener cache and dispatchers\n       *\n       * @param {Element|Object} elem\n       *        Element to clean up\n       *\n       * @param {string} type\n       *        Type of event to clean up\n       */\n\n\n      function _cleanUpEvents(elem, type) {\n        var data = Dom.getElData(elem); // Remove the events of a particular type if there are none left\n\n        if (data.handlers[type].length === 0) {\n          delete data.handlers[type]; // data.handlers[type] = null;\n          // Setting to null was causing an error with data.handlers\n          // Remove the meta-handler from the element\n\n          if (elem.removeEventListener) {\n            elem.removeEventListener(type, data.dispatcher, false);\n          } else if (elem.detachEvent) {\n            elem.detachEvent('on' + type, data.dispatcher);\n          }\n        } // Remove the events object if there are no types left\n\n\n        if (Object.getOwnPropertyNames(data.handlers).length <= 0) {\n          delete data.handlers;\n          delete data.dispatcher;\n          delete data.disabled;\n        } // Finally remove the element data if there is no data left\n\n\n        if (Object.getOwnPropertyNames(data).length === 0) {\n          Dom.removeElData(elem);\n        }\n      }\n      /**\n       * Loops through an array of event types and calls the requested method for each type.\n       *\n       * @param {Function} fn\n       *        The event method we want to use.\n       *\n       * @param {Element|Object} elem\n       *        Element or object to bind listeners to\n       *\n       * @param {string} type\n       *        Type of event to bind to.\n       *\n       * @param {EventTarget~EventListener} callback\n       *        Event listener.\n       */\n\n      /**\n       * @file events.js\n       * @module events\n       *\n       * Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)\n       * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)\n       * This should work very similarly to jQuery's events, however it's based off the book version which isn't as\n       * robust as jquery's, so there's probably some differences.\n       */\n\n\n      function _handleMultipleEvents(fn, elem, types, callback) {\n        types.forEach(function (type) {\n          // Call the event method for each one of the types\n          fn(elem, type, callback);\n        });\n      }\n      /**\n       * Fix a native event to have standard property values\n       *\n       * @param {Object} event\n       *        Event object to fix.\n       *\n       * @return {Object}\n       *         Fixed event object.\n       */\n\n\n      function fixEvent(event) {\n        function returnTrue() {\n          return true;\n        }\n\n        function returnFalse() {\n          return false;\n        } // Test if fixing up is needed\n        // Used to check if !event.stopPropagation instead of isPropagationStopped\n        // But native events return true for stopPropagation, but don't have\n        // other expected methods like isPropagationStopped. Seems to be a problem\n        // with the Javascript Ninja code. So we're just overriding all events now.\n\n\n        if (!event || !event.isPropagationStopped) {\n          (function () {\n            var old = event || _window2['default'].event;\n            event = {}; // Clone the old object so that we can modify the values event = {};\n            // IE8 Doesn't like when you mess with native event properties\n            // Firefox returns false for event.hasOwnProperty('type') and other props\n            //  which makes copying more difficult.\n            // TODO: Probably best to create a whitelist of event props\n\n            for (var key in old) {\n              // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y\n              // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation\n              // and webkitMovementX/Y\n              if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {\n                // Chrome 32+ warns if you try to copy deprecated returnValue, but\n                // we still want to if preventDefault isn't supported (IE8).\n                if (!(key === 'returnValue' && old.preventDefault)) {\n                  event[key] = old[key];\n                }\n              }\n            } // The event occurred on this element\n\n\n            if (!event.target) {\n              event.target = event.srcElement || _document2['default'];\n            } // Handle which other element the event is related to\n\n\n            if (!event.relatedTarget) {\n              event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;\n            } // Stop the default browser action\n\n\n            event.preventDefault = function () {\n              if (old.preventDefault) {\n                old.preventDefault();\n              }\n\n              event.returnValue = false;\n              old.returnValue = false;\n              event.defaultPrevented = true;\n            };\n\n            event.defaultPrevented = false; // Stop the event from bubbling\n\n            event.stopPropagation = function () {\n              if (old.stopPropagation) {\n                old.stopPropagation();\n              }\n\n              event.cancelBubble = true;\n              old.cancelBubble = true;\n              event.isPropagationStopped = returnTrue;\n            };\n\n            event.isPropagationStopped = returnFalse; // Stop the event from bubbling and executing other handlers\n\n            event.stopImmediatePropagation = function () {\n              if (old.stopImmediatePropagation) {\n                old.stopImmediatePropagation();\n              }\n\n              event.isImmediatePropagationStopped = returnTrue;\n              event.stopPropagation();\n            };\n\n            event.isImmediatePropagationStopped = returnFalse; // Handle mouse position\n\n            if (event.clientX !== null && event.clientX !== undefined) {\n              var doc = _document2['default'].documentElement;\n              var body = _document2['default'].body;\n              event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n              event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n            } // Handle key presses\n\n\n            event.which = event.charCode || event.keyCode; // Fix button for mouse clicks:\n            // 0 == left; 1 == middle; 2 == right\n\n            if (event.button !== null && event.button !== undefined) {\n              // The following is disabled because it does not pass videojs-standard\n              // and... yikes.\n\n              /* eslint-disable */\n              event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;\n              /* eslint-enable */\n            }\n          })();\n        } // Returns fixed-up instance\n\n\n        return event;\n      }\n      /**\n       * Add an event listener to element\n       * It stores the handler function in a separate cache object\n       * and adds a generic handler to the element's event,\n       * along with a unique id (guid) to the element.\n       *\n       * @param {Element|Object} elem\n       *        Element or object to bind listeners to\n       *\n       * @param {string|string[]} type\n       *        Type of event to bind to.\n       *\n       * @param {EventTarget~EventListener} fn\n       *        Event listener.\n       */\n\n\n      function on(elem, type, fn) {\n        if (Array.isArray(type)) {\n          return _handleMultipleEvents(on, elem, type, fn);\n        }\n\n        var data = Dom.getElData(elem); // We need a place to store all our handler data\n\n        if (!data.handlers) {\n          data.handlers = {};\n        }\n\n        if (!data.handlers[type]) {\n          data.handlers[type] = [];\n        }\n\n        if (!fn.guid) {\n          fn.guid = Guid.newGUID();\n        }\n\n        data.handlers[type].push(fn);\n\n        if (!data.dispatcher) {\n          data.disabled = false;\n\n          data.dispatcher = function (event, hash) {\n            if (data.disabled) {\n              return;\n            }\n\n            event = fixEvent(event);\n            var handlers = data.handlers[event.type];\n\n            if (handlers) {\n              // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.\n              var handlersCopy = handlers.slice(0);\n\n              for (var m = 0, n = handlersCopy.length; m < n; m++) {\n                if (event.isImmediatePropagationStopped()) {\n                  break;\n                } else {\n                  try {\n                    handlersCopy[m].call(elem, event, hash);\n                  } catch (e) {\n                    _log2['default'].error(e);\n                  }\n                }\n              }\n            }\n          };\n        }\n\n        if (data.handlers[type].length === 1) {\n          if (elem.addEventListener) {\n            elem.addEventListener(type, data.dispatcher, false);\n          } else if (elem.attachEvent) {\n            elem.attachEvent('on' + type, data.dispatcher);\n          }\n        }\n      }\n      /**\n       * Removes event listeners from an element\n       *\n       * @param {Element|Object} elem\n       *        Object to remove listeners from.\n       *\n       * @param {string|string[]} [type]\n       *        Type of listener to remove. Don't include to remove all events from element.\n       *\n       * @param {EventTarget~EventListener} [fn]\n       *        Specific listener to remove. Don't include to remove listeners for an event\n       *        type.\n       */\n\n\n      function off(elem, type, fn) {\n        // Don't want to add a cache object through getElData if not needed\n        if (!Dom.hasElData(elem)) {\n          return;\n        }\n\n        var data = Dom.getElData(elem); // If no events exist, nothing to unbind\n\n        if (!data.handlers) {\n          return;\n        }\n\n        if (Array.isArray(type)) {\n          return _handleMultipleEvents(off, elem, type, fn);\n        } // Utility function\n\n\n        var removeType = function removeType(t) {\n          data.handlers[t] = [];\n\n          _cleanUpEvents(elem, t);\n        }; // Are we removing all bound events?\n\n\n        if (!type) {\n          for (var t in data.handlers) {\n            removeType(t);\n          }\n\n          return;\n        }\n\n        var handlers = data.handlers[type]; // If no handlers exist, nothing to unbind\n\n        if (!handlers) {\n          return;\n        } // If no listener was provided, remove all listeners for type\n\n\n        if (!fn) {\n          removeType(type);\n          return;\n        } // We're only removing a single handler\n\n\n        if (fn.guid) {\n          for (var n = 0; n < handlers.length; n++) {\n            if (handlers[n].guid === fn.guid) {\n              handlers.splice(n--, 1);\n            }\n          }\n        }\n\n        _cleanUpEvents(elem, type);\n      }\n      /**\n       * Trigger an event for an element\n       *\n       * @param {Element|Object} elem\n       *        Element to trigger an event on\n       *\n       * @param {EventTarget~Event|string} event\n       *        A string (the type) or an event object with a type attribute\n       *\n       * @param {Object} [hash]\n       *        data hash to pass along with the event\n       *\n       * @return {boolean|undefined}\n       *         - Returns the opposite of `defaultPrevented` if default was prevented\n       *         - Otherwise returns undefined\n       */\n\n\n      function trigger(elem, event, hash) {\n        // Fetches element data and a reference to the parent (for bubbling).\n        // Don't want to add a data object to cache for every parent,\n        // so checking hasElData first.\n        var elemData = Dom.hasElData(elem) ? Dom.getElData(elem) : {};\n        var parent = elem.parentNode || elem.ownerDocument; // type = event.type || event,\n        // handler;\n        // If an event name was passed as a string, creates an event out of it\n\n        if (typeof event === 'string') {\n          event = {\n            type: event,\n            target: elem\n          };\n        } // Normalizes the event properties.\n\n\n        event = fixEvent(event); // If the passed element has a dispatcher, executes the established handlers.\n\n        if (elemData.dispatcher) {\n          elemData.dispatcher.call(elem, event, hash);\n        } // Unless explicitly stopped or the event does not bubble (e.g. media events)\n        // recursively calls this function to bubble the event up the DOM.\n\n\n        if (parent && !event.isPropagationStopped() && event.bubbles === true) {\n          trigger.call(null, parent, event, hash); // If at the top of the DOM, triggers the default action unless disabled.\n        } else if (!parent && !event.defaultPrevented) {\n          var targetData = Dom.getElData(event.target); // Checks if the target has a default action for this event.\n\n          if (event.target[event.type]) {\n            // Temporarily disables event dispatching on the target as we have already executed the handler.\n            targetData.disabled = true; // Executes the default action.\n\n            if (typeof event.target[event.type] === 'function') {\n              event.target[event.type]();\n            } // Re-enables event dispatching.\n\n\n            targetData.disabled = false;\n          }\n        } // Inform the triggerer if the default was prevented by returning false\n\n\n        return !event.defaultPrevented;\n      }\n      /**\n       * Trigger a listener only once for an event\n       *\n       * @param {Element|Object} elem\n       *        Element or object to bind to.\n       *\n       * @param {string|string[]} type\n       *        Name/type of event\n       *\n       * @param {Event~EventListener} fn\n       *        Event Listener function\n       */\n\n\n      function one(elem, type, fn) {\n        if (Array.isArray(type)) {\n          return _handleMultipleEvents(one, elem, type, fn);\n        }\n\n        var func = function func() {\n          off(elem, type, func);\n          fn.apply(this, arguments);\n        }; // copy the guid to the new function so it can removed using the original function's ID\n\n\n        func.guid = fn.guid = fn.guid || Guid.newGUID();\n        on(elem, type, func);\n      }\n      /***/\n\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.$$ = exports.$ = undefined;\n\n      var _templateObject = _taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\\n                has been deprecated. Use the third argument instead.\\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\\n                has been deprecated. Use the third argument instead.\\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);\n\n      exports.isEl = isEl;\n      exports.getEl = getEl;\n      exports.createEl = createEl;\n      exports.textContent = textContent;\n      exports.insertElFirst = insertElFirst;\n      exports.getElData = getElData;\n      exports.hasElData = hasElData;\n      exports.removeElData = removeElData;\n      exports.hasElClass = hasElClass;\n      exports.addElClass = addElClass;\n      exports.removeElClass = removeElClass;\n      exports.toggleElClass = toggleElClass;\n      exports.setElAttributes = setElAttributes;\n      exports.getElAttributes = getElAttributes;\n      exports.getAttribute = getAttribute;\n      exports.setAttribute = setAttribute;\n      exports.removeAttribute = removeAttribute;\n      exports.blockTextSelection = blockTextSelection;\n      exports.unblockTextSelection = unblockTextSelection;\n      exports.findElPosition = findElPosition;\n      exports.getPointerPosition = getPointerPosition;\n      exports.isTextNode = isTextNode;\n      exports.emptyEl = emptyEl;\n      exports.normalizeContent = normalizeContent;\n      exports.appendContent = appendContent;\n      exports.insertContent = insertContent;\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      var _guid = __webpack_require__(10);\n\n      var Guid = _interopRequireWildcard(_guid);\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      var _tsml = __webpack_require__(14);\n\n      var _tsml2 = _interopRequireDefault(_tsml);\n\n      var _obj = __webpack_require__(13);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _taggedTemplateLiteralLoose(strings, raw) {\n        strings.raw = raw;\n        return strings;\n      }\n      /**\n       * @file dom.js\n       * @module dom\n       */\n\n      /**\n       * Detect if a value is a string with any non-whitespace characters.\n       *\n       * @param {string} str\n       *        The string to check\n       *\n       * @return {boolean}\n       *         - True if the string is non-blank\n       *         - False otherwise\n       *\n       */\n\n\n      function isNonBlankString(str) {\n        return typeof str === 'string' && /\\S/.test(str);\n      }\n      /**\n       * Throws an error if the passed string has whitespace. This is used by\n       * class methods to be relatively consistent with the classList API.\n       *\n       * @param {string} str\n       *         The string to check for whitespace.\n       *\n       * @throws {Error}\n       *         Throws an error if there is whitespace in the string.\n       *\n       */\n\n\n      function throwIfWhitespace(str) {\n        if (/\\s/.test(str)) {\n          throw new Error('class has illegal whitespace characters');\n        }\n      }\n      /**\n       * Produce a regular expression for matching a className within an elements className.\n       *\n       * @param {string} className\n       *         The className to generate the RegExp for.\n       *\n       * @return {RegExp}\n       *         The RegExp that will check for a specific `className` in an elements\n       *         className.\n       */\n\n\n      function classRegExp(className) {\n        return new RegExp('(^|\\\\s)' + className + '($|\\\\s)');\n      }\n      /**\n       * Determines, via duck typing, whether or not a value is a DOM element.\n       *\n       * @param {Mixed} value\n       *        The thing to check\n       *\n       * @return {boolean}\n       *         - True if it is a DOM element\n       *         - False otherwise\n       */\n\n\n      function isEl(value) {\n        return (0, _obj.isObject)(value) && value.nodeType === 1;\n      }\n      /**\n       * Creates functions to query the DOM using a given method.\n       *\n       * @param {string} method\n       *         The method to create the query with.\n       *\n       * @return {Function}\n       *         The query method\n       */\n\n\n      function createQuerier(method) {\n        return function (selector, context) {\n          if (!isNonBlankString(selector)) {\n            return _document2['default'][method](null);\n          }\n\n          if (isNonBlankString(context)) {\n            context = _document2['default'].querySelector(context);\n          }\n\n          var ctx = isEl(context) ? context : _document2['default'];\n          return ctx[method] && ctx[method](selector);\n        };\n      }\n      /**\n       * Shorthand for document.getElementById()\n       * Also allows for CSS (jQuery) ID syntax. But nothing other than IDs.\n       *\n       * @param {string} id\n       *         The id of the element to get\n       *\n       * @return {Element|null}\n       *         Element with supplied ID or null if there wasn't one.\n       */\n\n\n      function getEl(id) {\n        if (id.indexOf('#') === 0) {\n          id = id.slice(1);\n        }\n\n        return _document2['default'].getElementById(id);\n      }\n      /**\n       * Creates an element and applies properties.\n       *\n       * @param {string} [tagName='div']\n       *         Name of tag to be created.\n       *\n       * @param {Object} [properties={}]\n       *         Element properties to be applied.\n       *\n       * @param {Object} [attributes={}]\n       *         Element attributes to be applied.\n       *\n       * @param {String|Element|TextNode|Array|Function} [content]\n       *         Contents for the element (see: {@link dom:normalizeContent})\n       *\n       * @return {Element}\n       *         The element that was created.\n       */\n\n\n      function createEl() {\n        var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';\n        var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var content = arguments[3];\n\n        var el = _document2['default'].createElement(tagName);\n\n        Object.getOwnPropertyNames(properties).forEach(function (propName) {\n          var val = properties[propName]; // See #2176\n          // We originally were accepting both properties and attributes in the\n          // same object, but that doesn't work so well.\n\n          if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {\n            _log2['default'].warn((0, _tsml2['default'])(_templateObject, propName, val));\n\n            el.setAttribute(propName, val); // Handle textContent since it's not supported everywhere and we have a\n            // method for it.\n          } else if (propName === 'textContent') {\n            textContent(el, val);\n          } else {\n            el[propName] = val;\n          }\n        });\n        Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n          el.setAttribute(attrName, attributes[attrName]);\n        });\n\n        if (content) {\n          appendContent(el, content);\n        }\n\n        return el;\n      }\n      /**\n       * Injects text into an element, replacing any existing contents entirely.\n       *\n       * @param {Element} el\n       *        The element to add text content into\n       *\n       * @param {string} text\n       *        The text content to add.\n       *\n       * @return {Element}\n       *         The element with added text content.\n       */\n\n\n      function textContent(el, text) {\n        if (typeof el.textContent === 'undefined') {\n          el.innerText = text;\n        } else {\n          el.textContent = text;\n        }\n\n        return el;\n      }\n      /**\n       * Insert an element as the first child node of another\n       *\n       * @param {Element} child\n       *        Element to insert\n       *\n       * @param {Element} parent\n       *        Element to insert child into\n       *\n       */\n\n\n      function insertElFirst(child, parent) {\n        if (parent.firstChild) {\n          parent.insertBefore(child, parent.firstChild);\n        } else {\n          parent.appendChild(child);\n        }\n      }\n      /**\n       * Element Data Store. Allows for binding data to an element without putting it directly on the element.\n       * Ex. Event listeners are stored here.\n       * (also from jsninja.com, slightly modified and updated for closure compiler)\n       *\n       * @type {Object}\n       * @private\n       */\n\n\n      var elData = {};\n      /*\n       * Unique attribute name to store an element's guid in\n       *\n       * @type {string}\n       * @constant\n       * @private\n       */\n\n      var elIdAttr = 'vdata' + new Date().getTime();\n      /**\n       * Returns the cache object where data for an element is stored\n       *\n       * @param {Element} el\n       *        Element to store data for.\n       *\n       * @return {Object}\n       *         The cache object for that el that was passed in.\n       */\n\n      function getElData(el) {\n        var id = el[elIdAttr];\n\n        if (!id) {\n          id = el[elIdAttr] = Guid.newGUID();\n        }\n\n        if (!elData[id]) {\n          elData[id] = {};\n        }\n\n        return elData[id];\n      }\n      /**\n       * Returns whether or not an element has cached data\n       *\n       * @param {Element} el\n       *        Check if this element has cached data.\n       *\n       * @return {boolean}\n       *         - True if the DOM element has cached data.\n       *         - False otherwise.\n       */\n\n\n      function hasElData(el) {\n        var id = el[elIdAttr];\n\n        if (!id) {\n          return false;\n        }\n\n        return !!Object.getOwnPropertyNames(elData[id]).length;\n      }\n      /**\n       * Delete data for the element from the cache and the guid attr from getElementById\n       *\n       * @param {Element} el\n       *        Remove cached data for this element.\n       */\n\n\n      function removeElData(el) {\n        var id = el[elIdAttr];\n\n        if (!id) {\n          return;\n        } // Remove all stored data\n\n\n        delete elData[id]; // Remove the elIdAttr property from the DOM node\n\n        try {\n          delete el[elIdAttr];\n        } catch (e) {\n          if (el.removeAttribute) {\n            el.removeAttribute(elIdAttr);\n          } else {\n            // IE doesn't appear to support removeAttribute on the document element\n            el[elIdAttr] = null;\n          }\n        }\n      }\n      /**\n       * Check if an element has a CSS class\n       *\n       * @param {Element} element\n       *        Element to check\n       *\n       * @param {string} classToCheck\n       *        Class name to check for\n       *\n       * @return {boolean}\n       *         - True if the element had the class\n       *         - False otherwise.\n       *\n       * @throws {Error}\n       *         Throws an error if `classToCheck` has white space.\n       */\n\n\n      function hasElClass(element, classToCheck) {\n        throwIfWhitespace(classToCheck);\n\n        if (element.classList) {\n          return element.classList.contains(classToCheck);\n        }\n\n        return classRegExp(classToCheck).test(element.className);\n      }\n      /**\n       * Add a CSS class name to an element\n       *\n       * @param {Element} element\n       *        Element to add class name to.\n       *\n       * @param {string} classToAdd\n       *        Class name to add.\n       *\n       * @return {Element}\n       *         The dom element with the added class name.\n       */\n\n\n      function addElClass(element, classToAdd) {\n        if (element.classList) {\n          element.classList.add(classToAdd); // Don't need to `throwIfWhitespace` here because `hasElClass` will do it\n          // in the case of classList not being supported.\n        } else if (!hasElClass(element, classToAdd)) {\n          element.className = (element.className + ' ' + classToAdd).trim();\n        }\n\n        return element;\n      }\n      /**\n       * Remove a CSS class name from an element\n       *\n       * @param {Element} element\n       *        Element to remove a class name from.\n       *\n       * @param {string} classToRemove\n       *        Class name to remove\n       *\n       * @return {Element}\n       *         The dom element with class name removed.\n       */\n\n\n      function removeElClass(element, classToRemove) {\n        if (element.classList) {\n          element.classList.remove(classToRemove);\n        } else {\n          throwIfWhitespace(classToRemove);\n          element.className = element.className.split(/\\s+/).filter(function (c) {\n            return c !== classToRemove;\n          }).join(' ');\n        }\n\n        return element;\n      }\n      /**\n       * The callback definition for toggleElClass.\n       *\n       * @callback Dom~PredicateCallback\n       * @param {Element} element\n       *        The DOM element of the Component.\n       *\n       * @param {string} classToToggle\n       *        The `className` that wants to be toggled\n       *\n       * @return {boolean|undefined}\n       *         - If true the `classToToggle` will get added to `element`.\n       *         - If false the `classToToggle` will get removed from `element`.\n       *         - If undefined this callback will be ignored\n       */\n\n      /**\n       * Adds or removes a CSS class name on an element depending on an optional\n       * condition or the presence/absence of the class name.\n       *\n       * @param {Element} element\n       *        The element to toggle a class name on.\n       *\n       * @param {string} classToToggle\n       *        The class that should be toggled\n       *\n       * @param {boolean|PredicateCallback} [predicate]\n       *        See the return value for {@link Dom~PredicateCallback}\n       *\n       * @return {Element}\n       *         The element with a class that has been toggled.\n       */\n\n\n      function toggleElClass(element, classToToggle, predicate) {\n        // This CANNOT use `classList` internally because IE does not support the\n        // second parameter to the `classList.toggle()` method! Which is fine because\n        // `classList` will be used by the add/remove functions.\n        var has = hasElClass(element, classToToggle);\n\n        if (typeof predicate === 'function') {\n          predicate = predicate(element, classToToggle);\n        }\n\n        if (typeof predicate !== 'boolean') {\n          predicate = !has;\n        } // If the necessary class operation matches the current state of the\n        // element, no action is required.\n\n\n        if (predicate === has) {\n          return;\n        }\n\n        if (predicate) {\n          addElClass(element, classToToggle);\n        } else {\n          removeElClass(element, classToToggle);\n        }\n\n        return element;\n      }\n      /**\n       * Apply attributes to an HTML element.\n       *\n       * @param {Element} el\n       *        Element to add attributes to.\n       *\n       * @param {Object} [attributes]\n       *        Attributes to be applied.\n       */\n\n\n      function setElAttributes(el, attributes) {\n        Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n          var attrValue = attributes[attrName];\n\n          if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {\n            el.removeAttribute(attrName);\n          } else {\n            el.setAttribute(attrName, attrValue === true ? '' : attrValue);\n          }\n        });\n      }\n      /**\n       * Get an element's attribute values, as defined on the HTML tag\n       * Attributes are not the same as properties. They're defined on the tag\n       * or with setAttribute (which shouldn't be used with HTML)\n       * This will return true or false for boolean attributes.\n       *\n       * @param {Element} tag\n       *        Element from which to get tag attributes.\n       *\n       * @return {Object}\n       *         All attributes of the element.\n       */\n\n\n      function getElAttributes(tag) {\n        var obj = {}; // known boolean attributes\n        // we can check for matching boolean properties, but older browsers\n        // won't know about HTML5 boolean attributes that we still read from\n\n        var knownBooleans = ',' + 'autoplay,controls,loop,muted,default' + ',';\n\n        if (tag && tag.attributes && tag.attributes.length > 0) {\n          var attrs = tag.attributes;\n\n          for (var i = attrs.length - 1; i >= 0; i--) {\n            var attrName = attrs[i].name;\n            var attrVal = attrs[i].value; // check for known booleans\n            // the matching element property will return a value for typeof\n\n            if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {\n              // the value of an included boolean attribute is typically an empty\n              // string ('') which would equal false if we just check for a false value.\n              // we also don't want support bad code like autoplay='false'\n              attrVal = attrVal !== null ? true : false;\n            }\n\n            obj[attrName] = attrVal;\n          }\n        }\n\n        return obj;\n      }\n      /**\n       * Get the value of an element's attribute\n       *\n       * @param {Element} el\n       *        A DOM element\n       *\n       * @param {string} attribute\n       *        Attribute to get the value of\n       *\n       * @return {string}\n       *         value of the attribute\n       */\n\n\n      function getAttribute(el, attribute) {\n        return el.getAttribute(attribute);\n      }\n      /**\n       * Set the value of an element's attribute\n       *\n       * @param {Element} el\n       *        A DOM element\n       *\n       * @param {string} attribute\n       *        Attribute to set\n       *\n       * @param {string} value\n       *        Value to set the attribute to\n       */\n\n\n      function setAttribute(el, attribute, value) {\n        el.setAttribute(attribute, value);\n      }\n      /**\n       * Remove an element's attribute\n       *\n       * @param {Element} el\n       *        A DOM element\n       *\n       * @param {string} attribute\n       *        Attribute to remove\n       */\n\n\n      function removeAttribute(el, attribute) {\n        el.removeAttribute(attribute);\n      }\n      /**\n       * Attempt to block the ability to select text while dragging controls\n       */\n\n\n      function blockTextSelection() {\n        _document2['default'].body.focus();\n\n        _document2['default'].onselectstart = function () {\n          return false;\n        };\n      }\n      /**\n       * Turn off text selection blocking\n       */\n\n\n      function unblockTextSelection() {\n        _document2['default'].onselectstart = function () {\n          return true;\n        };\n      }\n      /**\n       * The postion of a DOM element on the page.\n       *\n       * @typedef {Object} Dom~Position\n       *\n       * @property {number} left\n       *           Pixels to the left\n       *\n       * @property {number} top\n       *           Pixels on top\n       */\n\n      /**\n       * Offset Left.\n       * getBoundingClientRect technique from\n       * John Resig\n       *\n       * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/\n       *\n       * @param {Element} el\n       *        Element from which to get offset\n       *\n       * @return {Dom~Position}\n       *         The position of the element that was passed in.\n       */\n\n\n      function findElPosition(el) {\n        var box = void 0;\n\n        if (el.getBoundingClientRect && el.parentNode) {\n          box = el.getBoundingClientRect();\n        }\n\n        if (!box) {\n          return {\n            left: 0,\n            top: 0\n          };\n        }\n\n        var docEl = _document2['default'].documentElement;\n        var body = _document2['default'].body;\n        var clientLeft = docEl.clientLeft || body.clientLeft || 0;\n        var scrollLeft = _window2['default'].pageXOffset || body.scrollLeft;\n        var left = box.left + scrollLeft - clientLeft;\n        var clientTop = docEl.clientTop || body.clientTop || 0;\n        var scrollTop = _window2['default'].pageYOffset || body.scrollTop;\n        var top = box.top + scrollTop - clientTop; // Android sometimes returns slightly off decimal values, so need to round\n\n        return {\n          left: Math.round(left),\n          top: Math.round(top)\n        };\n      }\n      /**\n       * x and y coordinates for a dom element or mouse pointer\n       *\n       * @typedef {Object} Dom~Coordinates\n       *\n       * @property {number} x\n       *           x coordinate in pixels\n       *\n       * @property {number} y\n       *           y coordinate in pixels\n       */\n\n      /**\n       * Get pointer position in element\n       * Returns an object with x and y coordinates.\n       * The base on the coordinates are the bottom left of the element.\n       *\n       * @param {Element} el\n       *        Element on which to get the pointer position on\n       *\n       * @param {EventTarget~Event} event\n       *        Event object\n       *\n       * @return {Dom~Coordinates}\n       *         A Coordinates object corresponding to the mouse position.\n       *\n       */\n\n\n      function getPointerPosition(el, event) {\n        var position = {};\n        var box = findElPosition(el);\n        var boxW = el.offsetWidth;\n        var boxH = el.offsetHeight;\n        var boxY = box.top;\n        var boxX = box.left;\n        var pageY = event.pageY;\n        var pageX = event.pageX;\n\n        if (event.changedTouches) {\n          pageX = event.changedTouches[0].pageX;\n          pageY = event.changedTouches[0].pageY;\n        }\n\n        position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));\n        position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));\n        return position;\n      }\n      /**\n       * Determines, via duck typing, whether or not a value is a text node.\n       *\n       * @param {Mixed} value\n       *        Check if this value is a text node.\n       *\n       * @return {boolean}\n       *         - True if it is a text node\n       *         - False otherwise\n       */\n\n\n      function isTextNode(value) {\n        return (0, _obj.isObject)(value) && value.nodeType === 3;\n      }\n      /**\n       * Empties the contents of an element.\n       *\n       * @param {Element} el\n       *        The element to empty children from\n       *\n       * @return {Element}\n       *         The element with no children\n       */\n\n\n      function emptyEl(el) {\n        while (el.firstChild) {\n          el.removeChild(el.firstChild);\n        }\n\n        return el;\n      }\n      /**\n       * Normalizes content for eventual insertion into the DOM.\n       *\n       * This allows a wide range of content definition methods, but protects\n       * from falling into the trap of simply writing to `innerHTML`, which is\n       * an XSS concern.\n       *\n       * The content for an element can be passed in multiple types and\n       * combinations, whose behavior is as follows:\n       *\n       * @param {String|Element|TextNode|Array|Function} content\n       *        - String: Normalized into a text node.\n       *        - Element/TextNode: Passed through.\n       *        - Array: A one-dimensional array of strings, elements, nodes, or functions\n       *          (which return single strings, elements, or nodes).\n       *        - Function: If the sole argument, is expected to produce a string, element,\n       *          node, or array as defined above.\n       *\n       * @return {Array}\n       *         All of the content that was passed in normalized.\n       */\n\n\n      function normalizeContent(content) {\n        // First, invoke content if it is a function. If it produces an array,\n        // that needs to happen before normalization.\n        if (typeof content === 'function') {\n          content = content();\n        } // Next up, normalize to an array, so one or many items can be normalized,\n        // filtered, and returned.\n\n\n        return (Array.isArray(content) ? content : [content]).map(function (value) {\n          // First, invoke value if it is a function to produce a new value,\n          // which will be subsequently normalized to a Node of some kind.\n          if (typeof value === 'function') {\n            value = value();\n          }\n\n          if (isEl(value) || isTextNode(value)) {\n            return value;\n          }\n\n          if (typeof value === 'string' && /\\S/.test(value)) {\n            return _document2['default'].createTextNode(value);\n          }\n        }).filter(function (value) {\n          return value;\n        });\n      }\n      /**\n       * Normalizes and appends content to an element.\n       *\n       * @param {Element} el\n       *        Element to append normalized content to.\n       *\n       *\n       * @param {String|Element|TextNode|Array|Function} content\n       *        See the `content` argument of {@link dom:normalizeContent}\n       *\n       * @return {Element}\n       *         The element with appended normalized content.\n       */\n\n\n      function appendContent(el, content) {\n        normalizeContent(content).forEach(function (node) {\n          return el.appendChild(node);\n        });\n        return el;\n      }\n      /**\n       * Normalizes and inserts content into an element; this is identical to\n       * `appendContent()`, except it empties the element first.\n       *\n       * @param {Element} el\n       *        Element to insert normalized content into.\n       *\n       * @param {String|Element|TextNode|Array|Function} content\n       *        See the `content` argument of {@link dom:normalizeContent}\n       *\n       * @return {Element}\n       *         The element with inserted normalized content.\n       *\n       */\n\n\n      function insertContent(el, content) {\n        return appendContent(emptyEl(el), content);\n      }\n      /**\n       * Finds a single DOM element matching `selector` within the optional\n       * `context` of another DOM element (defaulting to `document`).\n       *\n       * @param {string} selector\n       *        A valid CSS selector, which will be passed to `querySelector`.\n       *\n       * @param {Element|String} [context=document]\n       *        A DOM element within which to query. Can also be a selector\n       *        string in which case the first matching element will be used\n       *        as context. If missing (or no element matches selector), falls\n       *        back to `document`.\n       *\n       * @return {Element|null}\n       *         The element that was found or null.\n       */\n\n\n      var $ = exports.$ = createQuerier('querySelector');\n      /**\n       * Finds a all DOM elements matching `selector` within the optional\n       * `context` of another DOM element (defaulting to `document`).\n       *\n       * @param {string} selector\n       *           A valid CSS selector, which will be passed to `querySelectorAll`.\n       *\n       * @param {Element|String} [context=document]\n       *           A DOM element within which to query. Can also be a selector\n       *           string in which case the first matching element will be used\n       *           as context. If missing (or no element matches selector), falls\n       *           back to `document`.\n       *\n       * @return {NodeList}\n       *         A element list of elements that were found. Will be empty if none were found.\n       *\n       */\n\n      var $$ = exports.$$ = createQuerier('querySelectorAll');\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      exports.__esModule = true;\n      exports.newGUID = newGUID;\n      /**\n       * @file guid.js\n       * @module guid\n       */\n\n      /**\n       * Unique ID for an element or function\n       * @type {Number}\n       */\n\n      var _guid = 1;\n      /**\n       * Get a unique auto-incrementing ID by number that has not been returned before.\n       *\n       * @return {number}\n       *         A new unique ID.\n       */\n\n      function newGUID() {\n        return _guid++;\n      }\n      /***/\n\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.logByType = undefined;\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      var _browser = __webpack_require__(12);\n\n      var _obj = __webpack_require__(13);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      var log = void 0;\n      /**\n       * Log messages to the console and history based on the type of message\n       *\n       * @param  {string} type\n       *         The name of the console method to use.\n       *\n       * @param  {Array} args\n       *         The arguments to be passed to the matching console method.\n       *\n       * @param  {boolean} [stringify]\n       *         By default, only old IEs should get console argument stringification,\n       *         but this is exposed as a parameter to facilitate testing.\n       */\n\n      /**\n       * @file log.js\n       * @module log\n       */\n\n      var logByType = exports.logByType = function logByType(type, args) {\n        var stringify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !!_browser.IE_VERSION && _browser.IE_VERSION < 11;\n\n        if (type !== 'log') {\n          // add the type to the front of the message when it's not \"log\"\n          args.unshift(type.toUpperCase() + ':');\n        } // add to history\n\n\n        log.history.push(args); // add console prefix after adding to history\n\n        args.unshift('VIDEOJS:'); // If there's no console then don't try to output messages, but they will\n        // still be stored in `log.history`.\n        //\n        // Was setting these once outside of this function, but containing them\n        // in the function makes it easier to test cases where console doesn't exist\n        // when the module is executed.\n\n        var fn = _window2['default'].console && _window2['default'].console[type]; // Bail out if there's no console.\n\n        if (!fn) {\n          return;\n        } // IEs previous to 11 log objects uselessly as \"[object Object]\"; so, JSONify\n        // objects and arrays for those less-capable browsers.\n\n\n        if (stringify) {\n          args = args.map(function (a) {\n            if ((0, _obj.isObject)(a) || Array.isArray(a)) {\n              try {\n                return JSON.stringify(a);\n              } catch (x) {\n                return String(a);\n              }\n            } // Cast to string before joining, so we get null and undefined explicitly\n            // included in output (as we would in a modern console).\n\n\n            return String(a);\n          }).join(' ');\n        } // Old IE versions do not allow .apply() for console methods (they are\n        // reported as objects rather than functions).\n\n\n        if (!fn.apply) {\n          fn(args);\n        } else {\n          fn[Array.isArray(args) ? 'apply' : 'call'](_window2['default'].console, args);\n        }\n      };\n      /**\n       * Log plain debug messages\n       *\n       * @param {Mixed[]} args\n       *        One or more messages or objects that should be logged.\n       */\n\n\n      log = function log() {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        logByType('log', args);\n      };\n      /**\n       * Keep a history of log messages\n       *\n       * @type {Array}\n       */\n\n\n      log.history = [];\n      /**\n       * Log error messages\n       *\n       * @param {Mixed[]} args\n       *        One or more messages or objects that should be logged as an error\n       */\n\n      log.error = function () {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return logByType('error', args);\n      };\n      /**\n       * Log warning messages\n       *\n       * @param {Mixed[]} args\n       *        One or more messages or objects that should be logged as a warning.\n       */\n\n\n      log.warn = function () {\n        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        return logByType('warn', args);\n      };\n\n      exports['default'] = log;\n      /***/\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.BACKGROUND_SIZE_SUPPORTED = exports.TOUCH_ENABLED = exports.IS_ANY_SAFARI = exports.IS_SAFARI = exports.IE_VERSION = exports.IS_IE8 = exports.IS_CHROME = exports.IS_EDGE = exports.IS_FIREFOX = exports.IS_NATIVE_ANDROID = exports.IS_OLD_ANDROID = exports.ANDROID_VERSION = exports.IS_ANDROID = exports.IOS_VERSION = exports.IS_IOS = exports.IS_IPOD = exports.IS_IPHONE = exports.IS_IPAD = undefined;\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n      /**\n       * @file browser.js\n       * @module browser\n       */\n\n\n      var USER_AGENT = _window2['default'].navigator && _window2['default'].navigator.userAgent || '';\n      var webkitVersionMap = /AppleWebKit\\/([\\d.]+)/i.exec(USER_AGENT);\n      var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;\n      /*\n       * Device is an iPhone\n       *\n       * @type {Boolean}\n       * @constant\n       * @private\n       */\n\n      var IS_IPAD = exports.IS_IPAD = /iPad/i.test(USER_AGENT); // The Facebook app's UIWebView identifies as both an iPhone and iPad, so\n      // to identify iPhones, we need to exclude iPads.\n      // http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/\n\n      var IS_IPHONE = exports.IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;\n      var IS_IPOD = exports.IS_IPOD = /iPod/i.test(USER_AGENT);\n      var IS_IOS = exports.IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;\n\n      var IOS_VERSION = exports.IOS_VERSION = function () {\n        var match = USER_AGENT.match(/OS (\\d+)_/i);\n\n        if (match && match[1]) {\n          return match[1];\n        }\n\n        return null;\n      }();\n\n      var IS_ANDROID = exports.IS_ANDROID = /Android/i.test(USER_AGENT);\n\n      var ANDROID_VERSION = exports.ANDROID_VERSION = function () {\n        // This matches Android Major.Minor.Patch versions\n        // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned\n        var match = USER_AGENT.match(/Android (\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))*/i);\n\n        if (!match) {\n          return null;\n        }\n\n        var major = match[1] && parseFloat(match[1]);\n        var minor = match[2] && parseFloat(match[2]);\n\n        if (major && minor) {\n          return parseFloat(match[1] + '.' + match[2]);\n        } else if (major) {\n          return major;\n        }\n\n        return null;\n      }(); // Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser\n\n\n      var IS_OLD_ANDROID = exports.IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;\n      var IS_NATIVE_ANDROID = exports.IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;\n      var IS_FIREFOX = exports.IS_FIREFOX = /Firefox/i.test(USER_AGENT);\n      var IS_EDGE = exports.IS_EDGE = /Edge/i.test(USER_AGENT);\n      var IS_CHROME = exports.IS_CHROME = !IS_EDGE && /Chrome/i.test(USER_AGENT);\n      var IS_IE8 = exports.IS_IE8 = /MSIE\\s8\\.0/.test(USER_AGENT);\n\n      var IE_VERSION = exports.IE_VERSION = function (result) {\n        return result && parseFloat(result[1]);\n      }(/MSIE\\s(\\d+)\\.\\d/.exec(USER_AGENT));\n\n      var IS_SAFARI = exports.IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;\n      var IS_ANY_SAFARI = exports.IS_ANY_SAFARI = IS_SAFARI || IS_IOS;\n      var TOUCH_ENABLED = exports.TOUCH_ENABLED = !!('ontouchstart' in _window2['default'] || _window2['default'].DocumentTouch && _document2['default'] instanceof _window2['default'].DocumentTouch);\n\n      var BACKGROUND_SIZE_SUPPORTED = exports.BACKGROUND_SIZE_SUPPORTED = 'backgroundSize' in _document2['default'].createElement('video').style;\n      /***/\n\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      exports.each = each;\n      exports.reduce = reduce;\n      exports.assign = assign;\n      exports.isObject = isObject;\n      exports.isPlain = isPlain;\n      /**\n       * @file obj.js\n       * @module obj\n       */\n\n      /**\n       * @callback obj:EachCallback\n       *\n       * @param {Mixed} value\n       *        The current key for the object that is being iterated over.\n       *\n       * @param {string} key\n       *        The current key-value for object that is being iterated over\n       */\n\n      /**\n       * @callback obj:ReduceCallback\n       *\n       * @param {Mixed} accum\n       *        The value that is accumulating over the reduce loop.\n       *\n       * @param {Mixed} value\n       *        The current key for the object that is being iterated over.\n       *\n       * @param {string} key\n       *        The current key-value for object that is being iterated over\n       *\n       * @return {Mixed}\n       *         The new accumulated value.\n       */\n\n      var toString = Object.prototype.toString;\n      /**\n       * Array-like iteration for objects.\n       *\n       * @param {Object} object\n       *        The object to iterate over\n       *\n       * @param {obj:EachCallback} fn\n       *        The callback function which is called for each key in the object.\n       */\n\n      function each(object, fn) {\n        Object.keys(object).forEach(function (key) {\n          return fn(object[key], key);\n        });\n      }\n      /**\n       * Array-like reduce for objects.\n       *\n       * @param {Object} object\n       *        The Object that you want to reduce.\n       *\n       * @param {Function} fn\n       *         A callback function which is called for each key in the object. It\n       *         receives the accumulated value and the per-iteration value and key\n       *         as arguments.\n       *\n       * @param {Mixed} [initial = 0]\n       *        Starting value\n       *\n       * @return {Mixed}\n       *         The final accumulated value.\n       */\n\n\n      function reduce(object, fn) {\n        var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        return Object.keys(object).reduce(function (accum, key) {\n          return fn(accum, object[key], key);\n        }, initial);\n      }\n      /**\n       * Object.assign-style object shallow merge/extend.\n       *\n       * @param  {Object} target\n       * @param  {Object} ...sources\n       * @return {Object}\n       */\n\n\n      function assign(target) {\n        for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          sources[_key - 1] = arguments[_key];\n        }\n\n        if (Object.assign) {\n          return Object.assign.apply(Object, [target].concat(sources));\n        }\n\n        sources.forEach(function (source) {\n          if (!source) {\n            return;\n          }\n\n          each(source, function (value, key) {\n            target[key] = value;\n          });\n        });\n        return target;\n      }\n      /**\n       * Returns whether a value is an object of any kind - including DOM nodes,\n       * arrays, regular expressions, etc. Not functions, though.\n       *\n       * This avoids the gotcha where using `typeof` on a `null` value\n       * results in `'object'`.\n       *\n       * @param  {Object} value\n       * @return {Boolean}\n       */\n\n\n      function isObject(value) {\n        return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';\n      }\n      /**\n       * Returns whether an object appears to be a \"plain\" object - that is, a\n       * direct instance of `Object`.\n       *\n       * @param  {Object} value\n       * @return {Boolean}\n       */\n\n\n      function isPlain(value) {\n        return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;\n      }\n      /***/\n\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports) {\n      function clean(s) {\n        return s.replace(/\\n\\r?\\s*/g, '');\n      }\n\n      module.exports = function tsml(sa) {\n        var s = '',\n            i = 0;\n\n        for (; i < arguments.length; i++) {\n          s += clean(sa[i]) + (arguments[i + 1] || '');\n        }\n\n        return s;\n      };\n      /***/\n\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.setTextContent = exports.createStyleElement = undefined;\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n      /**\n       * Create a DOM syle element given a className for it.\n       *\n       * @param {string} className\n       *        The className to add to the created style element.\n       *\n       * @return {Element}\n       *         The element that was created.\n       */\n\n\n      var createStyleElement = exports.createStyleElement = function createStyleElement(className) {\n        var style = _document2['default'].createElement('style');\n\n        style.className = className;\n        return style;\n      };\n      /**\n       * Add text to a DOM element.\n       *\n       * @param {Element} el\n       *        The Element to add text content to.\n       *\n       * @param {string} content\n       *        The text to add to the element.\n       */\n\n      /**\n       * @file stylesheet.js\n       * @module stylesheet\n       */\n\n\n      var setTextContent = exports.setTextContent = function setTextContent(el, content) {\n        if (el.styleSheet) {\n          el.styleSheet.cssText = content;\n        } else {\n          el.textContent = content;\n        }\n      };\n      /***/\n\n    },\n    /* 16 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _guid = __webpack_require__(10);\n\n      var Guid = _interopRequireWildcard(_guid);\n\n      var _events = __webpack_require__(8);\n\n      var Events = _interopRequireWildcard(_events);\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      var _toTitleCase = __webpack_require__(18);\n\n      var _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\n      var _mergeOptions = __webpack_require__(19);\n\n      var _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /**\n       * Player Component - Base class for all UI objects\n       *\n       * @file component.js\n       */\n\n      /**\n       * Base class for all UI Components.\n       * Components are UI objects which represent both a javascript object and an element\n       * in the DOM. They can be children of other components, and can have\n       * children themselves.\n       *\n       * Creating a button component.\n       * ``` js\n       *   // adding a button to the player\n       *   var player = videojs('some-video-id');\n       *   var Component = videojs.getComponent('Component');\n       *   var button = new Component(player);\n       *\n       *   console.log(button.el());\n       * ```\n       *\n       * Above code will log this html.\n       * ```html\n       *   <div class=\"video-js\">\n       *     <div class=\"vjs-button\">Button</div>\n       *   </div>\n       * ```\n       *\n       * Adding a button to the player\n       * ``` js\n       *   // adding a button to the player\n       *   var player = videojs('some-video-id');\n       *   var button = player.addChild('button');\n       *\n       *   console.log(button.el());\n       *   // will have the same html result as the previous example\n       * ```\n       *\n       * Components can also use methods from {@link EventTarget}\n       */\n\n\n      var Component = function () {\n        /**\n         * A callback that is called when a component is ready. Does not have any\n         * paramters and any callback value will be ignored.\n         *\n         * @callback Component~ReadyCallback\n         * @this Component\n         */\n\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *         The key/value store of player options.\n         *\n         * @param {Component~ReadyCallback} [ready]\n         *        Function that gets called when the `Component` is ready.\n         */\n        function Component(player, options, ready) {\n          _classCallCheck(this, Component); // The component might be the player itself and we can't pass `this` to super\n\n\n          if (!player && this.play) {\n            this.player_ = player = this; // eslint-disable-line\n          } else {\n            this.player_ = player;\n          } // Make a copy of prototype.options_ to protect against overriding defaults\n\n\n          this.options_ = (0, _mergeOptions2['default'])({}, this.options_); // Updated options with supplied options\n\n          options = this.options_ = (0, _mergeOptions2['default'])(this.options_, options); // Get ID from options or options element if one is supplied\n\n          this.id_ = options.id || options.el && options.el.id; // If there was no ID from the options, generate one\n\n          if (!this.id_) {\n            // Don't require the player ID function in the case of mock players\n            var id = player && player.id && player.id() || 'no_player';\n            this.id_ = id + '_component_' + Guid.newGUID();\n          }\n\n          this.name_ = options.name || null; // Create element if one wasn't provided in options\n\n          if (options.el) {\n            this.el_ = options.el;\n          } else if (options.createEl !== false) {\n            this.el_ = this.createEl();\n          }\n\n          this.children_ = [];\n          this.childIndex_ = {};\n          this.childNameIndex_ = {}; // Add any child components in options\n\n          if (options.initChildren !== false) {\n            this.initChildren();\n          }\n\n          this.ready(ready); // Don't want to trigger ready here or it will before init is actually\n          // finished for all children that run this constructor\n\n          if (options.reportTouchActivity !== false) {\n            this.enableTouchActivity();\n          }\n        }\n        /**\n         * Dispose of the `Component` and all child components.\n         *\n         * @fires Component#dispose\n         */\n\n\n        Component.prototype.dispose = function dispose() {\n          /**\n           * Triggered when a `Component` is disposed.\n           *\n           * @event Component#dispose\n           * @type {EventTarget~Event}\n           *\n           * @property {boolean} [bubbles=false]\n           *           set to false so that the close event does not\n           *           bubble up\n           */\n          this.trigger({\n            type: 'dispose',\n            bubbles: false\n          }); // Dispose all children.\n\n          if (this.children_) {\n            for (var i = this.children_.length - 1; i >= 0; i--) {\n              if (this.children_[i].dispose) {\n                this.children_[i].dispose();\n              }\n            }\n          } // Delete child references\n\n\n          this.children_ = null;\n          this.childIndex_ = null;\n          this.childNameIndex_ = null; // Remove all event listeners.\n\n          this.off(); // Remove element from DOM\n\n          if (this.el_.parentNode) {\n            this.el_.parentNode.removeChild(this.el_);\n          }\n\n          Dom.removeElData(this.el_);\n          this.el_ = null;\n        };\n        /**\n         * Return the {@link Player} that the `Component` has attached to.\n         *\n         * @return {Player}\n         *         The player that this `Component` has attached to.\n         */\n\n\n        Component.prototype.player = function player() {\n          return this.player_;\n        };\n        /**\n         * Deep merge of options objects with new options.\n         * > Note: When both `obj` and `options` contain properties whose values are objects.\n         *         The two properties get merged using {@link module:mergeOptions}\n         *\n         * Example\n         * ```js\n         *   var player = videojs('some-vid-id');\n         *   var Component = videojs.getComponent('Component');\n         *   var component = new Component(player, {\n         *     optionSet: {\n         *       childOne: {foo: 'bar', asdf: 'fdsa'},\n         *       childTwo: {},\n         *       childThree: {}\n         *     }\n         *   });\n         *\n         *   const newOptions = {\n         *     optionSet: {\n         *       childOne: {foo: 'baz', abc: '123'}\n         *       childTwo: null,\n         *       childFour: {}\n         *     }\n         *   };\n         *\n         *   console.log(component.options(newOptions));\n         * ```\n         *\n         * Result\n         * ```js\n         *   {\n         *     optionSet: {\n         *       childOne: {foo: 'baz', asdf: 'fdsa', abc: '123' },\n         *       childTwo: null,\n         *       childThree: {},\n         *       childFour: {}\n         *     }\n         *   }\n         * ```\n         *\n         * @param {Object} obj\n         *        The object that contains new options.\n         *\n         * @return {Object}\n         *         A new object of `this.options_` and `obj` merged together.\n         *\n         * @deprecated since version 5\n         */\n\n\n        Component.prototype.options = function options(obj) {\n          _log2['default'].warn('this.options() has been deprecated and will be moved to the constructor in 6.0');\n\n          if (!obj) {\n            return this.options_;\n          }\n\n          this.options_ = (0, _mergeOptions2['default'])(this.options_, obj);\n          return this.options_;\n        };\n        /**\n         * Get the `Component`s DOM element\n         *\n         * @return {Element}\n         *         The DOM element for this `Component`.\n         */\n\n\n        Component.prototype.el = function el() {\n          return this.el_;\n        };\n        /**\n         * Create the `Component`s DOM element.\n         *\n         * @param {string} [tagName]\n         *        Element's DOM node type. e.g. 'div'\n         *\n         * @param {Object} [properties]\n         *        An object of properties that should be set.\n         *\n         * @param {Object} [attributes]\n         *        An object of attributes that should be set.\n         *\n         * @return {Element}\n         *         The element that gets created.\n         */\n\n\n        Component.prototype.createEl = function createEl(tagName, properties, attributes) {\n          return Dom.createEl(tagName, properties, attributes);\n        };\n        /**\n         * Localize a string given the string in english.\n         *\n         * @param {string} string\n         *        The string to localize.\n         *\n         * @return {string}\n         *         The localized string or if no localization exists the english string.\n         */\n\n\n        Component.prototype.localize = function localize(string) {\n          var code = this.player_.language && this.player_.language();\n          var languages = this.player_.languages && this.player_.languages();\n\n          if (!code || !languages) {\n            return string;\n          }\n\n          var language = languages[code];\n\n          if (language && language[string]) {\n            return language[string];\n          }\n\n          var primaryCode = code.split('-')[0];\n          var primaryLang = languages[primaryCode];\n\n          if (primaryLang && primaryLang[string]) {\n            return primaryLang[string];\n          }\n\n          return string;\n        };\n        /**\n         * Return the `Component`s DOM element. This is where children get inserted.\n         * This will usually be the the same as the element returned in {@link Component#el}.\n         *\n         * @return {Element}\n         *         The content element for this `Component`.\n         */\n\n\n        Component.prototype.contentEl = function contentEl() {\n          return this.contentEl_ || this.el_;\n        };\n        /**\n         * Get this `Component`s ID\n         *\n         * @return {string}\n         *         The id of this `Component`\n         */\n\n\n        Component.prototype.id = function id() {\n          return this.id_;\n        };\n        /**\n         * Get the `Component`s name. The name gets used to reference the `Component`\n         * and is set during registration.\n         *\n         * @return {string}\n         *         The name of this `Component`.\n         */\n\n\n        Component.prototype.name = function name() {\n          return this.name_;\n        };\n        /**\n         * Get an array of all child components\n         *\n         * @return {Array}\n         *         The children\n         */\n\n\n        Component.prototype.children = function children() {\n          return this.children_;\n        };\n        /**\n         * Returns the child `Component` with the given `id`.\n         *\n         * @param {string} id\n         *        The id of the child `Component` to get.\n         *\n         * @return {Component|undefined}\n         *         The child `Component` with the given `id` or undefined.\n         */\n\n\n        Component.prototype.getChildById = function getChildById(id) {\n          return this.childIndex_[id];\n        };\n        /**\n         * Returns the child `Component` with the given `name`.\n         *\n         * @param {string} name\n         *        The name of the child `Component` to get.\n         *\n         * @return {Component|undefined}\n         *         The child `Component` with the given `name` or undefined.\n         */\n\n\n        Component.prototype.getChild = function getChild(name) {\n          if (!name) {\n            return;\n          }\n\n          name = (0, _toTitleCase2['default'])(name);\n          return this.childNameIndex_[name];\n        };\n        /**\n         * Add a child `Component` inside the current `Component`.\n         *\n         * Example:\n         * ```js\n         *   var player = videojs('some-vid-id');\n         *   var Component = videojs.getComponent('Component');\n         *   var myComponent = new Component(player);\n         *\n         *   console.log(myComponent.el());\n         *   // -> <div class='my-component'></div>\n         *   console.log(myComponent.children());\n         *   // [empty array]\n         *\n         *   var myButton = myComponent.addChild('MyButton');\n         *\n         *   console.log(myComponent.el());\n         *   // -> <div class='my-component'><div class=\"my-button\">myButton<div></div>\n         *   console.log(myComponent.children());\n         *   // -> myButton === myComponent.children()[0];\n         * ```\n         *\n         * Pass in options for child constructors and options for children of the child.\n         * ```js\n         *   var player = videojs('some-vid-id');\n         *   var Component = videojs.getComponent('Component');\n         *   var myComponent = new Component(player);\n         *   var myButton = myComponent.addChild('MyButton', {\n         *     text: 'Press Me',\n         *     buttonChildExample: {\n         *       buttonChildOption: true\n         *     }\n         *   });\n         * ```\n         *\n         * @param {string|Component} child\n         *        The name or instance of a child to add.\n         *\n         * @param {Object} [options={}]\n         *        The key/value store of options that will get passed to children of\n         *        the child.\n         *\n         * @param {number} [index=this.children_.length]\n         *        The index to attempt to add a child into.\n         *\n         * @return {Component}\n         *         The `Component` that gets added as a child. When using a string the\n         *         `Component` will get created by this process.\n         */\n\n\n        Component.prototype.addChild = function addChild(child) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;\n          var component = void 0;\n          var componentName = void 0; // If child is a string, create component with options\n\n          if (typeof child === 'string') {\n            componentName = (0, _toTitleCase2['default'])(child); // Options can also be specified as a boolean,\n            // so convert to an empty object if false.\n\n            if (!options) {\n              options = {};\n            } // Same as above, but true is deprecated so show a warning.\n\n\n            if (options === true) {\n              _log2['default'].warn('Initializing a child component with `true` is deprecated.' + 'Children should be defined in an array when possible, ' + 'but if necessary use an object instead of `true`.');\n\n              options = {};\n            }\n\n            var componentClassName = options.componentClass || componentName; // Set name through options\n\n            options.name = componentName; // Create a new object & element for this controls set\n            // If there's no .player_, this is a player\n\n            var ComponentClass = Component.getComponent(componentClassName);\n\n            if (!ComponentClass) {\n              throw new Error('Component ' + componentClassName + ' does not exist');\n            } // data stored directly on the videojs object may be\n            // misidentified as a component to retain\n            // backwards-compatibility with 4.x. check to make sure the\n            // component class can be instantiated.\n\n\n            if (typeof ComponentClass !== 'function') {\n              return null;\n            }\n\n            component = new ComponentClass(this.player_ || this, options); // child is a component instance\n          } else {\n            component = child;\n          }\n\n          this.children_.splice(index, 0, component);\n\n          if (typeof component.id === 'function') {\n            this.childIndex_[component.id()] = component;\n          } // If a name wasn't used to create the component, check if we can use the\n          // name function of the component\n\n\n          componentName = componentName || component.name && component.name();\n\n          if (componentName) {\n            this.childNameIndex_[componentName] = component;\n          } // Add the UI object's element to the container div (box)\n          // Having an element is not required\n\n\n          if (typeof component.el === 'function' && component.el()) {\n            var childNodes = this.contentEl().children;\n            var refNode = childNodes[index] || null;\n            this.contentEl().insertBefore(component.el(), refNode);\n          } // Return so it can stored on parent object if desired.\n\n\n          return component;\n        };\n        /**\n         * Remove a child `Component` from this `Component`s list of children. Also removes\n         * the child `Component`s element from this `Component`s element.\n         *\n         * @param {Component} component\n         *        The child `Component` to remove.\n         */\n\n\n        Component.prototype.removeChild = function removeChild(component) {\n          if (typeof component === 'string') {\n            component = this.getChild(component);\n          }\n\n          if (!component || !this.children_) {\n            return;\n          }\n\n          var childFound = false;\n\n          for (var i = this.children_.length - 1; i >= 0; i--) {\n            if (this.children_[i] === component) {\n              childFound = true;\n              this.children_.splice(i, 1);\n              break;\n            }\n          }\n\n          if (!childFound) {\n            return;\n          }\n\n          this.childIndex_[component.id()] = null;\n          this.childNameIndex_[component.name()] = null;\n          var compEl = component.el();\n\n          if (compEl && compEl.parentNode === this.contentEl()) {\n            this.contentEl().removeChild(component.el());\n          }\n        };\n        /**\n         * Add and initialize default child `Component`s based upon options.\n         *\n         * Example.\n         * ```js\n         *   var MyComponent = videojs.extend(videojs.getComponent('Component'));\n         *   // when an instance of MyComponent is created, all children in options\n         *   // will be added to the instance by their name strings and options\n         *   MyComponent.prototype.options_ = {\n         *     children: [\n         *       'myChildComponent'\n         *     ],\n         *     myChildComponent: {\n         *       myChildOption: true\n         *     }\n         *   };\n         *\n         *   // Or when creating the component\n         *   var player = videojs('some-player-id');\n         *   var myComp = new MyComponent(player, {\n         *     children: [\n         *       'myChildComponent'\n         *     ],\n         *     myChildComponent: {\n         *       myChildOption: true\n         *     }\n         *   });\n         * ```\n         *\n         * The children option can also be an array of child options objects\n         * (that also include a 'name' key). This will get used if you have two child\n         * components of the same type that need different options.\n         * ```js\n         *   // MyComponent is from the above example\n         *   var myComp = new MyComponent(player, {\n         *     children: ['button', {\n         *       name: 'button',\n         *       someOtherOption: true\n         *     }, {\n         *       name: 'button',\n         *       someOtherOption: false\n         *     }]\n         *   });\n         * ```\n         */\n\n\n        Component.prototype.initChildren = function initChildren() {\n          var _this = this;\n\n          var children = this.options_.children;\n\n          if (children) {\n            (function () {\n              // `this` is `parent`\n              var parentOptions = _this.options_;\n\n              var handleAdd = function handleAdd(child) {\n                var name = child.name;\n                var opts = child.opts; // Allow options for children to be set at the parent options\n                // e.g. videojs(id, { controlBar: false });\n                // instead of videojs(id, { children: { controlBar: false });\n\n                if (parentOptions[name] !== undefined) {\n                  opts = parentOptions[name];\n                } // Allow for disabling default components\n                // e.g. options['children']['posterImage'] = false\n\n\n                if (opts === false) {\n                  return;\n                } // Allow options to be passed as a simple boolean if no configuration\n                // is necessary.\n\n\n                if (opts === true) {\n                  opts = {};\n                } // We also want to pass the original player options\n                // to each component as well so they don't need to\n                // reach back into the player for options later.\n\n\n                opts.playerOptions = _this.options_.playerOptions; // Create and add the child component.\n                // Add a direct reference to the child by name on the parent instance.\n                // If two of the same component are used, different names should be supplied\n                // for each\n\n                var newChild = _this.addChild(name, opts);\n\n                if (newChild) {\n                  _this[name] = newChild;\n                }\n              }; // Allow for an array of children details to passed in the options\n\n\n              var workingChildren = void 0;\n              var Tech = Component.getComponent('Tech');\n\n              if (Array.isArray(children)) {\n                workingChildren = children;\n              } else {\n                workingChildren = Object.keys(children);\n              }\n\n              workingChildren // children that are in this.options_ but also in workingChildren  would\n              // give us extra children we do not want. So, we want to filter them out.\n              .concat(Object.keys(_this.options_).filter(function (child) {\n                return !workingChildren.some(function (wchild) {\n                  if (typeof wchild === 'string') {\n                    return child === wchild;\n                  }\n\n                  return child === wchild.name;\n                });\n              })).map(function (child) {\n                var name = void 0;\n                var opts = void 0;\n\n                if (typeof child === 'string') {\n                  name = child;\n                  opts = children[name] || _this.options_[name] || {};\n                } else {\n                  name = child.name;\n                  opts = child;\n                }\n\n                return {\n                  name: name,\n                  opts: opts\n                };\n              }).filter(function (child) {\n                // we have to make sure that child.name isn't in the techOrder since\n                // techs are registerd as Components but can't aren't compatible\n                // See https://github.com/videojs/video.js/issues/2772\n                var c = Component.getComponent(child.opts.componentClass || (0, _toTitleCase2['default'])(child.name));\n                return c && !Tech.isTech(c);\n              }).forEach(handleAdd);\n            })();\n          }\n        };\n        /**\n         * Builds the default DOM class name. Should be overriden by sub-components.\n         *\n         * @return {string}\n         *         The DOM class name for this object.\n         *\n         * @abstract\n         */\n\n\n        Component.prototype.buildCSSClass = function buildCSSClass() {\n          // Child classes can include a function that does:\n          // return 'CLASS NAME' + this._super();\n          return '';\n        };\n        /**\n         * Add an `event listener` to this `Component`s element.\n         *\n         * ```js\n         *   var player = videojs('some-player-id');\n         *   var Component = videojs.getComponent('Component');\n         *   var myComponent = new Component(player);\n         *   var myFunc = function() {\n         *     var myComponent = this;\n         *     console.log('myFunc called');\n         *   };\n         *\n         *   myComponent.on('eventType', myFunc);\n         *   myComponent.trigger('eventType');\n         *   // logs 'myFunc called'\n         * ```\n         *\n         * The context of `myFunc` will be `myComponent` unless it is bound. You can add\n         * a listener to another element or component.\n         * ```js\n         *   var otherComponent = new Component(player);\n         *\n         *   // myComponent/myFunc is from the above example\n         *   myComponent.on(otherComponent.el(), 'eventName', myFunc);\n         *   myComponent.on(otherComponent, 'eventName', myFunc);\n         *\n         *   otherComponent.trigger('eventName');\n         *   // logs 'myFunc called' twice\n         * ```\n         *\n         * The benefit of using this over the following:\n         * - `VjsEvents.on(otherElement, 'eventName', myFunc)`\n         * - `otherComponent.on('eventName', myFunc)`\n         * Is that the listeners will get cleaned up when either component gets disposed.\n         * It will also bind `myComponent` as the context of `myFunc`.\n         * > NOTE: If you remove the element from the DOM that has used `on` you need to\n         *             clean up references using:\n         *\n         *             `myComponent.trigger(el, 'dispose')`\n         *\n         *             This will also allow the browser to garbage collect it. In special\n         *             cases such as with `window` and `document`, which are both permanent,\n         *             this is not necessary.\n         *\n         * @param {string|Component|string[]} [first]\n         *        The event name, and array of event names, or another `Component`.\n         *\n         * @param {EventTarget~EventListener|string|string[]} [second]\n         *        The listener function, an event name, or an Array of events names.\n         *\n         * @param {EventTarget~EventListener} [third]\n         *        The event handler if `first` is a `Component` and `second` is an event name\n         *        or an Array of event names.\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         *\n         * @listens Component#dispose\n         */\n\n\n        Component.prototype.on = function on(first, second, third) {\n          var _this2 = this;\n\n          if (typeof first === 'string' || Array.isArray(first)) {\n            Events.on(this.el_, first, Fn.bind(this, second)); // Targeting another component or element\n          } else {\n            (function () {\n              var target = first;\n              var type = second;\n              var fn = Fn.bind(_this2, third); // When this component is disposed, remove the listener from the other component\n\n              var removeOnDispose = function removeOnDispose() {\n                return _this2.off(target, type, fn);\n              }; // Use the same function ID so we can remove it later it using the ID\n              // of the original listener\n\n\n              removeOnDispose.guid = fn.guid;\n\n              _this2.on('dispose', removeOnDispose); // If the other component is disposed first we need to clean the reference\n              // to the other component in this component's removeOnDispose listener\n              // Otherwise we create a memory leak.\n\n\n              var cleanRemover = function cleanRemover() {\n                return _this2.off('dispose', removeOnDispose);\n              }; // Add the same function ID so we can easily remove it later\n\n\n              cleanRemover.guid = fn.guid; // Check if this is a DOM node\n\n              if (first.nodeName) {\n                // Add the listener to the other element\n                Events.on(target, type, fn);\n                Events.on(target, 'dispose', cleanRemover); // Should be a component\n                // Not using `instanceof Component` because it makes mock players difficult\n              } else if (typeof first.on === 'function') {\n                // Add the listener to the other component\n                target.on(type, fn);\n                target.on('dispose', cleanRemover);\n              }\n            })();\n          }\n\n          return this;\n        };\n        /**\n         * Remove an event listener from this `Component`s element.\n         * ```js\n         *   var player = videojs('some-player-id');\n         *   var Component = videojs.getComponent('Component');\n         *   var myComponent = new Component(player);\n         *   var myFunc = function() {\n         *     var myComponent = this;\n         *     console.log('myFunc called');\n         *   };\n         *   myComponent.on('eventType', myFunc);\n         *   myComponent.trigger('eventType');\n         *   // logs 'myFunc called'\n         *\n         *   myComponent.off('eventType', myFunc);\n         *   myComponent.trigger('eventType');\n         *   // does nothing\n         * ```\n         *\n         * If myFunc gets excluded, ALL listeners for the event type will get removed. If\n         * eventType gets excluded, ALL listeners will get removed from the component.\n         * You can use `off` to remove listeners that get added to other elements or\n         * components using:\n         *\n         *  `myComponent.on(otherComponent...`\n         *\n         * In this case both the event type and listener function are **REQUIRED**.\n         *\n         * ```js\n         *   var otherComponent = new Component(player);\n         *\n         *   // myComponent/myFunc is from the above example\n         *   myComponent.on(otherComponent.el(), 'eventName', myFunc);\n         *   myComponent.on(otherComponent, 'eventName', myFunc);\n         *\n         *   otherComponent.trigger('eventName');\n         *   // logs 'myFunc called' twice\n         *   myComponent.off(ootherComponent.el(), 'eventName', myFunc);\n         *   myComponent.off(otherComponent, 'eventName', myFunc);\n         *   otherComponent.trigger('eventName');\n         *   // does nothing\n         * ```\n         *\n         * @param {string|Component|string[]} [first]\n         *        The event name, and array of event names, or another `Component`.\n         *\n         * @param {EventTarget~EventListener|string|string[]} [second]\n         *        The listener function, an event name, or an Array of events names.\n         *\n         * @param {EventTarget~EventListener} [third]\n         *        The event handler if `first` is a `Component` and `second` is an event name\n         *        or an Array of event names.\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         */\n\n\n        Component.prototype.off = function off(first, second, third) {\n          if (!first || typeof first === 'string' || Array.isArray(first)) {\n            Events.off(this.el_, first, second);\n          } else {\n            var target = first;\n            var type = second; // Ensure there's at least a guid, even if the function hasn't been used\n\n            var fn = Fn.bind(this, third); // Remove the dispose listener on this component,\n            // which was given the same guid as the event listener\n\n            this.off('dispose', fn);\n\n            if (first.nodeName) {\n              // Remove the listener\n              Events.off(target, type, fn); // Remove the listener for cleaning the dispose listener\n\n              Events.off(target, 'dispose', fn);\n            } else {\n              target.off(type, fn);\n              target.off('dispose', fn);\n            }\n          }\n\n          return this;\n        };\n        /**\n         * Add an event listener that gets triggered only once and then gets removed.\n         * ```js\n         *   var player = videojs('some-player-id');\n         *   var Component = videojs.getComponent('Component');\n         *   var myComponent = new Component(player);\n         *   var myFunc = function() {\n         *     var myComponent = this;\n         *     console.log('myFunc called');\n         *   };\n         *   myComponent.one('eventName', myFunc);\n         *   myComponent.trigger('eventName');\n         *   // logs 'myFunc called'\n         *\n         *   myComponent.trigger('eventName');\n         *   // does nothing\n         *\n         * ```\n         *\n         * You can also add a listener to another element or component that will get\n         * triggered only once.\n         * ```js\n         *   var otherComponent = new Component(player);\n         *\n         *   // myComponent/myFunc is from the above example\n         *   myComponent.one(otherComponent.el(), 'eventName', myFunc);\n         *   myComponent.one(otherComponent, 'eventName', myFunc);\n         *\n         *   otherComponent.trigger('eventName');\n         *   // logs 'myFunc called' twice\n         *\n         *   otherComponent.trigger('eventName');\n         *   // does nothing\n         * ```\n         *\n         * @param {string|Component|string[]} [first]\n         *        The event name, and array of event names, or another `Component`.\n         *\n         * @param {EventTarget~EventListener|string|string[]} [second]\n         *        The listener function, an event name, or an Array of events names.\n         *\n         * @param {EventTarget~EventListener} [third]\n         *        The event handler if `first` is a `Component` and `second` is an event name\n         *        or an Array of event names.\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         */\n\n\n        Component.prototype.one = function one(first, second, third) {\n          var _this3 = this,\n              _arguments = arguments;\n\n          if (typeof first === 'string' || Array.isArray(first)) {\n            Events.one(this.el_, first, Fn.bind(this, second));\n          } else {\n            (function () {\n              var target = first;\n              var type = second;\n              var fn = Fn.bind(_this3, third);\n\n              var newFunc = function newFunc() {\n                _this3.off(target, type, newFunc);\n\n                fn.apply(null, _arguments);\n              }; // Keep the same function ID so we can remove it later\n\n\n              newFunc.guid = fn.guid;\n\n              _this3.on(target, type, newFunc);\n            })();\n          }\n\n          return this;\n        };\n        /**\n         * Trigger an event on an element.\n         *\n         * ```js\n         *   var player = videojs('some-player-id');\n         *   var Component = videojs.getComponent('Component');\n         *   var myComponent = new Component(player);\n         *   var myFunc = function(data) {\n         *     var myComponent = this;\n         *     console.log('myFunc called');\n         *     console.log(data);\n         *   };\n         *   myComponent.one('eventName', myFunc);\n         *   myComponent.trigger('eventName');\n         *   // logs 'myFunc called' and 'undefined'\n         *\n         *   myComponent.trigger({'type':'eventName'});\n         *   // logs 'myFunc called' and 'undefined'\n         *\n         *   myComponent.trigger('eventName', {data: 'some data'});\n         *   // logs 'myFunc called' and \"{data: 'some data'}\"\n         *\n         *   myComponent.trigger({'type':'eventName'}, {data: 'some data'});\n         *   // logs 'myFunc called' and \"{data: 'some data'}\"\n         * ```\n         *\n         * @param {EventTarget~Event|Object|string} event\n         *        The event name, and Event, or an event-like object with a type attribute\n         *        set to the event name.\n         *\n         * @param {Object} [hash]\n         *        Data hash to pass along with the event\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         */\n\n\n        Component.prototype.trigger = function trigger(event, hash) {\n          Events.trigger(this.el_, event, hash);\n          return this;\n        };\n        /**\n         * Bind a listener to the component's ready state. If the ready event has already\n         * happened it will trigger the function immediately.\n         *\n         * @param  {Component~ReadyCallback} fn\n         *         A function to call when ready is triggered.\n         *\n         * @param  {boolean} [sync=false]\n         *         Execute the listener synchronously if `Component` is ready.\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         */\n\n\n        Component.prototype.ready = function ready(fn) {\n          var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n          if (fn) {\n            if (this.isReady_) {\n              if (sync) {\n                fn.call(this);\n              } else {\n                // Call the function asynchronously by default for consistency\n                this.setTimeout(fn, 1);\n              }\n            } else {\n              this.readyQueue_ = this.readyQueue_ || [];\n              this.readyQueue_.push(fn);\n            }\n          }\n\n          return this;\n        };\n        /**\n         * Trigger all the ready listeners for this `Component`.\n         *\n         * @fires Component#ready\n         */\n\n\n        Component.prototype.triggerReady = function triggerReady() {\n          this.isReady_ = true; // Ensure ready is triggerd asynchronously\n\n          this.setTimeout(function () {\n            var readyQueue = this.readyQueue_; // Reset Ready Queue\n\n            this.readyQueue_ = [];\n\n            if (readyQueue && readyQueue.length > 0) {\n              readyQueue.forEach(function (fn) {\n                fn.call(this);\n              }, this);\n            } // Allow for using event listeners also\n\n            /**\n             * Triggered when a `Component` is ready.\n             *\n             * @event Component#ready\n             * @type {EventTarget~Event}\n             */\n\n\n            this.trigger('ready');\n          }, 1);\n        };\n        /**\n         * Find a single DOM element matching a `selector`. This can be within the `Component`s\n         * `contentEl()` or another custom context.\n         *\n         * @param {string} selector\n         *        A valid CSS selector, which will be passed to `querySelector`.\n         *\n         * @param {Element|string} [context=this.contentEl()]\n         *        A DOM element within which to query. Can also be a selector string in\n         *        which case the first matching element will get used as context. If\n         *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n         *        nothing it falls back to `document`.\n         *\n         * @return {Element|null}\n         *         the dom element that was found, or null\n         *\n         * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n         */\n\n\n        Component.prototype.$ = function $(selector, context) {\n          return Dom.$(selector, context || this.contentEl());\n        };\n        /**\n         * Finds all DOM element matching a `selector`. This can be within the `Component`s\n         * `contentEl()` or another custom context.\n         *\n         * @param {string} selector\n         *        A valid CSS selector, which will be passed to `querySelectorAll`.\n         *\n         * @param {Element|string} [context=this.contentEl()]\n         *        A DOM element within which to query. Can also be a selector string in\n         *        which case the first matching element will get used as context. If\n         *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n         *        nothing it falls back to `document`.\n         *\n         * @return {NodeList}\n         *         a list of dom elements that were found\n         *\n         * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n         */\n\n\n        Component.prototype.$$ = function $$(selector, context) {\n          return Dom.$$(selector, context || this.contentEl());\n        };\n        /**\n         * Check if a component's element has a CSS class name.\n         *\n         * @param {string} classToCheck\n         *        CSS class name to check.\n         *\n         * @return {boolean}\n         *         - True if the `Component` has the class.\n         *         - False if the `Component` does not have the class`\n         */\n\n\n        Component.prototype.hasClass = function hasClass(classToCheck) {\n          return Dom.hasElClass(this.el_, classToCheck);\n        };\n        /**\n         * Add a CSS class name to the `Component`s element.\n         *\n         * @param {string} classToAdd\n         *        CSS class name to add\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         */\n\n\n        Component.prototype.addClass = function addClass(classToAdd) {\n          Dom.addElClass(this.el_, classToAdd);\n          return this;\n        };\n        /**\n         * Remove a CSS class name from the `Component`s element.\n         *\n         * @param {string} classToRemove\n         *        CSS class name to remove\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         */\n\n\n        Component.prototype.removeClass = function removeClass(classToRemove) {\n          Dom.removeElClass(this.el_, classToRemove);\n          return this;\n        };\n        /**\n         * Add or remove a CSS class name from the component's element.\n         * - `classToToggle` gets added when {@link Component#hasClass} would return false.\n         * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\n         *\n         * @param  {string} classToToggle\n         *         The class to add or remove based on (@link Component#hasClass}\n         *\n         * @param  {boolean|Dom~predicate} [predicate]\n         *         An {@link Dom~predicate} function or a boolean\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         */\n\n\n        Component.prototype.toggleClass = function toggleClass(classToToggle, predicate) {\n          Dom.toggleElClass(this.el_, classToToggle, predicate);\n          return this;\n        };\n        /**\n         * Show the `Component`s element if it is hidden by removing the\n         * 'vjs-hidden' class name from it.\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         */\n\n\n        Component.prototype.show = function show() {\n          this.removeClass('vjs-hidden');\n          return this;\n        };\n        /**\n         * Hide the `Component`s element if it is currently showing by adding the\n         * 'vjs-hidden` class name to it.\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         */\n\n\n        Component.prototype.hide = function hide() {\n          this.addClass('vjs-hidden');\n          return this;\n        };\n        /**\n         * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\n         * class name to it. Used during fadeIn/fadeOut.\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         *\n         * @private\n         */\n\n\n        Component.prototype.lockShowing = function lockShowing() {\n          this.addClass('vjs-lock-showing');\n          return this;\n        };\n        /**\n         * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\n         * class name from it. Used during fadeIn/fadeOut.\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         *\n         * @private\n         */\n\n\n        Component.prototype.unlockShowing = function unlockShowing() {\n          this.removeClass('vjs-lock-showing');\n          return this;\n        };\n        /**\n         * Get the value of an attribute on the `Component`s element.\n         *\n         * @param {string} attribute\n         *        Name of the attribute to get the value from.\n         *\n         * @return {string|null}\n         *         - The value of the attribute that was asked for.\n         *         - Can be an empty string on some browsers if the attribute does not exist\n         *           or has no value\n         *         - Most browsers will return null if the attibute does not exist or has\n         *           no value.\n         *\n         * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\n         */\n\n\n        Component.prototype.getAttribute = function getAttribute(attribute) {\n          return Dom.getAttribute(this.el_, attribute);\n        };\n        /**\n         * Set the value of an attribute on the `Component`'s element\n         *\n         * @param {string} attribute\n         *        Name of the attribute to set.\n         *\n         * @param {string} value\n         *        Value to set the attribute to.\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         *\n         * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\n         */\n\n\n        Component.prototype.setAttribute = function setAttribute(attribute, value) {\n          Dom.setAttribute(this.el_, attribute, value);\n          return this;\n        };\n        /**\n         * Remove an attribute from the `Component`s element.\n         *\n         * @param {string} attribute\n         *        Name of the attribute to remove.\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         *\n         * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\n         */\n\n\n        Component.prototype.removeAttribute = function removeAttribute(attribute) {\n          Dom.removeAttribute(this.el_, attribute);\n          return this;\n        };\n        /**\n         * Get or set the width of the component based upon the CSS styles.\n         * See {@link Component#dimension} for more detailed information.\n         *\n         * @param {number|string} [num]\n         *        The width that you want to set postfixed with '%', 'px' or nothing.\n         *\n         * @param {boolean} [skipListeners]\n         *        Skip the resize event trigger\n         *\n         * @return {Component|number|string}\n         *         - The width when getting, zero if there is no width. Can be a string\n         *           postpixed with '%' or 'px'.\n         *         - Returns itself when setting; method can be chained.\n         */\n\n\n        Component.prototype.width = function width(num, skipListeners) {\n          return this.dimension('width', num, skipListeners);\n        };\n        /**\n         * Get or set the height of the component based upon the CSS styles.\n         * See {@link Component#dimension} for more detailed information.\n         *\n         * @param {number|string} [num]\n         *        The height that you want to set postfixed with '%', 'px' or nothing.\n         *\n         * @param {boolean} [skipListeners]\n         *        Skip the resize event trigger\n         *\n         * @return {Component|number|string}\n         *         - The width when getting, zero if there is no width. Can be a string\n         *           postpixed with '%' or 'px'.\n         *         - Returns itself when setting; method can be chained.\n         */\n\n\n        Component.prototype.height = function height(num, skipListeners) {\n          return this.dimension('height', num, skipListeners);\n        };\n        /**\n         * Set both the width and height of the `Component` element at the same time.\n         *\n         * @param  {number|string} width\n         *         Width to set the `Component`s element to.\n         *\n         * @param  {number|string} height\n         *         Height to set the `Component`s element to.\n         *\n         * @return {Component}\n         *         Returns itself; method can be chained.\n         */\n\n\n        Component.prototype.dimensions = function dimensions(width, height) {\n          // Skip resize listeners on width for optimization\n          return this.width(width, true).height(height);\n        };\n        /**\n         * Get or set width or height of the `Component` element. This is the shared code\n         * for the {@link Component#width} and {@link Component#height}.\n         *\n         * Things to know:\n         * - If the width or height in an number this will return the number postfixed with 'px'.\n         * - If the width/height is a percent this will return the percent postfixed with '%'\n         * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\n         *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\n         *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\n         *   for more information\n         * - If you want the computed style of the component, use {@link Component#currentWidth}\n         *   and {@link {Component#currentHeight}\n         *\n         * @fires Component#resize\n         *\n         * @param {string} widthOrHeight\n         8        'width' or 'height'\n         *\n         * @param  {number|string} [num]\n         8         New dimension\n         *\n         * @param  {boolean} [skipListeners]\n         *         Skip resize event trigger\n         *\n         * @return {Component}\n         *         - the dimension when getting or 0 if unset\n         *         - Returns itself when setting; method can be chained.\n         */\n\n\n        Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {\n          if (num !== undefined) {\n            // Set to zero if null or literally NaN (NaN !== NaN)\n            if (num === null || num !== num) {\n              num = 0;\n            } // Check if using css width/height (% or px) and adjust\n\n\n            if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\n              this.el_.style[widthOrHeight] = num;\n            } else if (num === 'auto') {\n              this.el_.style[widthOrHeight] = '';\n            } else {\n              this.el_.style[widthOrHeight] = num + 'px';\n            } // skipListeners allows us to avoid triggering the resize event when setting both width and height\n\n\n            if (!skipListeners) {\n              /**\n               * Triggered when a component is resized.\n               *\n               * @event Component#resize\n               * @type {EventTarget~Event}\n               */\n              this.trigger('resize');\n            } // Return component\n\n\n            return this;\n          } // Not setting a value, so getting it\n          // Make sure element exists\n\n\n          if (!this.el_) {\n            return 0;\n          } // Get dimension value from style\n\n\n          var val = this.el_.style[widthOrHeight];\n          var pxIndex = val.indexOf('px');\n\n          if (pxIndex !== -1) {\n            // Return the pixel value with no 'px'\n            return parseInt(val.slice(0, pxIndex), 10);\n          } // No px so using % or no style was set, so falling back to offsetWidth/height\n          // If component has display:none, offset will return 0\n          // TODO: handle display:none and no dimension style using px\n\n\n          return parseInt(this.el_['offset' + (0, _toTitleCase2['default'])(widthOrHeight)], 10);\n        };\n        /**\n         * Get the width or the height of the `Component` elements computed style. Uses\n         * `window.getComputedStyle`.\n         *\n         * @param {string} widthOrHeight\n         *        A string containing 'width' or 'height'. Whichever one you want to get.\n         *\n         * @return {number}\n         *         The dimension that gets asked for or 0 if nothing was set\n         *         for that dimension.\n         */\n\n\n        Component.prototype.currentDimension = function currentDimension(widthOrHeight) {\n          var computedWidthOrHeight = 0;\n\n          if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\n            throw new Error('currentDimension only accepts width or height value');\n          }\n\n          if (typeof _window2['default'].getComputedStyle === 'function') {\n            var computedStyle = _window2['default'].getComputedStyle(this.el_);\n\n            computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];\n          } // remove 'px' from variable and parse as integer\n\n\n          computedWidthOrHeight = parseFloat(computedWidthOrHeight); // if the computed value is still 0, it's possible that the browser is lying\n          // and we want to check the offset values.\n          // This code also runs on IE8 and wherever getComputedStyle doesn't exist.\n\n          if (computedWidthOrHeight === 0) {\n            var rule = 'offset' + (0, _toTitleCase2['default'])(widthOrHeight);\n            computedWidthOrHeight = this.el_[rule];\n          }\n\n          return computedWidthOrHeight;\n        };\n        /**\n         * An object that contains width and height values of the `Component`s\n         * computed style. Uses `window.getComputedStyle`.\n         *\n         * @typedef {Object} Component~DimensionObject\n         *\n         * @property {number} width\n         *           The width of the `Component`s computed style.\n         *\n         * @property {number} height\n         *           The height of the `Component`s computed style.\n         */\n\n        /**\n         * Get an object that contains width and height values of the `Component`s\n         * computed style.\n         *\n         * @return {Component~DimensionObject}\n         *         The dimensions of the components element\n         */\n\n\n        Component.prototype.currentDimensions = function currentDimensions() {\n          return {\n            width: this.currentDimension('width'),\n            height: this.currentDimension('height')\n          };\n        };\n        /**\n         * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.\n         *\n         * @return {number} width\n         *           The width of the `Component`s computed style.\n         */\n\n\n        Component.prototype.currentWidth = function currentWidth() {\n          return this.currentDimension('width');\n        };\n        /**\n         * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.\n         *\n         * @return {number} height\n         *           The height of the `Component`s computed style.\n         */\n\n\n        Component.prototype.currentHeight = function currentHeight() {\n          return this.currentDimension('height');\n        };\n        /**\n         * Emit a 'tap' events when touch event support gets detected. This gets used to\n         * support toggling the controls through a tap on the video. They get enabled\n         * because every sub-component would have extra overhead otherwise.\n         *\n         * @private\n         * @fires Component#tap\n         * @listens Component#touchstart\n         * @listens Component#touchmove\n         * @listens Component#touchleave\n         * @listens Component#touchcancel\n         * @listens Component#touchend\n          */\n\n\n        Component.prototype.emitTapEvents = function emitTapEvents() {\n          // Track the start time so we can determine how long the touch lasted\n          var touchStart = 0;\n          var firstTouch = null; // Maximum movement allowed during a touch event to still be considered a tap\n          // Other popular libs use anywhere from 2 (hammer.js) to 15,\n          // so 10 seems like a nice, round number.\n\n          var tapMovementThreshold = 10; // The maximum length a touch can be while still being considered a tap\n\n          var touchTimeThreshold = 200;\n          var couldBeTap = void 0;\n          this.on('touchstart', function (event) {\n            // If more than one finger, don't consider treating this as a click\n            if (event.touches.length === 1) {\n              // Copy pageX/pageY from the object\n              firstTouch = {\n                pageX: event.touches[0].pageX,\n                pageY: event.touches[0].pageY\n              }; // Record start time so we can detect a tap vs. \"touch and hold\"\n\n              touchStart = new Date().getTime(); // Reset couldBeTap tracking\n\n              couldBeTap = true;\n            }\n          });\n          this.on('touchmove', function (event) {\n            // If more than one finger, don't consider treating this as a click\n            if (event.touches.length > 1) {\n              couldBeTap = false;\n            } else if (firstTouch) {\n              // Some devices will throw touchmoves for all but the slightest of taps.\n              // So, if we moved only a small distance, this could still be a tap\n              var xdiff = event.touches[0].pageX - firstTouch.pageX;\n              var ydiff = event.touches[0].pageY - firstTouch.pageY;\n              var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n\n              if (touchDistance > tapMovementThreshold) {\n                couldBeTap = false;\n              }\n            }\n          });\n\n          var noTap = function noTap() {\n            couldBeTap = false;\n          }; // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\n\n\n          this.on('touchleave', noTap);\n          this.on('touchcancel', noTap); // When the touch ends, measure how long it took and trigger the appropriate\n          // event\n\n          this.on('touchend', function (event) {\n            firstTouch = null; // Proceed only if the touchmove/leave/cancel event didn't happen\n\n            if (couldBeTap === true) {\n              // Measure how long the touch lasted\n              var touchTime = new Date().getTime() - touchStart; // Make sure the touch was less than the threshold to be considered a tap\n\n              if (touchTime < touchTimeThreshold) {\n                // Don't let browser turn this into a click\n                event.preventDefault();\n                /**\n                 * Triggered when a `Component` is tapped.\n                 *\n                 * @event Component#tap\n                 * @type {EventTarget~Event}\n                 */\n\n                this.trigger('tap'); // It may be good to copy the touchend event object and change the\n                // type to tap, if the other event properties aren't exact after\n                // Events.fixEvent runs (e.g. event.target)\n              }\n            }\n          });\n        };\n        /**\n         * This function reports user activity whenever touch events happen. This can get\n         * turned off by any sub-components that wants touch events to act another way.\n         *\n         * Report user touch activity when touch events occur. User activity gets used to\n         * determine when controls should show/hide. It is simple when it comes to mouse\n         * events, because any mouse event should show the controls. So we capture mouse\n         * events that bubble up to the player and report activity when that happens.\n         * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\n         * controls. So touch events can't help us at the player level either.\n         *\n         * User activity gets checked asynchronously. So what could happen is a tap event\n         * on the video turns the controls off. Then the `touchend` event bubbles up to\n         * the player. Which, if it reported user activity, would turn the controls right\n         * back on. We also don't want to completely block touch events from bubbling up.\n         * Furthermore a `touchmove` event and anything other than a tap, should not turn\n         * controls back on.\n         *\n         * @listens Component#touchstart\n         * @listens Component#touchmove\n         * @listens Component#touchend\n         * @listens Component#touchcancel\n         */\n\n\n        Component.prototype.enableTouchActivity = function enableTouchActivity() {\n          // Don't continue if the root player doesn't support reporting user activity\n          if (!this.player() || !this.player().reportUserActivity) {\n            return;\n          } // listener for reporting that the user is active\n\n\n          var report = Fn.bind(this.player(), this.player().reportUserActivity);\n          var touchHolding = void 0;\n          this.on('touchstart', function () {\n            report(); // For as long as the they are touching the device or have their mouse down,\n            // we consider them active even if they're not moving their finger or mouse.\n            // So we want to continue to update that they are active\n\n            this.clearInterval(touchHolding); // report at the same interval as activityCheck\n\n            touchHolding = this.setInterval(report, 250);\n          });\n\n          var touchEnd = function touchEnd(event) {\n            report(); // stop the interval that maintains activity if the touch is holding\n\n            this.clearInterval(touchHolding);\n          };\n\n          this.on('touchmove', report);\n          this.on('touchend', touchEnd);\n          this.on('touchcancel', touchEnd);\n        };\n        /**\n         * A callback that has no parameters and is bound into `Component`s context.\n         *\n         * @callback Component~GenericCallback\n         * @this Component\n         */\n\n        /**\n         * Creates a function that runs after an `x` millisecond timeout. This function is a\n         * wrapper around `window.setTimeout`. There are a few reasons to use this one\n         * instead though:\n         * 1. It gets cleared via  {@link Component#clearTimeout} when\n         *    {@link Component#dispose} gets called.\n         * 2. The function callback will gets turned into a {@link Component~GenericCallback}\n         *\n         * > Note: You can use `window.clearTimeout` on the id returned by this function. This\n         *         will cause its dispose listener not to get cleaned up! Please use\n         *         {@link Component#clearTimeout} or {@link Component#dispose}.\n         *\n         * @param {Component~GenericCallback} fn\n         *        The function that will be run after `timeout`.\n         *\n         * @param {number} timeout\n         *        Timeout in milliseconds to delay before executing the specified function.\n         *\n         * @return {number}\n         *         Returns a timeout ID that gets used to identify the timeout. It can also\n         *         get used in {@link Component#clearTimeout} to clear the timeout that\n         *         was set.\n         *\n         * @listens Component#dispose\n         * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\n         */\n\n\n        Component.prototype.setTimeout = function setTimeout(fn, timeout) {\n          fn = Fn.bind(this, fn);\n\n          var timeoutId = _window2['default'].setTimeout(fn, timeout);\n\n          var disposeFn = function disposeFn() {\n            this.clearTimeout(timeoutId);\n          };\n\n          disposeFn.guid = 'vjs-timeout-' + timeoutId;\n          this.on('dispose', disposeFn);\n          return timeoutId;\n        };\n        /**\n         * Clears a timeout that gets created via `window.setTimeout` or\n         * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\n         * use this function instead of `window.clearTimout`. If you don't your dispose\n         * listener will not get cleaned up until {@link Component#dispose}!\n         *\n         * @param {number} timeoutId\n         *        The id of the timeout to clear. The return value of\n         *        {@link Component#setTimeout} or `window.setTimeout`.\n         *\n         * @return {number}\n         *         Returns the timeout id that was cleared.\n         *\n         * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\n         */\n\n\n        Component.prototype.clearTimeout = function clearTimeout(timeoutId) {\n          _window2['default'].clearTimeout(timeoutId);\n\n          var disposeFn = function disposeFn() {};\n\n          disposeFn.guid = 'vjs-timeout-' + timeoutId;\n          this.off('dispose', disposeFn);\n          return timeoutId;\n        };\n        /**\n         * Creates a function that gets run every `x` milliseconds. This function is a wrapper\n         * around `window.setInterval`. There are a few reasons to use this one instead though.\n         * 1. It gets cleared via  {@link Component#clearInterval} when\n         *    {@link Component#dispose} gets called.\n         * 2. The function callback will be a {@link Component~GenericCallback}\n         *\n         * @param {Component~GenericCallback} fn\n         *        The function to run every `x` seconds.\n         *\n         * @param {number} interval\n         *        Execute the specified function every `x` milliseconds.\n         *\n         * @return {number}\n         *         Returns an id that can be used to identify the interval. It can also be be used in\n         *         {@link Component#clearInterval} to clear the interval.\n         *\n         * @listens Component#dispose\n         * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\n         */\n\n\n        Component.prototype.setInterval = function setInterval(fn, interval) {\n          fn = Fn.bind(this, fn);\n\n          var intervalId = _window2['default'].setInterval(fn, interval);\n\n          var disposeFn = function disposeFn() {\n            this.clearInterval(intervalId);\n          };\n\n          disposeFn.guid = 'vjs-interval-' + intervalId;\n          this.on('dispose', disposeFn);\n          return intervalId;\n        };\n        /**\n         * Clears an interval that gets created via `window.setInterval` or\n         * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}\n         * use this function instead of `window.clearInterval`. If you don't your dispose\n         * listener will not get cleaned up until {@link Component#dispose}!\n         *\n         * @param {number} intervalId\n         *        The id of the interval to clear. The return value of\n         *        {@link Component#setInterval} or `window.setInterval`.\n         *\n         * @return {number}\n         *         Returns the interval id that was cleared.\n         *\n         * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\n         */\n\n\n        Component.prototype.clearInterval = function clearInterval(intervalId) {\n          _window2['default'].clearInterval(intervalId);\n\n          var disposeFn = function disposeFn() {};\n\n          disposeFn.guid = 'vjs-interval-' + intervalId;\n          this.off('dispose', disposeFn);\n          return intervalId;\n        };\n        /**\n         * Register a `Component` with `videojs` given the name and the component.\n         *\n         * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\n         *         should be registered using {@link Tech.registerTech} or\n         *         {@link videojs:videojs.registerTech}.\n         *\n         * > NOTE: This function can also be seen on videojs as\n         *         {@link videojs:videojs.registerComponent}.\n         *\n         * @param {string} name\n         *        The name of the `Component` to register.\n         *\n         * @param {Component} comp\n         *        The `Component` class to register.\n         *\n         * @return {Component}\n         *         The `Component` that was registered.\n         */\n\n\n        Component.registerComponent = function registerComponent(name, comp) {\n          if (!name) {\n            return;\n          }\n\n          name = (0, _toTitleCase2['default'])(name);\n\n          if (!Component.components_) {\n            Component.components_ = {};\n          }\n\n          if (name === 'Player' && Component.components_[name]) {\n            (function () {\n              var Player = Component.components_[name]; // If we have players that were disposed, then their name will still be\n              // in Players.players. So, we must loop through and verify that the value\n              // for each item is not null. This allows registration of the Player component\n              // after all players have been disposed or before any were created.\n\n              if (Player.players && Object.keys(Player.players).length > 0 && Object.keys(Player.players).map(function (playerName) {\n                return Player.players[playerName];\n              }).every(Boolean)) {\n                throw new Error('Can not register Player component after player has been created');\n              }\n            })();\n          }\n\n          Component.components_[name] = comp;\n          return comp;\n        };\n        /**\n         * Get a `Component` based on the name it was registered with.\n         *\n         * @param {string} name\n         *        The Name of the component to get.\n         *\n         * @return {Component}\n         *         The `Component` that got registered under the given name.\n         *\n         * @deprecated In `videojs` 6 this will not return `Component`s that were not\n         *             registered using {@link Component.registerComponent}. Currently we\n         *             check the global `videojs` object for a `Component` name and\n         *             return that if it exists.\n         */\n\n\n        Component.getComponent = function getComponent(name) {\n          if (!name) {\n            return;\n          }\n\n          name = (0, _toTitleCase2['default'])(name);\n\n          if (Component.components_ && Component.components_[name]) {\n            return Component.components_[name];\n          }\n\n          if (_window2['default'] && _window2['default'].videojs && _window2['default'].videojs[name]) {\n            _log2['default'].warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');\n\n            return _window2['default'].videojs[name];\n          }\n        };\n        /**\n         * Sets up the constructor using the supplied init method or uses the init of the\n         * parent object.\n         *\n         * @param {Object} [props={}]\n         *        An object of properties.\n         *\n         * @return {Object}\n         *         the extended object.\n         *\n         * @deprecated since version 5\n         */\n\n\n        Component.extend = function extend(props) {\n          props = props || {};\n\n          _log2['default'].warn('Component.extend({}) has been deprecated, ' + ' use videojs.extend(Component, {}) instead'); // Set up the constructor using the supplied init method\n          // or using the init of the parent object\n          // Make sure to check the unobfuscated version for external libs\n\n\n          var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {}; // In Resig's simple class inheritance (previously used) the constructor\n          //  is a function that calls `this.init.apply(arguments)`\n          // However that would prevent us from using `ParentObject.call(this);`\n          //  in a Child constructor because the `this` in `this.init`\n          //  would still refer to the Child and cause an infinite loop.\n          // We would instead have to do\n          //    `ParentObject.prototype.init.apply(this, arguments);`\n          //  Bleh. We're not creating a _super() function, so it's good to keep\n          //  the parent constructor reference simple.\n\n\n          var subObj = function subObj() {\n            init.apply(this, arguments);\n          }; // Inherit from this object's prototype\n\n\n          subObj.prototype = Object.create(this.prototype); // Reset the constructor property for subObj otherwise\n          // instances of subObj would have the constructor of the parent Object\n\n          subObj.prototype.constructor = subObj; // Make the class extendable\n\n          subObj.extend = Component.extend; // Extend subObj's prototype with functions and other properties from props\n\n          for (var name in props) {\n            if (props.hasOwnProperty(name)) {\n              subObj.prototype[name] = props[name];\n            }\n          }\n\n          return subObj;\n        };\n\n        return Component;\n      }();\n\n      Component.registerComponent('Component', Component);\n      exports['default'] = Component;\n      /***/\n    },\n    /* 17 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.throttle = exports.bind = undefined;\n\n      var _guid = __webpack_require__(10);\n      /**\n       * Bind (a.k.a proxy or Context). A simple method for changing the context of a function\n       * It also stores a unique id on the function so it can be easily removed from events.\n       *\n       * @param {Mixed} context\n       *        The object to bind as scope.\n       *\n       * @param {Function} fn\n       *        The function to be bound to a scope.\n       *\n       * @param {number} [uid]\n       *        An optional unique ID for the function to be set\n       *\n       * @return {Function}\n       *         The new function that will be bound into the context given\n       */\n\n\n      var bind = exports.bind = function bind(context, fn, uid) {\n        // Make sure the function has a unique ID\n        if (!fn.guid) {\n          fn.guid = (0, _guid.newGUID)();\n        } // Create the new function that changes the context\n\n\n        var bound = function bound() {\n          return fn.apply(context, arguments);\n        }; // Allow for the ability to individualize this function\n        // Needed in the case where multiple objects might share the same prototype\n        // IF both items add an event listener with the same function, then you try to remove just one\n        // it will remove both because they both have the same guid.\n        // when using this, you need to use the bind method when you remove the listener as well.\n        // currently used in text tracks\n\n\n        bound.guid = uid ? uid + '_' + fn.guid : fn.guid;\n        return bound;\n      };\n      /**\n       * Wraps the given function, `fn`, with a new function that only invokes `fn`\n       * at most once per every `wait` milliseconds.\n       *\n       * @param  {Function} fn\n       *         The function to be throttled.\n       *\n       * @param  {Number}   wait\n       *         The number of milliseconds by which to throttle.\n       *\n       * @return {Function}\n       */\n\n      /**\n       * @file fn.js\n       * @module fn\n       */\n\n\n      var throttle = exports.throttle = function throttle(fn, wait) {\n        var last = Date.now();\n\n        var throttled = function throttled() {\n          var now = Date.now();\n\n          if (now - last >= wait) {\n            fn.apply(undefined, arguments);\n            last = now;\n          }\n        };\n\n        return throttled;\n      };\n      /***/\n\n    },\n    /* 18 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      /**\n       * @file to-title-case.js\n       * @module to-title-case\n       */\n\n      /**\n       * Uppercase the first letter of a string.\n       *\n       * @param {string} string\n       *        String to be uppercased\n       *\n       * @return {string}\n       *         The string with an uppercased first letter\n       */\n\n      function toTitleCase(string) {\n        if (typeof string !== 'string') {\n          return string;\n        }\n\n        return string.charAt(0).toUpperCase() + string.slice(1);\n      }\n\n      exports['default'] = toTitleCase;\n      /***/\n    },\n    /* 19 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports['default'] = mergeOptions;\n\n      var _obj = __webpack_require__(13);\n      /**\n       * Deep-merge one or more options objects, recursively merging **only** plain\n       * object properties.\n       *\n       * @param   {Object[]} sources\n       *          One or more objects to merge into a new object.\n       *\n       * @returns {Object}\n       *          A new object that is the merged result of all sources.\n       */\n\n\n      function mergeOptions() {\n        var result = {};\n\n        for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n          sources[_key] = arguments[_key];\n        }\n\n        sources.forEach(function (source) {\n          if (!source) {\n            return;\n          }\n\n          (0, _obj.each)(source, function (value, key) {\n            if (!(0, _obj.isPlain)(value)) {\n              result[key] = value;\n              return;\n            }\n\n            if (!(0, _obj.isPlain)(result[key])) {\n              result[key] = {};\n            }\n\n            result[key] = mergeOptions(result[key], value);\n          });\n        });\n        return result;\n      }\n      /**\n       * @file merge-options.js\n       * @module merge-options\n       */\n\n      /***/\n\n    },\n    /* 20 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _events = __webpack_require__(8);\n\n      var Events = _interopRequireWildcard(_events);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n      /**\n       * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It\n       * adds shorthand functions that wrap around lengthy functions. For example:\n       * the `on` function is a wrapper around `addEventListener`.\n       *\n       * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}\n       * @class EventTarget\n       */\n\n\n      var EventTarget = function EventTarget() {};\n      /**\n       * A Custom DOM event.\n       *\n       * @typedef {Object} EventTarget~Event\n       * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}\n       */\n\n      /**\n       * All event listeners should follow the following format.\n       *\n       * @callback EventTarget~EventListener\n       * @this {EventTarget}\n       *\n       * @param {EventTarget~Event} event\n       *        the event that triggered this function\n       *\n       * @param {Object} [hash]\n       *        hash of data sent during the event\n       */\n\n      /**\n       * An object containing event names as keys and booleans as values.\n       *\n       * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}\n       *         will have extra functionality. See that function for more information.\n       *\n       * @property EventTarget.prototype.allowedEvents_\n       * @private\n       */\n\n      /**\n       * @file src/js/event-target.js\n       */\n\n\n      EventTarget.prototype.allowedEvents_ = {};\n      /**\n       * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a\n       * function that will get called when an event with a certain name gets triggered.\n       *\n       * ```js\n       *   var foo = new EventTarget();\n       *   var handleBar = function() {\n       *     console.log('bar was triggered');\n       *   };\n       *\n       *   foo.on('bar', handleBar);\n       *\n       *   // This causes any `event listeners` for the `bar` event to get called\n       *   // see {@link EventTarget#trigger} for more information\n       *   foo.trigger('bar');\n       *   // logs 'bar was triggered'\n       * ```\n       *\n       * @param {string|string[]} type\n       *        An event name or an array of event names.\n       *\n       * @param {EventTarget~EventListener} fn\n       *        The function to call with `EventTarget`s\n       */\n\n      EventTarget.prototype.on = function (type, fn) {\n        // Remove the addEventListener alias before calling Events.on\n        // so we don't get into an infinite type loop\n        var ael = this.addEventListener;\n\n        this.addEventListener = function () {};\n\n        Events.on(this, type, fn);\n        this.addEventListener = ael;\n      };\n      /**\n       * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic\n       * the standard DOM API.\n       *\n       * @function\n       * @see {@link EventTarget#on}\n       */\n\n\n      EventTarget.prototype.addEventListener = EventTarget.prototype.on;\n      /**\n       * Removes an `event listener` for a specific event from an instance of `EventTarget`.\n       * This makes it so that the `event listener` will no longer get called when the\n       * named event happens.\n       *\n       * ```js\n       *   var foo = new EventTarget();\n       *   var handleBar = function() {\n       *     console.log('bar was triggered');\n       *   };\n       *\n       *   // adds an `event listener` for the `bar` event\n       *   // see {@link EventTarget#on} for more info\n       *   foo.on('bar', handleBar);\n       *\n       *   // runs all `event listeners` for the `bar` event\n       *   // see {@link EventTarget#trigger} for more info\n       *   foo.trigger('bar');\n       *   // logs 'bar was triggered'\n       *\n       *   foo.off('bar', handleBar);\n       *   foo.trigger('bar');\n       *   // does nothing\n       * ```\n       *\n       * @param {string|string[]} type\n       *        An event name or an array of event names.\n       *\n       * @param {EventTarget~EventListener} fn\n       *        The function to remove.\n       */\n\n      EventTarget.prototype.off = function (type, fn) {\n        Events.off(this, type, fn);\n      };\n      /**\n       * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic\n       * the standard DOM API.\n       *\n       * @function\n       * @see {@link EventTarget#off}\n       */\n\n\n      EventTarget.prototype.removeEventListener = EventTarget.prototype.off;\n      /**\n       * This function will add an `event listener` that gets triggered only once. After the\n       * first trigger it will get removed. This is like adding an `event listener`\n       * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.\n       *\n       * Using {@link EventTarget#on} and {@link EventTarget#off} to mimic {@link EventTarget#one}\n       * ```js\n       *   var foo = new EventTarget();\n       *   var handleBar = function() {\n       *     console.log('bar was triggered');\n       *     // after the first trigger remove this handler\n       *     foo.off('bar', handleBar);\n       *   };\n       *\n       *   foo.on('bar', handleBar);\n       *   foo.trigger('bar');\n       *   // logs 'bar was triggered'\n       *\n       *   foo.trigger('bar');\n       *   // does nothing\n       * ```\n       *\n       * Using {@link EventTarget#one}\n       * ```js\n       *   var foo = new EventTarget();\n       *   var handleBar = function() {\n       *     console.log('bar was triggered');\n       *   };\n       *\n       *   // removed after the first trigger\n       *   foo.one('bar', handleBar);\n       *   foo.trigger('bar');\n       *   // logs 'bar was triggered'\n       *\n       *   foo.trigger('bar');\n       *   // does nothing\n       * ```\n       *\n       * @param {string|string[]} type\n       *        An event name or an array of event names.\n       *\n       * @param {EventTarget~EventListener} fn\n       *        The function to be called once for each event name.\n       */\n\n      EventTarget.prototype.one = function (type, fn) {\n        // Remove the addEventListener alialing Events.on\n        // so we don't get into an infinite type loop\n        var ael = this.addEventListener;\n\n        this.addEventListener = function () {};\n\n        Events.one(this, type, fn);\n        this.addEventListener = ael;\n      };\n      /**\n       * This function causes an event to happen. This will then cause any `event listeners`\n       * that are waiting for that event, to get called. If there are no `event listeners`\n       * for an event then nothing will happen.\n       *\n       * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.\n       * Trigger will also call the `on` + `uppercaseEventName` function.\n       *\n       * Example:\n       * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call\n       * `onClick` if it exists.\n       *\n       * ```js\n       *   var foo = new EventTarget();\n       *   var handleBar = function() {\n       *     console.log('bar was triggered');\n       *   };\n       *\n       *   foo.on('bar', handleBar);\n       *   foo.trigger('bar');\n       *   // logs 'bar was triggered'\n       *\n       *   foo.trigger('bar');\n       *   // logs 'bar was triggered'\n       *\n       *   foo.trigger('foo');\n       *   // does nothing\n       * ```\n       *\n       * @param {string|EventTarget~Event|Object} event\n       *        The name of the event, an `Event`, or an object with a key of type set to\n       *        an event name.\n       */\n\n\n      EventTarget.prototype.trigger = function (event) {\n        var type = event.type || event;\n\n        if (typeof event === 'string') {\n          event = {\n            type: type\n          };\n        }\n\n        event = Events.fixEvent(event);\n\n        if (this.allowedEvents_[type] && this['on' + type]) {\n          this['on' + type](event);\n        }\n\n        Events.trigger(this, event);\n      };\n      /**\n       * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic\n       * the standard DOM API.\n       *\n       * @function\n       * @see {@link EventTarget#trigger}\n       */\n\n\n      EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;\n      exports['default'] = EventTarget;\n      /***/\n    },\n    /* 21 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      var _events = __webpack_require__(8);\n\n      var Events = _interopRequireWildcard(_events);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _guid = __webpack_require__(10);\n\n      var Guid = _interopRequireWildcard(_guid);\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      var _toTitleCase = __webpack_require__(18);\n\n      var _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\n      var _timeRanges = __webpack_require__(22);\n\n      var _buffer = __webpack_require__(23);\n\n      var _stylesheet = __webpack_require__(15);\n\n      var stylesheet = _interopRequireWildcard(_stylesheet);\n\n      var _fullscreenApi = __webpack_require__(24);\n\n      var _fullscreenApi2 = _interopRequireDefault(_fullscreenApi);\n\n      var _mediaError = __webpack_require__(25);\n\n      var _mediaError2 = _interopRequireDefault(_mediaError);\n\n      var _tuple = __webpack_require__(26);\n\n      var _tuple2 = _interopRequireDefault(_tuple);\n\n      var _obj = __webpack_require__(13);\n\n      var _mergeOptions = __webpack_require__(19);\n\n      var _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\n      var _textTrackListConverter = __webpack_require__(27);\n\n      var _textTrackListConverter2 = _interopRequireDefault(_textTrackListConverter);\n\n      var _modalDialog = __webpack_require__(28);\n\n      var _modalDialog2 = _interopRequireDefault(_modalDialog);\n\n      var _tech = __webpack_require__(29);\n\n      var _tech2 = _interopRequireDefault(_tech);\n\n      var _audioTrackList = __webpack_require__(47);\n\n      var _audioTrackList2 = _interopRequireDefault(_audioTrackList);\n\n      var _videoTrackList = __webpack_require__(46);\n\n      var _videoTrackList2 = _interopRequireDefault(_videoTrackList);\n\n      __webpack_require__(48);\n\n      __webpack_require__(49);\n\n      __webpack_require__(51);\n\n      __webpack_require__(53);\n\n      __webpack_require__(54);\n\n      __webpack_require__(55);\n\n      __webpack_require__(57);\n\n      __webpack_require__(58);\n\n      __webpack_require__(101);\n\n      __webpack_require__(102);\n\n      __webpack_require__(103);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n      * @file player.js\n      */\n      // Subclasses Component\n      // The following imports are used only to ensure that the corresponding modules\n      // are always included in the video.js package. Importing the modules will\n      // execute them and they will register themselves with video.js.\n      // Import Html5 tech, at least for disposing the original video tag.\n      // The following tech events are simply re-triggered\n      // on the player when they happen\n\n\n      var TECH_EVENTS_RETRIGGER = [\n      /**\n      * Fired while the user agent is downloading media data.\n      *\n      * @event Player#progress\n      * @type {EventTarget~Event}\n      */\n\n      /**\n      * Retrigger the `progress` event that was triggered by the {@link Tech}.\n      *\n      * @private\n      * @method Player.prototype.handleTechProgress_\n      * @fires Player#progress\n      * @listens Tech#progress\n      */\n      'progress',\n      /**\n      * Fires when the loading of an audio/video is aborted.\n      *\n      * @event Player#abort\n      * @type {EventTarget~Event}\n      */\n\n      /**\n      * Retrigger the `abort` event that was triggered by the {@link Tech}.\n      *\n      * @private\n      * @method Player.prototype.handleTechAbort_\n      * @fires Player#abort\n      * @listens Tech#abort\n      */\n      'abort',\n      /**\n      * Fires when the browser is intentionally not getting media data.\n      *\n      * @event Player#suspend\n      * @type {EventTarget~Event}\n      */\n\n      /**\n      * Retrigger the `suspend` event that was triggered by the {@link Tech}.\n      *\n      * @private\n      * @method Player.prototype.handleTechSuspend_\n      * @fires Player#suspend\n      * @listens Tech#suspend\n      */\n      'suspend',\n      /**\n      * Fires when the current playlist is empty.\n      *\n      * @event Player#emptied\n      * @type {EventTarget~Event}\n      */\n\n      /**\n      * Retrigger the `emptied` event that was triggered by the {@link Tech}.\n      *\n      * @private\n      * @method Player.prototype.handleTechEmptied_\n      * @fires Player#emptied\n      * @listens Tech#emptied\n      */\n      'emptied',\n      /**\n      * Fires when the browser is trying to get media data, but data is not available.\n      *\n      * @event Player#stalled\n      * @type {EventTarget~Event}\n      */\n\n      /**\n      * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n      *\n      * @private\n      * @method Player.prototype.handleTechStalled_\n      * @fires Player#stalled\n      * @listens Tech#stalled\n      */\n      'stalled',\n      /**\n      * Fires when the browser has loaded meta data for the audio/video.\n      *\n      * @event Player#loadedmetadata\n      * @type {EventTarget~Event}\n      */\n\n      /**\n      * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n      *\n      * @private\n      * @method Player.prototype.handleTechLoadedmetadata_\n      * @fires Player#loadedmetadata\n      * @listens Tech#loadedmetadata\n      */\n      'loadedmetadata',\n      /**\n      * Fires when the browser has loaded the current frame of the audio/video.\n      *\n      * @event player#loadeddata\n      * @type {event}\n      */\n\n      /**\n      * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\n      *\n      * @private\n      * @method Player.prototype.handleTechLoaddeddata_\n      * @fires Player#loadeddata\n      * @listens Tech#loadeddata\n      */\n      'loadeddata',\n      /**\n      * Fires when the current playback position has changed.\n      *\n      * @event player#timeupdate\n      * @type {event}\n      */\n\n      /**\n      * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\n      *\n      * @private\n      * @method Player.prototype.handleTechTimeUpdate_\n      * @fires Player#timeupdate\n      * @listens Tech#timeupdate\n      */\n      'timeupdate',\n      /**\n      * Fires when the playing speed of the audio/video is changed\n      *\n      * @event player#ratechange\n      * @type {event}\n      */\n\n      /**\n      * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\n      *\n      * @private\n      * @method Player.prototype.handleTechRatechange_\n      * @fires Player#ratechange\n      * @listens Tech#ratechange\n      */\n      'ratechange',\n      /**\n      * Fires when the volume has been changed\n      *\n      * @event player#volumechange\n      * @type {event}\n      */\n\n      /**\n      * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\n      *\n      * @private\n      * @method Player.prototype.handleTechVolumechange_\n      * @fires Player#volumechange\n      * @listens Tech#volumechange\n      */\n      'volumechange',\n      /**\n      * Fires when the text track has been changed\n      *\n      * @event player#texttrackchange\n      * @type {event}\n      */\n\n      /**\n      * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\n      *\n      * @private\n      * @method Player.prototype.handleTechTexttrackchange_\n      * @fires Player#texttrackchange\n      * @listens Tech#texttrackchange\n      */\n      'texttrackchange'];\n      /**\n      * An instance of the `Player` class is created when any of the Video.js setup methods\n      * are used to initialize a video.\n      * ```js\n      *   var myPlayer = videojs('example_video_1');\n      * ```\n      *\n      * In the following example, the `data-setup` attribute tells the Video.js library to\n      * create a player instance when the library is ready.\n      * ```html\n      *   <video id=\"example_video_1\" data-setup='{}' controls>\n      *     <source src=\"my-source.mp4\" type=\"video/mp4\">\n      *   </video>\n      * ```\n      *\n      * After an instance has been created it can be accessed globally in two ways:\n      * 1. By calling `videojs('example_video_1');`\n      * 2. By using it directly via  `videojs.players.example_video_1;`\n      *\n      * @extends Component\n      */\n\n      var Player = function (_Component) {\n        _inherits(Player, _Component);\n        /**\n        * Create an instance of this class.\n        *\n        * @param {Element} tag\n        *        The original video DOM element used for configuring options.\n        *\n        * @param {Object} [options]\n        *        Object of option names and values.\n        *\n        * @param {Component~ReadyCallback} [ready]\n        *        Ready callback function.\n        */\n\n\n        function Player(tag, options, ready) {\n          _classCallCheck(this, Player); // Make sure tag ID exists\n\n\n          tag.id = tag.id || 'vjs_video_' + Guid.newGUID(); // Set Options\n          // The options argument overrides options set in the video tag\n          // which overrides globally set options.\n          // This latter part coincides with the load order\n          // (tag must exist before Player)\n\n          options = (0, _obj.assign)(Player.getTagSettings(tag), options); // Delay the initialization of children because we need to set up\n          // player properties first, and can't use `this` before `super()`\n\n          options.initChildren = false; // Same with creating the element\n\n          options.createEl = false; // we don't want the player to report touch activity on itself\n          // see enableTouchActivity in Component\n\n          options.reportTouchActivity = false; // If language is not set, get the closest lang attribute\n\n          if (!options.language) {\n            if (typeof tag.closest === 'function') {\n              var closest = tag.closest('[lang]');\n\n              if (closest) {\n                options.language = closest.getAttribute('lang');\n              }\n            } else {\n              var element = tag;\n\n              while (element && element.nodeType === 1) {\n                if (Dom.getElAttributes(element).hasOwnProperty('lang')) {\n                  options.language = element.getAttribute('lang');\n                  break;\n                }\n\n                element = element.parentNode;\n              }\n            }\n          } // Run base component initializing with new options\n          // if the global option object was accidentally blown away by\n          // someone, bail early with an informative error\n\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, null, options, ready));\n\n          if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {\n            throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\n          } // Store the original tag used to set options\n\n\n          _this.tag = tag; // Store the tag attributes used to restore html5 element\n\n          _this.tagAttributes = tag && Dom.getElAttributes(tag); // Update current language\n\n          _this.language(_this.options_.language); // Update Supported Languages\n\n\n          if (options.languages) {\n            (function () {\n              // Normalise player option languages to lowercase\n              var languagesToLower = {};\n              Object.getOwnPropertyNames(options.languages).forEach(function (name) {\n                languagesToLower[name.toLowerCase()] = options.languages[name];\n              });\n              _this.languages_ = languagesToLower;\n            })();\n          } else {\n            _this.languages_ = Player.prototype.options_.languages;\n          } // Cache for video property values.\n\n\n          _this.cache_ = {}; // Set poster\n\n          _this.poster_ = options.poster || ''; // Set controls\n\n          _this.controls_ = !!options.controls; // Original tag settings stored in options\n          // now remove immediately so native controls don't flash.\n          // May be turned back on by HTML5 tech if nativeControlsForTouch is true\n\n          tag.controls = false;\n          /*\n          * Store the internal state of scrubbing\n          *\n          * @private\n          * @return {Boolean} True if the user is scrubbing\n          */\n\n          _this.scrubbing_ = false;\n          _this.el_ = _this.createEl(); // We also want to pass the original player options to each component and plugin\n          // as well so they don't need to reach back into the player for options later.\n          // We also need to do another copy of this.options_ so we don't end up with\n          // an infinite loop.\n\n          var playerOptionsCopy = (0, _mergeOptions2['default'])(_this.options_); // Load plugins\n\n          if (options.plugins) {\n            (function () {\n              var plugins = options.plugins;\n              Object.getOwnPropertyNames(plugins).forEach(function (name) {\n                if (typeof this[name] === 'function') {\n                  this[name](plugins[name]);\n                } else {\n                  _log2['default'].error('Unable to find plugin:', name);\n                }\n              }, _this);\n            })();\n          }\n\n          _this.options_.playerOptions = playerOptionsCopy;\n\n          _this.initChildren(); // Set isAudio based on whether or not an audio tag was used\n\n\n          _this.isAudio(tag.nodeName.toLowerCase() === 'audio'); // Update controls className. Can't do this when the controls are initially\n          // set because the element doesn't exist yet.\n\n\n          if (_this.controls()) {\n            _this.addClass('vjs-controls-enabled');\n          } else {\n            _this.addClass('vjs-controls-disabled');\n          } // Set ARIA label and region role depending on player type\n\n\n          _this.el_.setAttribute('role', 'region');\n\n          if (_this.isAudio()) {\n            _this.el_.setAttribute('aria-label', 'audio player');\n          } else {\n            _this.el_.setAttribute('aria-label', 'video player');\n          }\n\n          if (_this.isAudio()) {\n            _this.addClass('vjs-audio');\n          }\n\n          if (_this.flexNotSupported_()) {\n            _this.addClass('vjs-no-flex');\n          } // TODO: Make this smarter. Toggle user state between touching/mousing\n          // using events, since devices can have both touch and mouse events.\n          // if (browser.TOUCH_ENABLED) {\n          //   this.addClass('vjs-touch-enabled');\n          // }\n          // iOS Safari has broken hover handling\n\n\n          if (!browser.IS_IOS) {\n            _this.addClass('vjs-workinghover');\n          } // Make player easily findable by ID\n\n\n          Player.players[_this.id_] = _this; // When the player is first initialized, trigger activity so components\n          // like the control bar show themselves if needed\n\n          _this.userActive(true);\n\n          _this.reportUserActivity();\n\n          _this.listenForUserActivity_();\n\n          _this.on('fullscreenchange', _this.handleFullscreenChange_);\n\n          _this.on('stageclick', _this.handleStageClick_);\n\n          return _this;\n        }\n        /**\n        * Destroys the video player and does any necessary cleanup.\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *     myPlayer.dispose();\n        *   });\n        * ```\n        * This is especially helpful if you are dynamically adding and removing videos\n        * to/from the DOM.\n        *\n        * @fires Player#dispose\n        */\n\n\n        Player.prototype.dispose = function dispose() {\n          /**\n          * Called when the player is being disposed of.\n          *\n          * @event Player#dispose\n          * @type {EventTarget~Event}\n          */\n          this.trigger('dispose'); // prevent dispose from being called twice\n\n          this.off('dispose');\n\n          if (this.styleEl_ && this.styleEl_.parentNode) {\n            this.styleEl_.parentNode.removeChild(this.styleEl_);\n          } // Kill reference to this player\n\n\n          Player.players[this.id_] = null;\n\n          if (this.tag && this.tag.player) {\n            this.tag.player = null;\n          }\n\n          if (this.el_ && this.el_.player) {\n            this.el_.player = null;\n          }\n\n          if (this.tech_) {\n            this.tech_.dispose();\n          }\n\n          _Component.prototype.dispose.call(this);\n        };\n        /**\n        * Create the `Player`'s DOM element.\n        *\n        * @return {Element}\n        *         The DOM element that gets created.\n        */\n\n\n        Player.prototype.createEl = function createEl() {\n          var el = this.el_ = _Component.prototype.createEl.call(this, 'div');\n\n          var tag = this.tag; // Remove width/height attrs from tag so CSS can make it 100% width/height\n\n          tag.removeAttribute('width');\n          tag.removeAttribute('height'); // Copy over all the attributes from the tag, including ID and class\n          // ID will now reference player box, not the video tag\n\n          var attrs = Dom.getElAttributes(tag);\n          Object.getOwnPropertyNames(attrs).forEach(function (attr) {\n            // workaround so we don't totally break IE7\n            // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7\n            if (attr === 'class') {\n              el.className = attrs[attr];\n            } else {\n              el.setAttribute(attr, attrs[attr]);\n            }\n          }); // Update tag id/class for use as HTML5 playback tech\n          // Might think we should do this after embedding in container so .vjs-tech class\n          // doesn't flash 100% width/height, but class only applies with .video-js parent\n\n          tag.playerId = tag.id;\n          tag.id += '_html5_api';\n          tag.className = 'vjs-tech'; // Make player findable on elements\n\n          tag.player = el.player = this; // Default state of video is paused\n\n          this.addClass('vjs-paused'); // Add a style element in the player that we'll use to set the width/height\n          // of the player in a way that's still overrideable by CSS, just like the\n          // video element\n\n          if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n            this.styleEl_ = stylesheet.createStyleElement('vjs-styles-dimensions');\n            var defaultsStyleEl = Dom.$('.vjs-styles-defaults');\n            var head = Dom.$('head');\n            head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\n          } // Pass in the width/height/aspectRatio options which will update the style el\n\n\n          this.width(this.options_.width);\n          this.height(this.options_.height);\n          this.fluid(this.options_.fluid);\n          this.aspectRatio(this.options_.aspectRatio); // Hide any links within the video/audio tag, because IE doesn't hide them completely.\n\n          var links = tag.getElementsByTagName('a');\n\n          for (var i = 0; i < links.length; i++) {\n            var linkEl = links.item(i);\n            Dom.addElClass(linkEl, 'vjs-hidden');\n            linkEl.setAttribute('hidden', 'hidden');\n          } // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\n          // keep track of the original for later so we can know if the source originally failed\n\n\n          tag.initNetworkState_ = tag.networkState; // Wrap video tag in div (el/box) container\n\n          if (tag.parentNode) {\n            tag.parentNode.insertBefore(el, tag);\n          } // insert the tag as the first child of the player element\n          // then manually add it to the children array so that this.addChild\n          // will work properly for other components\n          //\n          // Breaks iPhone, fixed in HTML5 setup.\n\n\n          Dom.insertElFirst(tag, el);\n          this.children_.unshift(tag);\n          this.el_ = el;\n          return el;\n        };\n        /**\n        * A getter/setter for the `Player`'s width.\n        *\n        * @param {number} [value]\n        *        The value to set the `Player's width to.\n        *\n        * @return {number}\n        *         The current width of the `Player`.\n        */\n\n\n        Player.prototype.width = function width(value) {\n          return this.dimension('width', value);\n        };\n        /**\n        * A getter/setter for the `Player`'s height.\n        *\n        * @param {number} [value]\n        *        The value to set the `Player's heigth to.\n        *\n        * @return {number}\n        *         The current heigth of the `Player`.\n        */\n\n\n        Player.prototype.height = function height(value) {\n          return this.dimension('height', value);\n        };\n        /**\n        * A getter/setter for the `Player`'s width & height.\n        *\n        * @param {string} dimension\n        *        This string can be:\n        *        - 'width'\n        *        - 'height'\n        *\n        * @param {number} [value]\n        *        Value for dimension specified in the first argument.\n        *\n        * @return {Player|number}\n        *         - Returns itself when setting; method can be chained.\n        *         - The dimension arguments value when getting (width/height).\n        */\n\n\n        Player.prototype.dimension = function dimension(_dimension, value) {\n          var privDimension = _dimension + '_';\n\n          if (value === undefined) {\n            return this[privDimension] || 0;\n          }\n\n          if (value === '') {\n            // If an empty string is given, reset the dimension to be automatic\n            this[privDimension] = undefined;\n          } else {\n            var parsedVal = parseFloat(value);\n\n            if (isNaN(parsedVal)) {\n              _log2['default'].error('Improper value \"' + value + '\" supplied for for ' + _dimension);\n\n              return this;\n            }\n\n            this[privDimension] = parsedVal;\n          }\n\n          this.updateStyleEl_();\n          return this;\n        };\n        /**\n        * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\n        *\n        * @param {boolean} [bool]\n        *        - A value of true adds the class.\n        *        - A value of false removes the class.\n        *        - No value will toggle the fluid class.\n        *\n        * @return {boolean|undefined}\n        *         - The value of fluid when getting.\n        *         - `undefined` when setting.\n        */\n\n\n        Player.prototype.fluid = function fluid(bool) {\n          if (bool === undefined) {\n            return !!this.fluid_;\n          }\n\n          this.fluid_ = !!bool;\n\n          if (bool) {\n            this.addClass('vjs-fluid');\n          } else {\n            this.removeClass('vjs-fluid');\n          }\n\n          this.updateStyleEl_();\n        };\n        /**\n        * Get/Set the aspect ratio\n        *\n        * @param {string} [ratio]\n        *        Aspect ratio for player\n        *\n        * @return {string|undefined}\n        *         returns the current aspect ratio when getting\n        */\n\n        /**\n        * A getter/setter for the `Player`'s aspect ratio.\n        *\n        * @param {string} [ratio]\n        *        The value to set the `Player's aspect ratio to.\n        *\n        * @return {string|undefined}\n        *         - The current aspect ratio of the `Player` when getting.\n        *         - undefined when setting\n        */\n\n\n        Player.prototype.aspectRatio = function aspectRatio(ratio) {\n          if (ratio === undefined) {\n            return this.aspectRatio_;\n          } // Check for width:height format\n\n\n          if (!/^\\d+\\:\\d+$/.test(ratio)) {\n            throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\n          }\n\n          this.aspectRatio_ = ratio; // We're assuming if you set an aspect ratio you want fluid mode,\n          // because in fixed mode you could calculate width and height yourself.\n\n          this.fluid(true);\n          this.updateStyleEl_();\n        };\n        /**\n        * Update styles of the `Player` element (height, width and aspect ratio).\n        *\n        * @private\n        * @listens Tech#loadedmetadata\n        */\n\n\n        Player.prototype.updateStyleEl_ = function updateStyleEl_() {\n          if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE === true) {\n            var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\n\n            var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\n\n            var techEl = this.tech_ && this.tech_.el();\n\n            if (techEl) {\n              if (_width >= 0) {\n                techEl.width = _width;\n              }\n\n              if (_height >= 0) {\n                techEl.height = _height;\n              }\n            }\n\n            return;\n          }\n\n          var width = void 0;\n          var height = void 0;\n          var aspectRatio = void 0;\n          var idClass = void 0; // The aspect ratio is either used directly or to calculate width and height.\n\n          if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\n            // Use any aspectRatio that's been specifically set\n            aspectRatio = this.aspectRatio_;\n          } else if (this.videoWidth() > 0) {\n            // Otherwise try to get the aspect ratio from the video metadata\n            aspectRatio = this.videoWidth() + ':' + this.videoHeight();\n          } else {\n            // Or use a default. The video element's is 2:1, but 16:9 is more common.\n            aspectRatio = '16:9';\n          } // Get the ratio as a decimal we can use to calculate dimensions\n\n\n          var ratioParts = aspectRatio.split(':');\n          var ratioMultiplier = ratioParts[1] / ratioParts[0];\n\n          if (this.width_ !== undefined) {\n            // Use any width that's been specifically set\n            width = this.width_;\n          } else if (this.height_ !== undefined) {\n            // Or calulate the width from the aspect ratio if a height has been set\n            width = this.height_ / ratioMultiplier;\n          } else {\n            // Or use the video's metadata, or use the video el's default of 300\n            width = this.videoWidth() || 300;\n          }\n\n          if (this.height_ !== undefined) {\n            // Use any height that's been specifically set\n            height = this.height_;\n          } else {\n            // Otherwise calculate the height from the ratio and the width\n            height = width * ratioMultiplier;\n          } // Ensure the CSS class is valid by starting with an alpha character\n\n\n          if (/^[^a-zA-Z]/.test(this.id())) {\n            idClass = 'dimensions-' + this.id();\n          } else {\n            idClass = this.id() + '-dimensions';\n          } // Ensure the right class is still on the player for the style element\n\n\n          this.addClass(idClass);\n          stylesheet.setTextContent(this.styleEl_, '\\n      .' + idClass + ' {\\n        width: ' + width + 'px;\\n        height: ' + height + 'px;\\n      }\\n\\n      .' + idClass + '.vjs-fluid {\\n        padding-top: ' + ratioMultiplier * 100 + '%;\\n      }\\n    ');\n        };\n        /**\n        * Load/Create an instance of playback {@link Tech} including element\n        * and API methods. Then append the `Tech` element in `Player` as a child.\n        *\n        * @param {string} techName\n        *        name of the playback technology\n        *\n        * @param {string} source\n        *        video source\n        *\n        * @private\n        */\n\n\n        Player.prototype.loadTech_ = function loadTech_(techName, source) {\n          var _this2 = this; // Pause and remove current playback technology\n\n\n          if (this.tech_) {\n            this.unloadTech_();\n          } // get rid of the HTML5 video tag as soon as we are using another tech\n\n\n          if (techName !== 'Html5' && this.tag) {\n            _tech2['default'].getTech('Html5').disposeMediaElement(this.tag);\n\n            this.tag.player = null;\n            this.tag = null;\n          }\n\n          this.techName_ = techName; // Turn off API access because we're loading a new tech that might load asynchronously\n\n          this.isReady_ = false; // Grab tech-specific options from player options and add source and parent element to use.\n\n          var techOptions = (0, _obj.assign)({\n            source: source,\n            'nativeControlsForTouch': this.options_.nativeControlsForTouch,\n            'playerId': this.id(),\n            'techId': this.id() + '_' + techName + '_api',\n            'videoTracks': this.videoTracks_,\n            'textTracks': this.textTracks_,\n            'audioTracks': this.audioTracks_,\n            'autoplay': this.options_.autoplay,\n            'preload': this.options_.preload,\n            'loop': this.options_.loop,\n            'muted': this.options_.muted,\n            'poster': this.poster(),\n            'language': this.language(),\n            'vtt.js': this.options_['vtt.js']\n          }, this.options_[techName.toLowerCase()]);\n\n          if (this.tag) {\n            techOptions.tag = this.tag;\n          }\n\n          if (source) {\n            this.currentType_ = source.type;\n\n            if (source.src === this.cache_.src && this.cache_.currentTime > 0) {\n              techOptions.startTime = this.cache_.currentTime;\n            }\n\n            this.cache_.sources = null;\n            this.cache_.source = source;\n            this.cache_.src = source.src;\n          } // Initialize tech instance\n\n\n          var TechComponent = _tech2['default'].getTech(techName); // Support old behavior of techs being registered as components.\n          // Remove once that deprecated behavior is removed.\n\n\n          if (!TechComponent) {\n            TechComponent = _component2['default'].getComponent(techName);\n          }\n\n          this.tech_ = new TechComponent(techOptions); // player.triggerReady is always async, so don't need this to be async\n\n          this.tech_.ready(Fn.bind(this, this.handleTechReady_), true);\n\n          _textTrackListConverter2['default'].jsonToTextTracks(this.textTracksJson_ || [], this.tech_); // Listen to all HTML5-defined events and trigger them on the player\n\n\n          TECH_EVENTS_RETRIGGER.forEach(function (event) {\n            _this2.on(_this2.tech_, event, _this2['handleTech' + (0, _toTitleCase2['default'])(event) + '_']);\n          });\n          this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);\n          this.on(this.tech_, 'waiting', this.handleTechWaiting_);\n          this.on(this.tech_, 'canplay', this.handleTechCanPlay_);\n          this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);\n          this.on(this.tech_, 'playing', this.handleTechPlaying_);\n          this.on(this.tech_, 'ended', this.handleTechEnded_);\n          this.on(this.tech_, 'seeking', this.handleTechSeeking_);\n          this.on(this.tech_, 'seeked', this.handleTechSeeked_);\n          this.on(this.tech_, 'play', this.handleTechPlay_);\n          this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);\n          this.on(this.tech_, 'pause', this.handleTechPause_);\n          this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);\n          this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);\n          this.on(this.tech_, 'error', this.handleTechError_);\n          this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);\n          this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);\n          this.on(this.tech_, 'textdata', this.handleTechTextData_);\n          this.usingNativeControls(this.techGet_('controls'));\n\n          if (this.controls() && !this.usingNativeControls()) {\n            this.addTechControlsListeners_();\n          } // Add the tech element in the DOM if it was not already there\n          // Make sure to not insert the original video element if using Html5\n\n\n          if (this.tech_.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {\n            Dom.insertElFirst(this.tech_.el(), this.el());\n          } // Get rid of the original video tag reference after the first tech is loaded\n\n\n          if (this.tag) {\n            this.tag.player = null;\n            this.tag = null;\n          }\n        };\n        /**\n        * Unload and dispose of the current playback {@link Tech}.\n        *\n        * @private\n        */\n\n\n        Player.prototype.unloadTech_ = function unloadTech_() {\n          // Save the current text tracks so that we can reuse the same text tracks with the next tech\n          this.videoTracks_ = this.videoTracks();\n          this.textTracks_ = this.textTracks();\n          this.audioTracks_ = this.audioTracks();\n          this.textTracksJson_ = _textTrackListConverter2['default'].textTracksToJson(this.tech_);\n          this.isReady_ = false;\n          this.tech_.dispose();\n          this.tech_ = false;\n        };\n        /**\n        * Return a reference to the current {@link Tech}, but only if given an object with the\n        * `IWillNotUseThisInPlugins` property having a true value. This is try and prevent misuse\n        * of techs by plugins.\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *      // function call throws an error if we\n        *       // dont add {IWillNotUseThisInPlugins: true}\n        *      var tech = myPlayer.tech({IWillNotUseThisInPlugins: true});\n        *   });\n        * ```\n        *\n        * @param {Object} safety\n        *        An object that must contain `{IWillNotUseThisInPlugins: true}`\n        *\n        * @param {boolean} safety.IWillNotUseThisInPlugins\n        *        Must be set to true or else this function will throw an error.\n        *\n        * @return {Tech}\n        *         The Tech\n        */\n\n\n        Player.prototype.tech = function tech(safety) {\n          if (safety && safety.IWillNotUseThisInPlugins) {\n            return this.tech_;\n          }\n\n          var errorText = '\\n      Please make sure that you are not using this inside of a plugin.\\n      To disable this alert and error, please pass in an object with\\n      `IWillNotUseThisInPlugins` to the `tech` method. See\\n      https://github.com/videojs/video.js/issues/2617 for more info.\\n    ';\n\n          _window2['default'].alert(errorText);\n\n          throw new Error(errorText);\n        };\n        /**\n        * Set up click and touch listeners for the playback element\n        *\n        * - On desktops: a click on the video itself will toggle playback\n        * - On mobile devices: a click on the video toggles controls\n        *   which is done by toggling the user state between active and\n        *   inactive\n        * - A tap can signal that a user has become active or has become inactive\n        *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\n        *   quick tap should hide them again (signaling the user is in an inactive\n        *   viewing state)\n        * - In addition to this, we still want the user to be considered inactive after\n        *   a few seconds of inactivity.\n        *\n        * > Note: the only part of iOS interaction we can't mimic with this setup\n        * is a touch and hold on the video element counting as activity in order to\n        * keep the controls showing, but that shouldn't be an issue. A touch and hold\n        * on any controls will still keep the user active\n        *\n        * @private\n        */\n\n\n        Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {\n          // Make sure to remove all the previous listeners in case we are called multiple times.\n          this.removeTechControlsListeners_(); // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do\n          // trigger mousedown/up.\n          // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object\n          // Any touch events are set to block the mousedown event from happening\n\n          this.on(this.tech_, 'mousedown', this.handleTechClick_); // If the controls were hidden we don't want that to change without a tap event\n          // so we'll check if the controls were already showing before reporting user\n          // activity\n\n          this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);\n          this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);\n          this.on(this.tech_, 'touchend', this.handleTechTouchEnd_); // The tap listener needs to come after the touchend listener because the tap\n          // listener cancels out any reportedUserActivity when setting userActive(false)\n\n          this.on(this.tech_, 'tap', this.handleTechTap_);\n        };\n        /**\n        * Remove the listeners used for click and tap controls. This is needed for\n        * toggling to controls disabled, where a tap/touch should do nothing.\n        *\n        * @private\n        */\n\n\n        Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {\n          // We don't want to just use `this.off()` because there might be other needed\n          // listeners added by techs that extend this.\n          this.off(this.tech_, 'tap', this.handleTechTap_);\n          this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);\n          this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);\n          this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);\n          this.off(this.tech_, 'mousedown', this.handleTechClick_);\n        };\n        /**\n        * Player waits for the tech to be ready\n        *\n        * @private\n        */\n\n\n        Player.prototype.handleTechReady_ = function handleTechReady_() {\n          this.triggerReady(); // Keep the same volume as before\n\n          if (this.cache_.volume) {\n            this.techCall_('setVolume', this.cache_.volume);\n          } // Look if the tech found a higher resolution poster while loading\n\n\n          this.handleTechPosterChange_(); // Update the duration if available\n\n          this.handleTechDurationChange_(); // Chrome and Safari both have issues with autoplay.\n          // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.\n          // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)\n          // This fixes both issues. Need to wait for API, so it updates displays correctly\n\n          if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {\n            try {\n              // Chrome Fix. Fixed in Chrome v16.\n              delete this.tag.poster;\n            } catch (e) {\n              (0, _log2['default'])('deleting tag.poster throws in some browsers', e);\n            }\n\n            this.play();\n          }\n        };\n        /**\n        * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This\n        * function will also trigger {@link Player#firstplay} if it is the first loadstart\n        * for a video.\n        *\n        * @fires Player#loadstart\n        * @fires Player#firstplay\n        * @listens Tech#loadstart\n        * @private\n        */\n\n\n        Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {\n          // TODO: Update to use `emptied` event instead. See #1277.\n          this.removeClass('vjs-ended'); // reset the error state\n\n          this.error(null); // If it's already playing we want to trigger a firstplay event now.\n          // The firstplay event relies on both the play and loadstart events\n          // which can happen in any order for a new source\n\n          if (!this.paused()) {\n            /**\n            * Fired when the user agent begins looking for media data\n            *\n            * @event Player#loadstart\n            * @type {EventTarget~Event}\n            */\n            this.trigger('loadstart');\n            this.trigger('firstplay');\n          } else {\n            // reset the hasStarted state\n            this.hasStarted(false);\n            this.trigger('loadstart');\n          }\n        };\n        /**\n        * Add/remove the vjs-has-started class\n        *\n        * @fires Player#firstplay\n        *\n        * @param {boolean} hasStarted\n        *        - true: adds the class\n        *        - false: remove the class\n        *\n        * @return {boolean}\n        *         the boolean value of hasStarted\n        */\n\n\n        Player.prototype.hasStarted = function hasStarted(_hasStarted) {\n          if (_hasStarted !== undefined) {\n            // only update if this is a new value\n            if (this.hasStarted_ !== _hasStarted) {\n              this.hasStarted_ = _hasStarted;\n\n              if (_hasStarted) {\n                this.addClass('vjs-has-started'); // trigger the firstplay event if this newly has played\n\n                this.trigger('firstplay');\n              } else {\n                this.removeClass('vjs-has-started');\n              }\n            }\n\n            return this;\n          }\n\n          return !!this.hasStarted_;\n        };\n        /**\n        * Fired whenever the media begins or resumes playback\n        *\n        * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\n        * @fires Player#play\n        * @listens Tech#play\n        * @private\n        */\n\n\n        Player.prototype.handleTechPlay_ = function handleTechPlay_() {\n          this.removeClass('vjs-ended');\n          this.removeClass('vjs-paused');\n          this.addClass('vjs-playing'); // hide the poster when the user hits play\n\n          this.hasStarted(true);\n          /**\n          * Triggered whenever an {@link Tech#play} event happens. Indicates that\n          * playback has started or resumed.\n          *\n          * @event Player#play\n          * @type {EventTarget~Event}\n          */\n\n          this.trigger('play');\n        };\n        /**\n        * Retrigger the `waiting` event that was triggered by the {@link Tech}.\n        *\n        * @fires Player#waiting\n        * @listens Tech#waiting\n        * @private\n        */\n\n\n        Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {\n          var _this3 = this;\n\n          this.addClass('vjs-waiting');\n          /**\n          * A readyState change on the DOM element has caused playback to stop.\n          *\n          * @event Player#waiting\n          * @type {EventTarget~Event}\n          */\n\n          this.trigger('waiting');\n          this.one('timeupdate', function () {\n            return _this3.removeClass('vjs-waiting');\n          });\n        };\n        /**\n        * Retrigger the `canplay` event that was triggered by the {@link Tech}.\n        * > Note: This is not consistent between browsers. See #1351\n        *\n        * @fires Player#canplay\n        * @listens Tech#canplay\n        * @private\n        */\n\n\n        Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {\n          this.removeClass('vjs-waiting');\n          /**\n          * The media has a readyState of HAVE_FUTURE_DATA or greater.\n          *\n          * @event Player#canplay\n          * @type {EventTarget~Event}\n          */\n\n          this.trigger('canplay');\n        };\n        /**\n        * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\n        *\n        * @fires Player#canplaythrough\n        * @listens Tech#canplaythrough\n        * @private\n        */\n\n\n        Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {\n          this.removeClass('vjs-waiting');\n          /**\n          * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\n          * entire media file can be played without buffering.\n          *\n          * @event Player#canplaythrough\n          * @type {EventTarget~Event}\n          */\n\n          this.trigger('canplaythrough');\n        };\n        /**\n        * Retrigger the `playing` event that was triggered by the {@link Tech}.\n        *\n        * @fires Player#playing\n        * @listens Tech#playing\n        * @private\n        */\n\n\n        Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {\n          this.removeClass('vjs-waiting');\n          /**\n          * The media is no longer blocked from playback, and has started playing.\n          *\n          * @event Player#playing\n          * @type {EventTarget~Event}\n          */\n\n          this.trigger('playing');\n        };\n        /**\n        * Retrigger the `seeking` event that was triggered by the {@link Tech}.\n        *\n        * @fires Player#seeking\n        * @listens Tech#seeking\n        * @private\n        */\n\n\n        Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {\n          this.addClass('vjs-seeking');\n          /**\n          * Fired whenever the player is jumping to a new time\n          *\n          * @event Player#seeking\n          * @type {EventTarget~Event}\n          */\n\n          this.trigger('seeking');\n        };\n        /**\n        * Retrigger the `seeked` event that was triggered by the {@link Tech}.\n        *\n        * @fires Player#seeked\n        * @listens Tech#seeked\n        * @private\n        */\n\n\n        Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {\n          this.removeClass('vjs-seeking');\n          /**\n          * Fired when the player has finished jumping to a new time\n          *\n          * @event Player#seeked\n          * @type {EventTarget~Event}\n          */\n\n          this.trigger('seeked');\n        };\n        /**\n        * Retrigger the `firstplay` event that was triggered by the {@link Tech}.\n        *\n        * @fires Player#firstplay\n        * @listens Tech#firstplay\n        * @private\n        */\n\n\n        Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {\n          // If the first starttime attribute is specified\n          // then we will start at the given offset in seconds\n          if (this.options_.starttime) {\n            this.currentTime(this.options_.starttime);\n          }\n\n          this.addClass('vjs-has-started');\n          /**\n          * Fired the first time a video is played. Not part of the HLS spec, and this is\n          * probably not the best implementation yet, so use sparingly. If you don't have a\n          * reason to prevent playback, use `myPlayer.one('play');` instead.\n          *\n          * @event Player#firstplay\n          * @type {EventTarget~Event}\n          */\n\n          this.trigger('firstplay');\n        };\n        /**\n        * Retrigger the `pause` event that was triggered by the {@link Tech}.\n        *\n        * @fires Player#pause\n        * @listens Tech#pause\n        * @private\n        */\n\n\n        Player.prototype.handleTechPause_ = function handleTechPause_() {\n          this.removeClass('vjs-playing');\n          this.addClass('vjs-paused');\n          /**\n          * Fired whenever the media has been paused\n          *\n          * @event Player#pause\n          * @type {EventTarget~Event}\n          */\n\n          this.trigger('pause');\n        };\n        /**\n        * Retrigger the `ended` event that was triggered by the {@link Tech}.\n        *\n        * @fires Player#ended\n        * @listens Tech#ended\n        * @private\n        */\n\n\n        Player.prototype.handleTechEnded_ = function handleTechEnded_() {\n          this.addClass('vjs-ended');\n\n          if (this.options_.loop) {\n            this.currentTime(0);\n            this.play();\n          } else if (!this.paused()) {\n            this.pause();\n          }\n          /**\n          * Fired when the end of the media resource is reached (currentTime == duration)\n          *\n          * @event Player#ended\n          * @type {EventTarget~Event}\n          */\n\n\n          this.trigger('ended');\n        };\n        /**\n        * Fired when the duration of the media resource is first known or changed\n        *\n        * @listens Tech#durationchange\n        * @private\n        */\n\n\n        Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {\n          this.duration(this.techGet_('duration'));\n        };\n        /**\n        * Handle a click on the media element to play/pause\n        *\n        * @param {EventTarget~Event} event\n        *        the event that caused this function to trigger\n        *\n        * @listens Tech#mousedown\n        * @private\n        */\n\n\n        Player.prototype.handleTechClick_ = function handleTechClick_(event) {\n          // We're using mousedown to detect clicks thanks to Flash, but mousedown\n          // will also be triggered with right-clicks, so we need to prevent that\n          if (event.button !== 0) {\n            return;\n          } // When controls are disabled a click should not toggle playback because\n          // the click is considered a control\n\n\n          if (this.controls()) {\n            if (this.paused()) {\n              this.play();\n            } else {\n              this.pause();\n            }\n          }\n        };\n        /**\n        * Handle a tap on the media element. It will toggle the user\n        * activity state, which hides and shows the controls.\n        *\n        * @listens Tech#tap\n        * @private\n        */\n\n\n        Player.prototype.handleTechTap_ = function handleTechTap_() {\n          this.userActive(!this.userActive());\n        };\n        /**\n        * Handle touch to start\n        *\n        * @listens Tech#touchstart\n        * @private\n        */\n\n\n        Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {\n          this.userWasActive = this.userActive();\n        };\n        /**\n        * Handle touch to move\n        *\n        * @listens Tech#touchmove\n        * @private\n        */\n\n\n        Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {\n          if (this.userWasActive) {\n            this.reportUserActivity();\n          }\n        };\n        /**\n        * Handle touch to end\n        *\n        * @param {EventTarget~Event} event\n        *        the touchend event that triggered\n        *        this function\n        *\n        * @listens Tech#touchend\n        * @private\n        */\n\n\n        Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {\n          // Stop the mouse events from also happening\n          event.preventDefault();\n        };\n        /**\n        * Fired when the player switches in or out of fullscreen mode\n        *\n        * @private\n        * @listens Player#fullscreenchange\n        */\n\n\n        Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {\n          if (this.isFullscreen()) {\n            this.addClass('vjs-fullscreen');\n          } else {\n            this.removeClass('vjs-fullscreen');\n          }\n        };\n        /**\n        * native click events on the SWF aren't triggered on IE11, Win8.1RT\n        * use stageclick events triggered from inside the SWF instead\n        *\n        * @private\n        * @listens stageclick\n        */\n\n\n        Player.prototype.handleStageClick_ = function handleStageClick_() {\n          this.reportUserActivity();\n        };\n        /**\n        * Handle Tech Fullscreen Change\n        *\n        * @param {EventTarget~Event} event\n        *        the fullscreenchange event that triggered this function\n        *\n        * @param {Object} data\n        *        the data that was sent with the event\n        *\n        * @private\n        * @listens Tech#fullscreenchange\n        * @fires Player#fullscreenchange\n        */\n\n\n        Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {\n          if (data) {\n            this.isFullscreen(data.isFullscreen);\n          }\n          /**\n          * Fired when going in and out of fullscreen.\n          *\n          * @event Player#fullscreenchange\n          * @type {EventTarget~Event}\n          */\n\n\n          this.trigger('fullscreenchange');\n        };\n        /**\n        * Fires when an error occurred during the loading of an audio/video.\n        *\n        * @private\n        * @listens Tech#error\n        */\n\n\n        Player.prototype.handleTechError_ = function handleTechError_() {\n          var error = this.tech_.error();\n          this.error(error);\n        };\n        /**\n        * Retrigger the `textdata` event that was triggered by the {@link Tech}.\n        *\n        * @fires Player#textdata\n        * @listens Tech#textdata\n        * @private\n        */\n\n\n        Player.prototype.handleTechTextData_ = function handleTechTextData_() {\n          var data = null;\n\n          if (arguments.length > 1) {\n            data = arguments[1];\n          }\n          /**\n          * Fires when we get a textdata event from tech\n          *\n          * @event Player#textdata\n          * @type {EventTarget~Event}\n          */\n\n\n          this.trigger('textdata', data);\n        };\n        /**\n        * Get object for cached values.\n        *\n        * @return {Object}\n        *         get the current object cache\n        */\n\n\n        Player.prototype.getCache = function getCache() {\n          return this.cache_;\n        };\n        /**\n        * Pass values to the playback tech\n        *\n        * @param {string} [method]\n        *        the method to call\n        *\n        * @param {Object} arg\n        *        the argument to pass\n        *\n        * @private\n        */\n\n\n        Player.prototype.techCall_ = function techCall_(method, arg) {\n          // If it's not ready yet, call method when it is\n          if (this.tech_ && !this.tech_.isReady_) {\n            this.tech_.ready(function () {\n              this[method](arg);\n            }, true); // Otherwise call method now\n          } else {\n            try {\n              if (this.tech_) {\n                this.tech_[method](arg);\n              }\n            } catch (e) {\n              (0, _log2['default'])(e);\n              throw e;\n            }\n          }\n        };\n        /**\n        * Get calls can't wait for the tech, and sometimes don't need to.\n        *\n        * @param {string} method\n        *        Tech method\n        *\n        * @return {Function|undefined}\n        *         the method or undefined\n        *\n        * @private\n        */\n\n\n        Player.prototype.techGet_ = function techGet_(method) {\n          if (this.tech_ && this.tech_.isReady_) {\n            // Flash likes to die and reload when you hide or reposition it.\n            // In these cases the object methods go away and we get errors.\n            // When that happens we'll catch the errors and inform tech that it's not ready any more.\n            try {\n              return this.tech_[method]();\n            } catch (e) {\n              // When building additional tech libs, an expected method may not be defined yet\n              if (this.tech_[method] === undefined) {\n                (0, _log2['default'])('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e); // When a method isn't available on the object it throws a TypeError\n              } else if (e.name === 'TypeError') {\n                (0, _log2['default'])('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);\n                this.tech_.isReady_ = false;\n              } else {\n                (0, _log2['default'])(e);\n              }\n\n              throw e;\n            }\n          }\n\n          return;\n        };\n        /**\n        * start media playback\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *     myPlayer.play();\n        *   });\n        * ```\n        *\n        * @return {Player}\n        *         A reference to the player object this function was called on\n        */\n\n\n        Player.prototype.play = function play() {\n          // Only calls the tech's play if we already have a src loaded\n          if (this.src() || this.currentSrc()) {\n            this.techCall_('play');\n          } else {\n            this.tech_.one('loadstart', function () {\n              this.play();\n            });\n          }\n\n          return this;\n        };\n        /**\n        * Pause the video playback\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *     myPlayer.play();\n        *     myPlayer.pause();\n        *   });\n        * ```\n        *\n        * @return {Player}\n        *         A reference to the player object this function was called on\n        */\n\n\n        Player.prototype.pause = function pause() {\n          this.techCall_('pause');\n          return this;\n        };\n        /**\n        * Check if the player is paused or has yet to play\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *\n        *   myPlayer.ready(function() {\n        *     // true\n        *     console.log(myPlayer.paused());\n        *     // false\n        *     console.log(!myPlayer.paused());\n        *\n        *     myPlayer.play();\n        *     // false\n        *     console.log(myPlayer.paused());\n        *     // true\n        *     console.log(!myPlayer.paused());\n        *\n        *     myPlayer.pause();\n        *     // true\n        *     console.log(myPlayer.paused());\n        *     // false\n        *     console.log(!myPlayer.paused());\n        *   });\n        *\n        * ```\n        *\n        * @return {boolean}\n        *         - false: if the media is currently playing\n        *         - true: if media is not currently playing\n        */\n\n\n        Player.prototype.paused = function paused() {\n          // The initial state of paused should be true (in Safari it's actually false)\n          return this.techGet_('paused') === false ? false : true;\n        };\n        /**\n        * Returns whether or not the user is \"scrubbing\". Scrubbing is\n        * when the user has clicked the progress bar handle and is\n        * dragging it along the progress bar.\n        *\n        * @param {boolean} [isScrubbing]\n        *        wether the user is or is not scrubbing\n        *\n        * @return {boolean|Player}\n        *         A instance of the player that called this function when setting,\n        *         and the value of scrubbing when getting\n        */\n\n\n        Player.prototype.scrubbing = function scrubbing(isScrubbing) {\n          if (isScrubbing !== undefined) {\n            this.scrubbing_ = !!isScrubbing;\n\n            if (isScrubbing) {\n              this.addClass('vjs-scrubbing');\n            } else {\n              this.removeClass('vjs-scrubbing');\n            }\n\n            return this;\n          }\n\n          return this.scrubbing_;\n        };\n        /**\n        * Get or set the current time (in seconds)\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *     // set current time to 2 minutes into the video\n        *     myPlayer.currentTime(120);\n        *\n        *     // get the current time, should be 120 seconds\n        *     var whereYouAt = myPlayer.currentTime();\n        *   });\n        * ```\n        *\n        * @param {number|string} [seconds]\n        *        The time to seek to in seconds\n        *\n        * @return {Player|number}\n        *         - the current time in seconds when getting\n        *         - a reference to the current player object when\n        *           getting\n        */\n\n\n        Player.prototype.currentTime = function currentTime(seconds) {\n          if (seconds !== undefined) {\n            this.techCall_('setCurrentTime', seconds);\n            return this;\n          } // cache last currentTime and return. default to 0 seconds\n          //\n          // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\n          // currentTime when scrubbing, but may not provide much performance benefit afterall.\n          // Should be tested. Also something has to read the actual current time or the cache will\n          // never get updated.\n\n\n          this.cache_.currentTime = this.techGet_('currentTime') || 0;\n          return this.cache_.currentTime;\n        };\n        /**\n        * Normally gets the length in time of the video in seconds;\n        * in all but the rarest use cases an argument will NOT be passed to the method\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *     var lengthOfVideo = myPlayer.duration();\n        *   });\n        * ```\n        * > **NOTE**: The video must have started loading before the duration can be\n        * known, and in the case of Flash, may not be known until the video starts\n        * playing.\n        *\n        * @fires Player#durationchange\n        *\n        * @param {number} [seconds]\n        *        The duration of the video to set in seconds\n        *\n        * @return {number|Player}\n        *         - The duration of the video in seconds when getting\n        *         - A reference to the player that called this function\n        *           when setting\n        */\n\n\n        Player.prototype.duration = function duration(seconds) {\n          if (seconds === undefined) {\n            return this.cache_.duration || 0;\n          }\n\n          seconds = parseFloat(seconds) || 0; // Standardize on Inifity for signaling video is live\n\n          if (seconds < 0) {\n            seconds = Infinity;\n          }\n\n          if (seconds !== this.cache_.duration) {\n            // Cache the last set value for optimized scrubbing (esp. Flash)\n            this.cache_.duration = seconds;\n\n            if (seconds === Infinity) {\n              this.addClass('vjs-live');\n            } else {\n              this.removeClass('vjs-live');\n            }\n            /**\n            * @event Player#durationchange\n            * @type {EventTarget~Event}\n            */\n\n\n            this.trigger('durationchange');\n          }\n\n          return this;\n        };\n        /**\n        * Calculates how much time is left in the video. Not part\n        * of the native video API.\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *      myPlayer.currentTime(10);\n        *\n        *      // should be 10 seconds less than duration\n        *      console.log(myPlayer.remainingTime());\n        *   });\n        * ```\n        *\n        * @return {number}\n        *         The time remaining in seconds\n        */\n\n\n        Player.prototype.remainingTime = function remainingTime() {\n          return this.duration() - this.currentTime();\n        }; //\n        // Kind of like an array of portions of the video that have been downloaded.\n\n        /**\n           * Get a TimeRange object with an array of the times of the video\n           * that have been downloaded. If you just want the percent of the\n           * video that's been downloaded, use bufferedPercent.\n           *\n           * ```js\n           *   var myPlayer = videojs('some-player-id');\n           *\n           *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n           *   myPlayer.ready(function() {\n           *     var bufferedTimeRange = myPlayer.buffered();\n           *\n           *     // number of different ranges of time have been buffered.\n           *     // Usually 1\n           *     var numberOfRanges = bufferedTimeRange.length,\n           *\n           *     // Time in seconds when the first range starts.\n           *     // Usually 0\n           *     var firstRangeStart = bufferedTimeRange.start(0),\n           *\n           *     // Time in seconds when the first range ends\n           *     var firstRangeEnd = bufferedTimeRange.end(0),\n           *\n           *     // Length in seconds of the first time range\n           *     var firstRangeLength = firstRangeEnd - firstRangeStart;\n           *   });\n           * ```\n           *\n           * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\n           *\n           * @return {TimeRange}\n           *         A mock TimeRange object (following HTML spec)\n           */\n\n\n        Player.prototype.buffered = function buffered() {\n          var buffered = this.techGet_('buffered');\n\n          if (!buffered || !buffered.length) {\n            buffered = (0, _timeRanges.createTimeRange)(0, 0);\n          }\n\n          return buffered;\n        };\n        /**\n        * Get the percent (as a decimal) of the video that's been downloaded.\n        * This method is not a part of the native HTML video API.\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *     // example 0.11 aka 11%\n        *     var howMuchIsDownloaded = myPlayer.bufferedPercent();\n        *   });\n        * ```\n        *\n        * @return {number}\n        *         A decimal between 0 and 1 representing the percent\n        *         that is bufferred 0 being 0% and 1 being 100%\n        */\n\n\n        Player.prototype.bufferedPercent = function bufferedPercent() {\n          return (0, _buffer.bufferedPercent)(this.buffered(), this.duration());\n        };\n        /**\n        * Get the ending time of the last buffered time range\n        * This is used in the progress bar to encapsulate all time ranges.\n        *\n        * @return {number}\n        *         The end of the last buffered time range\n        */\n\n\n        Player.prototype.bufferedEnd = function bufferedEnd() {\n          var buffered = this.buffered();\n          var duration = this.duration();\n          var end = buffered.end(buffered.length - 1);\n\n          if (end > duration) {\n            end = duration;\n          }\n\n          return end;\n        };\n        /**\n        * Get or set the current volume of the media\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *     // get\n        *     var howLoudIsIt = myPlayer.volume();\n        *     // set\n        *     myPlayer.volume(0.5); // Set volume to half\n        *   });\n        * ```\n        *\n        * @param  {number} [percentAsDecimal]\n        *         The new volume as a decimal percent:\n        *         - 0 is muted/0%/off\n        *         - 1.0 is 100%/full\n        *         - 0.5 is half volume or 50%\n        *\n        * @return {Player|number}\n        *         a reference to the calling player when setting and the\n        *         current volume as a percent when getting\n        */\n\n\n        Player.prototype.volume = function volume(percentAsDecimal) {\n          var vol = void 0;\n\n          if (percentAsDecimal !== undefined) {\n            // Force value to between 0 and 1\n            vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));\n            this.cache_.volume = vol;\n            this.techCall_('setVolume', vol);\n            return this;\n          } // Default to 1 when returning current volume.\n\n\n          vol = parseFloat(this.techGet_('volume'));\n          return isNaN(vol) ? 1 : vol;\n        };\n        /**\n        * Get the current muted state, or turn mute on or off\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *     // get, should be false\n        *     console.log(myPlayer.muted());\n        *     // set to true\n        *     myPlayer.muted(true);\n        *     // get should be true\n        *     console.log(myPlayer.muted());\n        *   });\n        * ```\n        *\n        * @param {boolean} [muted]\n        *        - true to mute\n        *        - false to unmute\n        *\n        * @return {boolean|Player}\n        *         - true if mute is on and getting\n        *         - false if mute is off and getting\n        *         - A reference to the current player when setting\n        */\n\n\n        Player.prototype.muted = function muted(_muted) {\n          if (_muted !== undefined) {\n            this.techCall_('setMuted', _muted);\n            return this;\n          }\n\n          return this.techGet_('muted') || false;\n        };\n        /**\n        * Check if current tech can support native fullscreen\n        * (e.g. with built in controls like iOS, so not our flash swf)\n        *\n        * @return {boolean}\n        *         if native fullscreen is supported\n        */\n\n\n        Player.prototype.supportsFullScreen = function supportsFullScreen() {\n          return this.techGet_('supportsFullScreen') || false;\n        };\n        /**\n        * Check if the player is in fullscreen mode or tell the player that it\n        * is or is not in fullscreen mode.\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *     // get, should be false\n        *     console.log(myPlayer.isFullscreen());\n        *\n        *     // set, tell the player it's in fullscreen\n        *     myPlayer.isFullscreen(true);\n        *\n        *     // get, should be true\n        *     console.log(myPlayer.isFullscreen());\n        *   });\n        * ```\n        * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\n        * property and instead document.fullscreenElement is used. But isFullscreen is\n        * still a valuable property for internal player workings.\n        *\n        * @param  {boolean} [isFS]\n        *         Set the players current fullscreen state\n        *\n        * @return {boolean|Player}\n        *         - true if fullscreen is on and getting\n        *         - false if fullscreen is off and getting\n        *         - A reference to the current player when setting\n        */\n\n\n        Player.prototype.isFullscreen = function isFullscreen(isFS) {\n          if (isFS !== undefined) {\n            this.isFullscreen_ = !!isFS;\n            return this;\n          }\n\n          return !!this.isFullscreen_;\n        };\n        /**\n        * Increase the size of the video to full screen\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *     myPlayer.requestFullscreen();\n        *   });\n        * ```\n        * In some browsers, full screen is not supported natively, so it enters\n        * \"full window mode\", where the video fills the browser window.\n        * In browsers and devices that support native full screen, sometimes the\n        * browser's default controls will be shown, and not the Video.js custom skin.\n        * This includes most mobile devices (iOS, Android) and older versions of\n        * Safari.\n        *\n        * @fires Player#fullscreenchange\n        * @return {Player}\n        *         A reference to the current player\n        */\n\n\n        Player.prototype.requestFullscreen = function requestFullscreen() {\n          var fsApi = _fullscreenApi2['default'];\n          this.isFullscreen(true);\n\n          if (fsApi.requestFullscreen) {\n            // the browser supports going fullscreen at the element level so we can\n            // take the controls fullscreen as well as the video\n            // Trigger fullscreenchange event after change\n            // We have to specifically add this each time, and remove\n            // when canceling fullscreen. Otherwise if there's multiple\n            // players on a page, they would all be reacting to the same fullscreen\n            // events\n            Events.on(_document2['default'], fsApi.fullscreenchange, Fn.bind(this, function documentFullscreenChange(e) {\n              this.isFullscreen(_document2['default'][fsApi.fullscreenElement]); // If cancelling fullscreen, remove event listener.\n\n              if (this.isFullscreen() === false) {\n                Events.off(_document2['default'], fsApi.fullscreenchange, documentFullscreenChange);\n              }\n              /**\n              * @event Player#fullscreenchange\n              * @type {EventTarget~Event}\n              */\n\n\n              this.trigger('fullscreenchange');\n            }));\n            this.el_[fsApi.requestFullscreen]();\n          } else if (this.tech_.supportsFullScreen()) {\n            // we can't take the video.js controls fullscreen but we can go fullscreen\n            // with native controls\n            this.techCall_('enterFullScreen');\n          } else {\n            // fullscreen isn't supported so we'll just stretch the video element to\n            // fill the viewport\n            this.enterFullWindow();\n            /**\n            * @event Player#fullscreenchange\n            * @type {EventTarget~Event}\n            */\n\n            this.trigger('fullscreenchange');\n          }\n\n          return this;\n        };\n        /**\n        * Return the video to its normal size after having been in full screen mode\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        *   myPlayer.ready(function() {\n        *     myPlayer.requestFullscreen();\n        *     myPlayer.exitFullscreen();\n        *   });\n        * ```\n        *\n        * @fires Player#fullscreenchange\n        *\n        * @return {Player}\n        *         A reference to the current player\n        */\n\n\n        Player.prototype.exitFullscreen = function exitFullscreen() {\n          var fsApi = _fullscreenApi2['default'];\n          this.isFullscreen(false); // Check for browser element fullscreen support\n\n          if (fsApi.requestFullscreen) {\n            _document2['default'][fsApi.exitFullscreen]();\n          } else if (this.tech_.supportsFullScreen()) {\n            this.techCall_('exitFullScreen');\n          } else {\n            this.exitFullWindow();\n            /**\n            * @event Player#fullscreenchange\n            * @type {EventTarget~Event}\n            */\n\n            this.trigger('fullscreenchange');\n          }\n\n          return this;\n        };\n        /**\n        * When fullscreen isn't supported we can stretch the\n        * video container to as wide as the browser will let us.\n        *\n        * @fires Player#enterFullWindow\n        */\n\n\n        Player.prototype.enterFullWindow = function enterFullWindow() {\n          this.isFullWindow = true; // Storing original doc overflow value to return to when fullscreen is off\n\n          this.docOrigOverflow = _document2['default'].documentElement.style.overflow; // Add listener for esc key to exit fullscreen\n\n          Events.on(_document2['default'], 'keydown', Fn.bind(this, this.fullWindowOnEscKey)); // Hide any scroll bars\n\n          _document2['default'].documentElement.style.overflow = 'hidden'; // Apply fullscreen styles\n\n          Dom.addElClass(_document2['default'].body, 'vjs-full-window');\n          /**\n          * @event Player#enterFullWindow\n          * @type {EventTarget~Event}\n          */\n\n          this.trigger('enterFullWindow');\n        };\n        /**\n        * Check for call to either exit full window or\n        * full screen on ESC key\n        *\n        * @param {string} event\n        *        Event to check for key press\n        */\n\n\n        Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {\n          if (event.keyCode === 27) {\n            if (this.isFullscreen() === true) {\n              this.exitFullscreen();\n            } else {\n              this.exitFullWindow();\n            }\n          }\n        };\n        /**\n        * Exit full window\n        *\n        * @fires Player#exitFullWindow\n        */\n\n\n        Player.prototype.exitFullWindow = function exitFullWindow() {\n          this.isFullWindow = false;\n          Events.off(_document2['default'], 'keydown', this.fullWindowOnEscKey); // Unhide scroll bars.\n\n          _document2['default'].documentElement.style.overflow = this.docOrigOverflow; // Remove fullscreen styles\n\n          Dom.removeElClass(_document2['default'].body, 'vjs-full-window'); // Resize the box, controller, and poster to original sizes\n          // this.positionAll();\n\n          /**\n               * @event Player#exitFullWindow\n               * @type {EventTarget~Event}\n               */\n\n          this.trigger('exitFullWindow');\n        };\n        /**\n        * Check whether the player can play a given mimetype\n        *\n        * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\n        *\n        * @param {string} type\n        *        The mimetype to check\n        *\n        * @return {string}\n        *         'probably', 'maybe', or '' (empty string)\n        */\n\n\n        Player.prototype.canPlayType = function canPlayType(type) {\n          var can = void 0; // Loop through each playback technology in the options order\n\n          for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {\n            var techName = (0, _toTitleCase2['default'])(j[i]);\n\n            var tech = _tech2['default'].getTech(techName); // Support old behavior of techs being registered as components.\n            // Remove once that deprecated behavior is removed.\n\n\n            if (!tech) {\n              tech = _component2['default'].getComponent(techName);\n            } // Check if the current tech is defined before continuing\n\n\n            if (!tech) {\n              _log2['default'].error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n\n              continue;\n            } // Check if the browser supports this technology\n\n\n            if (tech.isSupported()) {\n              can = tech.canPlayType(type);\n\n              if (can) {\n                return can;\n              }\n            }\n          }\n\n          return '';\n        };\n        /**\n        * Select source based on tech-order or source-order\n        * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\n        * defaults to tech-order selection\n        *\n        * @param {Array} sources\n        *        The sources for a media asset\n        *\n        * @return {Object|boolean}\n        *         Object of source and tech order or false\n        */\n\n\n        Player.prototype.selectSource = function selectSource(sources) {\n          var _this4 = this; // Get only the techs specified in `techOrder` that exist and are supported by the\n          // current platform\n\n\n          var techs = this.options_.techOrder.map(_toTitleCase2['default']).map(function (techName) {\n            // `Component.getComponent(...)` is for support of old behavior of techs\n            // being registered as components.\n            // Remove once that deprecated behavior is removed.\n            return [techName, _tech2['default'].getTech(techName) || _component2['default'].getComponent(techName)];\n          }).filter(function (_ref) {\n            var techName = _ref[0],\n                tech = _ref[1]; // Check if the current tech is defined before continuing\n\n            if (tech) {\n              // Check if the browser supports this technology\n              return tech.isSupported();\n            }\n\n            _log2['default'].error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n\n            return false;\n          }); // Iterate over each `innerArray` element once per `outerArray` element and execute\n          // `tester` with both. If `tester` returns a non-falsy value, exit early and return\n          // that value.\n\n          var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {\n            var found = void 0;\n            outerArray.some(function (outerChoice) {\n              return innerArray.some(function (innerChoice) {\n                found = tester(outerChoice, innerChoice);\n\n                if (found) {\n                  return true;\n                }\n              });\n            });\n            return found;\n          };\n\n          var foundSourceAndTech = void 0;\n\n          var flip = function flip(fn) {\n            return function (a, b) {\n              return fn(b, a);\n            };\n          };\n\n          var finder = function finder(_ref2, source) {\n            var techName = _ref2[0],\n                tech = _ref2[1];\n\n            if (tech.canPlaySource(source, _this4.options_[techName.toLowerCase()])) {\n              return {\n                source: source,\n                tech: techName\n              };\n            }\n          }; // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\n          // to select from them based on their priority.\n\n\n          if (this.options_.sourceOrder) {\n            // Source-first ordering\n            foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\n          } else {\n            // Tech-first ordering\n            foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\n          }\n\n          return foundSourceAndTech || false;\n        };\n        /**\n        * The source function updates the video source\n        * There are three types of variables you can pass as the argument.\n        * **URL string**: A URL to the the video file. Use this method if you are sure\n        * the current playback technology (HTML5/Flash) can support the source you\n        * provide. Currently only MP4 files can be used in both HTML5 and Flash.\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n        * ```\n        *\n        * **Source Object (or element):* * A javascript object containing information\n        * about the source file. Use this method if you want the player to determine if\n        * it can support the file using the type information.\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src({type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\"});\n        * ```\n        *\n        * **Array of Source Objects:* * To provide multiple versions of the source so\n        * that it can be played using HTML5 across browsers you can use an array of\n        * source objects. Video.js will detect which version is supported and load that\n        * file.\n        *\n        * ```js\n        *   var myPlayer = videojs('some-player-id');\n        *\n        *   myPlayer.src([\n        *     {type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\"},\n        *     {type: \"video/webm\", src: \"http://www.example.com/path/to/video.webm\"},\n        *     {type: \"video/ogg\", src: \"http://www.example.com/path/to/video.ogv\"}\n        *   ]);\n        * ```\n        *\n        * @param {Tech~SourceObject|Tech~SourceObject[]} [source]\n        *        One SourceObject or an array of SourceObjects\n        *\n        * @return {string|Player}\n        *         - The current video source when getting\n        *         - The player when setting\n        */\n\n\n        Player.prototype.src = function src(source) {\n          if (source === undefined) {\n            return this.techGet_('src');\n          }\n\n          var currentTech = _tech2['default'].getTech(this.techName_); // Support old behavior of techs being registered as components.\n          // Remove once that deprecated behavior is removed.\n\n\n          if (!currentTech) {\n            currentTech = _component2['default'].getComponent(this.techName_);\n          } // case: Array of source objects to choose from and pick the best to play\n\n\n          if (Array.isArray(source)) {\n            this.sourceList_(source); // case: URL String (http://myvideo...)\n          } else if (typeof source === 'string') {\n            // create a source object from the string\n            this.src({\n              src: source\n            }); // case: Source object { src: '', type: '' ... }\n          } else if (source instanceof Object) {\n            // check if the source has a type and the loaded tech cannot play the source\n            // if there's no type we'll just try the current tech\n            if (source.type && !currentTech.canPlaySource(source, this.options_[this.techName_.toLowerCase()])) {\n              // create a source list with the current source and send through\n              // the tech loop to check for a compatible technology\n              this.sourceList_([source]);\n            } else {\n              this.cache_.sources = null;\n              this.cache_.source = source;\n              this.cache_.src = source.src;\n              this.currentType_ = source.type || ''; // wait until the tech is ready to set the source\n\n              this.ready(function () {\n                // The setSource tech method was added with source handlers\n                // so older techs won't support it\n                // We need to check the direct prototype for the case where subclasses\n                // of the tech do not support source handlers\n                if (currentTech.prototype.hasOwnProperty('setSource')) {\n                  this.techCall_('setSource', source);\n                } else {\n                  this.techCall_('src', source.src);\n                }\n\n                if (this.options_.preload === 'auto') {\n                  this.load();\n                }\n\n                if (this.options_.autoplay) {\n                  this.play();\n                } // Set the source synchronously if possible (#2326)\n\n              }, true);\n            }\n          }\n\n          return this;\n        };\n        /**\n        * Handle an array of source objects\n        *\n        * @param  {Tech~SourceObject[]} sources\n        *         Array of source objects\n        *\n        * @private\n        */\n\n\n        Player.prototype.sourceList_ = function sourceList_(sources) {\n          var sourceTech = this.selectSource(sources);\n\n          if (sourceTech) {\n            if (sourceTech.tech === this.techName_) {\n              // if this technology is already loaded, set the source\n              this.src(sourceTech.source);\n            } else {\n              // load this technology with the chosen source\n              this.loadTech_(sourceTech.tech, sourceTech.source);\n            }\n\n            this.cache_.sources = sources;\n          } else {\n            // We need to wrap this in a timeout to give folks a chance to add error event handlers\n            this.setTimeout(function () {\n              this.error({\n                code: 4,\n                message: this.localize(this.options_.notSupportedMessage)\n              });\n            }, 0); // we could not find an appropriate tech, but let's still notify the delegate that this is it\n            // this needs a better comment about why this is needed\n\n            this.triggerReady();\n          }\n        };\n        /**\n        * Begin loading the src data.\n        *\n        * @return {Player}\n        *         A reference to the player\n        */\n\n\n        Player.prototype.load = function load() {\n          this.techCall_('load');\n          return this;\n        };\n        /**\n        * Reset the player. Loads the first tech in the techOrder,\n        * and calls `reset` on the tech`.\n        *\n        * @return {Player}\n        *         A reference to the player\n        */\n\n\n        Player.prototype.reset = function reset() {\n          this.loadTech_((0, _toTitleCase2['default'])(this.options_.techOrder[0]), null);\n          this.techCall_('reset');\n          return this;\n        };\n        /**\n        * Returns all of the current source objects.\n        *\n        * @return {Tech~SourceObject[]}\n        *         The current source objects\n        */\n\n\n        Player.prototype.currentSources = function currentSources() {\n          var source = this.currentSource();\n          var sources = []; // assume `{}` or `{ src }`\n\n          if (Object.keys(source).length !== 0) {\n            sources.push(source);\n          }\n\n          return this.cache_.sources || sources;\n        };\n        /**\n        * Returns the current source object.\n        *\n        * @return {Tech~SourceObject}\n        *         The current source object\n        */\n\n\n        Player.prototype.currentSource = function currentSource() {\n          var source = {};\n          var src = this.currentSrc();\n\n          if (src) {\n            source.src = src;\n          }\n\n          return this.cache_.source || source;\n        };\n        /**\n        * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\n        * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.\n        *\n        * @return {string}\n        *         The current source\n        */\n\n\n        Player.prototype.currentSrc = function currentSrc() {\n          return this.techGet_('currentSrc') || this.cache_.src || '';\n        };\n        /**\n        * Get the current source type e.g. video/mp4\n        * This can allow you rebuild the current source object so that you could load the same\n        * source and tech later\n        *\n        * @return {string}\n        *         The source MIME type\n        */\n\n\n        Player.prototype.currentType = function currentType() {\n          return this.currentType_ || '';\n        };\n        /**\n        * Get or set the preload attribute\n        *\n        * @param {boolean} [value]\n        *        - true means that we should preload\n        *        - false maens that we should not preload\n        *\n        * @return {string|Player}\n        *         - the preload attribute value when getting\n        *         - the player when setting\n        */\n\n\n        Player.prototype.preload = function preload(value) {\n          if (value !== undefined) {\n            this.techCall_('setPreload', value);\n            this.options_.preload = value;\n            return this;\n          }\n\n          return this.techGet_('preload');\n        };\n        /**\n        * Get or set the autoplay attribute.\n        *\n        * @param {boolean} [value]\n        *        - true means that we should autoplay\n        *        - false maens that we should not autoplay\n        *\n        * @return {string|Player}\n        *         - the current value of autoplay\n        *         - the player when setting\n        */\n\n\n        Player.prototype.autoplay = function autoplay(value) {\n          if (value !== undefined) {\n            this.techCall_('setAutoplay', value);\n            this.options_.autoplay = value;\n            return this;\n          }\n\n          return this.techGet_('autoplay', value);\n        };\n        /**\n        * Get or set the loop attribute on the video element.\n        *\n        * @param {boolean} [value]\n        *        - true means that we should loop the video\n        *        - false means that we should not loop the video\n        *\n        * @return {string|Player}\n        *         - the current value of loop when getting\n        *         - the player when setting\n        */\n\n\n        Player.prototype.loop = function loop(value) {\n          if (value !== undefined) {\n            this.techCall_('setLoop', value);\n            this.options_.loop = value;\n            return this;\n          }\n\n          return this.techGet_('loop');\n        };\n        /**\n        * Get or set the poster image source url\n        *\n        * EXAMPLE\n        * ```js\n        *   var myPlayer = videojs('example_video_1');\n        *\n        *   // set\n        *   myPlayer.poster('http://example.com/myImage.jpg');\n        *\n        *   // get\n        *   console.log(myPlayer.poster());\n        *   // 'http://example.com/myImage.jpg'\n        * ```\n        *\n        * @fires Player#posterchange\n        *\n        * @param {string} [src]\n        *        Poster image source URL\n        *\n        * @return {string|Player}\n        *         - the current value of poster when getting\n        *         - the player when setting\n        */\n\n\n        Player.prototype.poster = function poster(src) {\n          if (src === undefined) {\n            return this.poster_;\n          } // The correct way to remove a poster is to set as an empty string\n          // other falsey values will throw errors\n\n\n          if (!src) {\n            src = '';\n          } // update the internal poster variable\n\n\n          this.poster_ = src; // update the tech's poster\n\n          this.techCall_('setPoster', src); // alert components that the poster has been set\n\n          /**\n               * This event fires when the poster image is changed on the player.\n               *\n               * @event Player#posterchange\n               * @type {EventTarget~Event}\n               */\n\n          this.trigger('posterchange');\n          return this;\n        };\n        /**\n        * Some techs (e.g. YouTube) can provide a poster source in an\n        * asynchronous way. We want the poster component to use this\n        * poster source so that it covers up the tech's controls.\n        * (YouTube's play button). However we only want to use this\n        * soruce if the player user hasn't set a poster through\n        * the normal APIs.\n        *\n        * @fires Player#posterchange\n        * @listens Tech#posterchange\n        * @private\n        */\n\n\n        Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {\n          if (!this.poster_ && this.tech_ && this.tech_.poster) {\n            this.poster_ = this.tech_.poster() || ''; // Let components know the poster has changed\n\n            this.trigger('posterchange');\n          }\n        };\n        /**\n        * Get or set whether or not the controls are showing.\n        *\n        * @fires Player#controlsenabled\n        *\n        * @param {boolean} [bool]\n        *        - true to turn controls on\n        *        - false to turn controls off\n        *\n        * @return {boolean|Player}\n        *         - the current value of controls when getting\n        *         - the player when setting\n        */\n\n\n        Player.prototype.controls = function controls(bool) {\n          if (bool !== undefined) {\n            bool = !!bool; // Don't trigger a change event unless it actually changed\n\n            if (this.controls_ !== bool) {\n              this.controls_ = bool;\n\n              if (this.usingNativeControls()) {\n                this.techCall_('setControls', bool);\n              }\n\n              if (bool) {\n                this.removeClass('vjs-controls-disabled');\n                this.addClass('vjs-controls-enabled');\n                /**\n                * @event Player#controlsenabled\n                * @type {EventTarget~Event}\n                */\n\n                this.trigger('controlsenabled');\n\n                if (!this.usingNativeControls()) {\n                  this.addTechControlsListeners_();\n                }\n              } else {\n                this.removeClass('vjs-controls-enabled');\n                this.addClass('vjs-controls-disabled');\n                /**\n                * @event Player#controlsdisabled\n                * @type {EventTarget~Event}\n                */\n\n                this.trigger('controlsdisabled');\n\n                if (!this.usingNativeControls()) {\n                  this.removeTechControlsListeners_();\n                }\n              }\n            }\n\n            return this;\n          }\n\n          return !!this.controls_;\n        };\n        /**\n        * Toggle native controls on/off. Native controls are the controls built into\n        * devices (e.g. default iPhone controls), Flash, or other techs\n        * (e.g. Vimeo Controls)\n        * **This should only be set by the current tech, because only the tech knows\n        * if it can support native controls**\n        *\n        * @fires Player#usingnativecontrols\n        * @fires Player#usingcustomcontrols\n        *\n        * @param {boolean} [bool]\n        *        - true to turn native controls on\n        *        - false to turn native controls off\n        *\n        * @return {boolean|Player}\n        *         - the current value of native controls when getting\n        *         - the player when setting\n        */\n\n\n        Player.prototype.usingNativeControls = function usingNativeControls(bool) {\n          if (bool !== undefined) {\n            bool = !!bool; // Don't trigger a change event unless it actually changed\n\n            if (this.usingNativeControls_ !== bool) {\n              this.usingNativeControls_ = bool;\n\n              if (bool) {\n                this.addClass('vjs-using-native-controls');\n                /**\n                * player is using the native device controls\n                *\n                * @event Player#usingnativecontrols\n                * @type {EventTarget~Event}\n                */\n\n                this.trigger('usingnativecontrols');\n              } else {\n                this.removeClass('vjs-using-native-controls');\n                /**\n                * player is using the custom HTML controls\n                *\n                * @event Player#usingcustomcontrols\n                * @type {EventTarget~Event}\n                */\n\n                this.trigger('usingcustomcontrols');\n              }\n            }\n\n            return this;\n          }\n\n          return !!this.usingNativeControls_;\n        };\n        /**\n        * Set or get the current MediaError\n        *\n        * @fires Player#error\n        *\n        * @param  {MediaError|string|number} [err]\n        *         A MediaError or a string/number to be turned\n        *         into a MediaError\n        *\n        * @return {MediaError|null|Player}\n        *         - The current MediaError when getting (or null)\n        *         - The player when setting\n        */\n\n\n        Player.prototype.error = function error(err) {\n          if (err === undefined) {\n            return this.error_ || null;\n          } // restoring to default\n\n\n          if (err === null) {\n            this.error_ = err;\n            this.removeClass('vjs-error');\n\n            if (this.errorDisplay) {\n              this.errorDisplay.close();\n            }\n\n            return this;\n          }\n\n          this.error_ = new _mediaError2['default'](err); // add the vjs-error classname to the player\n\n          this.addClass('vjs-error'); // log the name of the error type and any message\n          // ie8 just logs \"[object object]\" if you just log the error object\n\n          _log2['default'].error('(CODE:' + this.error_.code + ' ' + _mediaError2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);\n          /**\n          * @event Player#error\n          * @type {EventTarget~Event}\n          */\n\n\n          this.trigger('error');\n          return this;\n        };\n        /**\n        * Report user activity\n        *\n        * @param {Object} event\n        *        Event object\n        */\n\n\n        Player.prototype.reportUserActivity = function reportUserActivity(event) {\n          this.userActivity_ = true;\n        };\n        /**\n        * Get/set if user is active\n        *\n        * @fires Player#useractive\n        * @fires Player#userinactive\n        *\n        * @param {boolean} [bool]\n        *        - true if the user is active\n        *        - false if the user is inactive\n        * @return {boolean|Player}\n        *         - the current value of userActive when getting\n        *         - the player when setting\n        */\n\n\n        Player.prototype.userActive = function userActive(bool) {\n          if (bool !== undefined) {\n            bool = !!bool;\n\n            if (bool !== this.userActive_) {\n              this.userActive_ = bool;\n\n              if (bool) {\n                // If the user was inactive and is now active we want to reset the\n                // inactivity timer\n                this.userActivity_ = true;\n                this.removeClass('vjs-user-inactive');\n                this.addClass('vjs-user-active');\n                /**\n                * @event Player#useractive\n                * @type {EventTarget~Event}\n                */\n\n                this.trigger('useractive');\n              } else {\n                // We're switching the state to inactive manually, so erase any other\n                // activity\n                this.userActivity_ = false; // Chrome/Safari/IE have bugs where when you change the cursor it can\n                // trigger a mousemove event. This causes an issue when you're hiding\n                // the cursor when the user is inactive, and a mousemove signals user\n                // activity. Making it impossible to go into inactive mode. Specifically\n                // this happens in fullscreen when we really need to hide the cursor.\n                //\n                // When this gets resolved in ALL browsers it can be removed\n                // https://code.google.com/p/chromium/issues/detail?id=103041\n\n                if (this.tech_) {\n                  this.tech_.one('mousemove', function (e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                  });\n                }\n\n                this.removeClass('vjs-user-active');\n                this.addClass('vjs-user-inactive');\n                /**\n                * @event Player#userinactive\n                * @type {EventTarget~Event}\n                */\n\n                this.trigger('userinactive');\n              }\n            }\n\n            return this;\n          }\n\n          return this.userActive_;\n        };\n        /**\n        * Listen for user activity based on timeout value\n        *\n        * @private\n        */\n\n\n        Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {\n          var mouseInProgress = void 0;\n          var lastMoveX = void 0;\n          var lastMoveY = void 0;\n          var handleActivity = Fn.bind(this, this.reportUserActivity);\n\n          var handleMouseMove = function handleMouseMove(e) {\n            // #1068 - Prevent mousemove spamming\n            // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\n            if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\n              lastMoveX = e.screenX;\n              lastMoveY = e.screenY;\n              handleActivity();\n            }\n          };\n\n          var handleMouseDown = function handleMouseDown() {\n            handleActivity(); // For as long as the they are touching the device or have their mouse down,\n            // we consider them active even if they're not moving their finger or mouse.\n            // So we want to continue to update that they are active\n\n            this.clearInterval(mouseInProgress); // Setting userActivity=true now and setting the interval to the same time\n            // as the activityCheck interval (250) should ensure we never miss the\n            // next activityCheck\n\n            mouseInProgress = this.setInterval(handleActivity, 250);\n          };\n\n          var handleMouseUp = function handleMouseUp(event) {\n            handleActivity(); // Stop the interval that maintains activity if the mouse/touch is down\n\n            this.clearInterval(mouseInProgress);\n          }; // Any mouse movement will be considered user activity\n\n\n          this.on('mousedown', handleMouseDown);\n          this.on('mousemove', handleMouseMove);\n          this.on('mouseup', handleMouseUp); // Listen for keyboard navigation\n          // Shouldn't need to use inProgress interval because of key repeat\n\n          this.on('keydown', handleActivity);\n          this.on('keyup', handleActivity); // Run an interval every 250 milliseconds instead of stuffing everything into\n          // the mousemove/touchmove function itself, to prevent performance degradation.\n          // `this.reportUserActivity` simply sets this.userActivity_ to true, which\n          // then gets picked up by this loop\n          // http://ejohn.org/blog/learning-from-twitter/\n\n          var inactivityTimeout = void 0;\n          this.setInterval(function () {\n            // Check to see if mouse/touch activity has happened\n            if (this.userActivity_) {\n              // Reset the activity tracker\n              this.userActivity_ = false; // If the user state was inactive, set the state to active\n\n              this.userActive(true); // Clear any existing inactivity timeout to start the timer over\n\n              this.clearTimeout(inactivityTimeout);\n              var timeout = this.options_.inactivityTimeout;\n\n              if (timeout > 0) {\n                // In <timeout> milliseconds, if no more activity has occurred the\n                // user will be considered inactive\n                inactivityTimeout = this.setTimeout(function () {\n                  // Protect against the case where the inactivityTimeout can trigger just\n                  // before the next user activity is picked up by the activity check loop\n                  // causing a flicker\n                  if (!this.userActivity_) {\n                    this.userActive(false);\n                  }\n                }, timeout);\n              }\n            }\n          }, 250);\n        };\n        /**\n        * Gets or sets the current playback rate. A playback rate of\n        * 1.0 represents normal speed and 0.5 would indicate half-speed\n        * playback, for instance.\n        *\n        * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\n        *\n        * @param {number} [rate]\n        *       New playback rate to set.\n        *\n        * @return {number|Player}\n        *         - The current playback rate when getting or 1.0\n        *         - the player when setting\n        */\n\n\n        Player.prototype.playbackRate = function playbackRate(rate) {\n          if (rate !== undefined) {\n            this.techCall_('setPlaybackRate', rate);\n            return this;\n          }\n\n          if (this.tech_ && this.tech_.featuresPlaybackRate) {\n            return this.techGet_('playbackRate');\n          }\n\n          return 1.0;\n        };\n        /**\n        * Gets or sets the audio flag\n        *\n        * @param {boolean} bool\n        *        - true signals that this is an audio player\n        *        - false signals that this is not an audio player\n        *\n        * @return {Player|boolean}\n        *         - the current value of isAudio when getting\n        *         - the player if setting\n        */\n\n\n        Player.prototype.isAudio = function isAudio(bool) {\n          if (bool !== undefined) {\n            this.isAudio_ = !!bool;\n            return this;\n          }\n\n          return !!this.isAudio_;\n        };\n        /**\n        * Get the {@link VideoTrackList}\n        *\n        * @see https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\n        *\n        * @return {VideoTrackList}\n        *         the current video track list\n        */\n\n\n        Player.prototype.videoTracks = function videoTracks() {\n          // if we have not yet loadTech_, we create videoTracks_\n          // these will be passed to the tech during loading\n          if (!this.tech_) {\n            this.videoTracks_ = this.videoTracks_ || new _videoTrackList2['default']();\n            return this.videoTracks_;\n          }\n\n          return this.tech_.videoTracks();\n        };\n        /**\n        * Get the {@link AudioTrackList}\n        *\n        * @see https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\n        *\n        * @return {AudioTrackList}\n        *         the current audio track list\n        */\n\n\n        Player.prototype.audioTracks = function audioTracks() {\n          // if we have not yet loadTech_, we create videoTracks_\n          // these will be passed to the tech during loading\n          if (!this.tech_) {\n            this.audioTracks_ = this.audioTracks_ || new _audioTrackList2['default']();\n            return this.audioTracks_;\n          }\n\n          return this.tech_.audioTracks();\n        };\n        /**\n        * Get the {@link TextTrackList}\n        *\n        * Text tracks are tracks of timed text events.\n        * - Captions: text displayed over the video\n        *             for the hearing impaired\n        * - Subtitles: text displayed over the video for\n        *              those who don't understand language in the video\n        * - Chapters: text displayed in a menu allowing the user to jump\n        *             to particular points (chapters) in the video\n        * - Descriptions: (not yet implemented) audio descriptions that are read back to\n        *                 the user by a screen reading device\n        *\n        * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\n        *\n        * @return {TextTrackList|undefined}\n        *         The current TextTrackList or undefined if\n        *         or undefined if we don't have a tech\n        */\n\n\n        Player.prototype.textTracks = function textTracks() {\n          // cannot use techGet_ directly because it checks to see whether the tech is ready.\n          // Flash is unlikely to be ready in time but textTracks should still work.\n          if (this.tech_) {\n            return this.tech_.textTracks();\n          }\n        };\n        /**\n        * Get the \"remote\" {@link TextTrackList}. Remote Text Tracks\n        * are tracks that were added to the HTML video element and can\n        * be removed, whereas normal texttracks cannot be removed.\n        *\n        *\n        * @return {TextTrackList|undefined}\n        *         The current remote text track list or undefined\n        *         if we don't have a tech\n        */\n\n\n        Player.prototype.remoteTextTracks = function remoteTextTracks() {\n          if (this.tech_) {\n            return this.tech_.remoteTextTracks();\n          }\n        };\n        /**\n        * Get the \"remote\" {@link HTMLTrackElementList}.\n        * This gives the user all of the DOM elements that match up\n        * with the remote {@link TextTrackList}.\n        *\n        * @return {HTMLTrackElementList}\n        *         The current remote text track list elements\n        *         or undefined if we don't have a tech\n        */\n\n\n        Player.prototype.remoteTextTrackEls = function remoteTextTrackEls() {\n          if (this.tech_) {\n            return this.tech_.remoteTextTrackEls();\n          }\n        };\n        /**\n        * A helper method for adding a {@link TextTrack} to our\n        * {@link TextTrackList}.\n        *\n        * In addition to the W3C settings we allow adding additional info through options.\n        *\n        * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\n        *\n        * @param {string} [kind]\n        *        the kind of TextTrack you are adding\n        *\n        * @param {string} [label]\n        *        the label to give the TextTrack label\n        *\n        * @param {string} [language]\n        *        the language to set on the TextTrack\n        *\n        * @return {TextTrack|undefined}\n        *         the TextTrack that was added or undefined\n        *         if there is no tech\n        */\n\n\n        Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n          if (this.tech_) {\n            return this.tech_.addTextTrack(kind, label, language);\n          }\n        };\n        /**\n        * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will\n        * automatically removed from the video element whenever the source changes, unless\n        * manualCleanup is set to false.\n        *\n        * @param {Object} options\n        *        Options to pass to {@link HTMLTrackElement} during creation. See\n        *        {@link HTMLTrackElement} for object properties that you should use.\n        *\n        * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be\n        *\n        * @return {HTMLTrackElement}\n        *         the HTMLTrackElement that was created and added\n        *         to the HTMLTrackElementList and the remote\n        *         TextTrackList\n        *\n        * @deprecated The default value of the \"manualCleanup\" parameter will default\n        *             to \"false\" in upcoming versions of Video.js\n        */\n\n\n        Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n          if (this.tech_) {\n            return this.tech_.addRemoteTextTrack(options, manualCleanup);\n          }\n        };\n        /**\n        * Remove a remote {@link TextTrack} from the respective\n        * {@link TextTrackList} and {@link HTMLTrackElementList}.\n        *\n        * @param {Object} track\n        *        Remote {@link TextTrack} to remove\n        *\n        * @return {undefined}\n        *         does not return anything\n        */\n\n\n        Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {\n          var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n              _ref3$track = _ref3.track,\n              track = _ref3$track === undefined ? arguments[0] : _ref3$track; // destructure the input into an object with a track argument, defaulting to arguments[0]\n          // default the whole argument to an empty object if nothing was passed in\n\n\n          if (this.tech_) {\n            return this.tech_.removeRemoteTextTrack(track);\n          }\n        };\n        /**\n        * Get video width\n        *\n        * @return {number}\n        *         current video width\n        */\n\n\n        Player.prototype.videoWidth = function videoWidth() {\n          return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\n        };\n        /**\n        * Get video height\n        *\n        * @return {number}\n        *         current video height\n        */\n\n\n        Player.prototype.videoHeight = function videoHeight() {\n          return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\n        }; // Methods to add support for\n        // initialTime: function() { return this.techCall_('initialTime'); },\n        // startOffsetTime: function() { return this.techCall_('startOffsetTime'); },\n        // played: function() { return this.techCall_('played'); },\n        // defaultPlaybackRate: function() { return this.techCall_('defaultPlaybackRate'); },\n        // defaultMuted: function() { return this.techCall_('defaultMuted'); }\n\n        /**\n           * The player's language code\n           * NOTE: The language should be set in the player options if you want the\n           * the controls to be built with a specific language. Changing the lanugage\n           * later will not update controls text.\n           *\n           * @param {string} [code]\n           *        the language code to set the player to\n           *\n           * @return {string|Player}\n           *         - The current language code when getting\n           *         - A reference to the player when setting\n           */\n\n\n        Player.prototype.language = function language(code) {\n          if (code === undefined) {\n            return this.language_;\n          }\n\n          this.language_ = String(code).toLowerCase();\n          return this;\n        };\n        /**\n        * Get the player's language dictionary\n        * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\n        * Languages specified directly in the player options have precedence\n        *\n        * @return {Array}\n        *         An array of of supported languages\n        */\n\n\n        Player.prototype.languages = function languages() {\n          return (0, _mergeOptions2['default'])(Player.prototype.options_.languages, this.languages_);\n        };\n        /**\n        * returns a JavaScript object reperesenting the current track\n        * information. **DOES not return it as JSON**\n        *\n        * @return {Object}\n        *         Object representing the current of track info\n        */\n\n\n        Player.prototype.toJSON = function toJSON() {\n          var options = (0, _mergeOptions2['default'])(this.options_);\n          var tracks = options.tracks;\n          options.tracks = [];\n\n          for (var i = 0; i < tracks.length; i++) {\n            var track = tracks[i]; // deep merge tracks and null out player so no circular references\n\n            track = (0, _mergeOptions2['default'])(track);\n            track.player = undefined;\n            options.tracks[i] = track;\n          }\n\n          return options;\n        };\n        /**\n        * Creates a simple modal dialog (an instance of the {@link ModalDialog}\n        * component) that immediately overlays the player with arbitrary\n        * content and removes itself when closed.\n        *\n        * @param {string|Function|Element|Array|null} content\n        *        Same as {@link ModalDialog#content}'s param of the same name.\n        *        The most straight-forward usage is to provide a string or DOM\n        *        element.\n        *\n        * @param {Object} [options]\n        *        Extra options which will be passed on to the {@link ModalDialog}.\n        *\n        * @return {ModalDialog}\n        *         the {@link ModalDialog} that was created\n        */\n\n\n        Player.prototype.createModal = function createModal(content, options) {\n          var _this5 = this;\n\n          options = options || {};\n          options.content = content || '';\n          var modal = new _modalDialog2['default'](this, options);\n          this.addChild(modal);\n          modal.on('dispose', function () {\n            _this5.removeChild(modal);\n          });\n          return modal.open();\n        };\n        /**\n        * Gets tag settings\n        *\n        * @param {Element} tag\n        *        The player tag\n        *\n        * @return {Object}\n        *         An object containing all of the settings\n        *         for a player tag\n        */\n\n\n        Player.getTagSettings = function getTagSettings(tag) {\n          var baseOptions = {\n            sources: [],\n            tracks: []\n          };\n          var tagOptions = Dom.getElAttributes(tag);\n          var dataSetup = tagOptions['data-setup'];\n\n          if (Dom.hasElClass(tag, 'vjs-fluid')) {\n            tagOptions.fluid = true;\n          } // Check if data-setup attr exists.\n\n\n          if (dataSetup !== null) {\n            // Parse options JSON\n            // If empty string, make it a parsable json object.\n            var _safeParseTuple = (0, _tuple2['default'])(dataSetup || '{}'),\n                err = _safeParseTuple[0],\n                data = _safeParseTuple[1];\n\n            if (err) {\n              _log2['default'].error(err);\n            }\n\n            (0, _obj.assign)(tagOptions, data);\n          }\n\n          (0, _obj.assign)(baseOptions, tagOptions); // Get tag children settings\n\n          if (tag.hasChildNodes()) {\n            var children = tag.childNodes;\n\n            for (var i = 0, j = children.length; i < j; i++) {\n              var child = children[i]; // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\n\n              var childName = child.nodeName.toLowerCase();\n\n              if (childName === 'source') {\n                baseOptions.sources.push(Dom.getElAttributes(child));\n              } else if (childName === 'track') {\n                baseOptions.tracks.push(Dom.getElAttributes(child));\n              }\n            }\n          }\n\n          return baseOptions;\n        };\n        /**\n        * Determine wether or not flexbox is supported\n        *\n        * @return {boolean}\n        *         - true if flexbox is supported\n        *         - false if flexbox is not supported\n        */\n\n\n        Player.prototype.flexNotSupported_ = function flexNotSupported_() {\n          var elem = _document2['default'].createElement('i'); // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more\n          // common flex features that we can rely on when checking for flex support.\n\n\n          return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style || // IE10-specific (2012 flex spec)\n          'msFlexOrder' in elem.style);\n        };\n\n        return Player;\n      }(_component2['default']);\n      /**\n      * Global player list\n      *\n      * @type {Object}\n      */\n\n\n      Player.players = {};\n      var navigator = _window2['default'].navigator;\n      /*\n      * Player instance options, surfaced using options\n      * options = Player.prototype.options_\n      * Make changes in options, not here.\n      *\n      * @type {Object}\n      * @private\n      */\n\n      Player.prototype.options_ = {\n        // Default order of fallback technology\n        techOrder: ['html5', 'flash'],\n        // techOrder: ['flash','html5'],\n        html5: {},\n        flash: {},\n        // defaultVolume: 0.85,\n        defaultVolume: 0.00,\n        // default inactivity timeout\n        inactivityTimeout: 2000,\n        // default playback rates\n        playbackRates: [],\n        // Add playback rate selection by adding rates\n        // 'playbackRates': [0.5, 1, 1.5, 2],\n        // Included control sets\n        children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],\n        language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\n        // locales and their language translations\n        languages: {},\n        // Default message to show when a video cannot be played.\n        notSupportedMessage: 'No compatible source was found for this media.'\n      };\n      [\n      /**\n      * Returns whether or not the player is in the \"ended\" state.\n      *\n      * @return {Boolean} True if the player is in the ended state, false if not.\n      * @method Player.prototype.ended\n      */\n      'ended',\n      /**\n      * Returns whether or not the player is in the \"seeking\" state.\n      *\n      * @return {Boolean} True if the player is in the seeking state, false if not.\n      * @method Player.prototype.seeking\n      */\n      'seeking',\n      /**\n      * Returns the TimeRanges of the media that are currently available\n      * for seeking to.\n      *\n      * @return {TimeRanges} the seekable intervals of the media timeline\n      * @method Player.prototype.seekable\n      */\n      'seekable',\n      /**\n      * Returns the current state of network activity for the element, from\n      * the codes in the list below.\n      * - NETWORK_EMPTY (numeric value 0)\n      *   The element has not yet been initialised. All attributes are in\n      *   their initial states.\n      * - NETWORK_IDLE (numeric value 1)\n      *   The element's resource selection algorithm is active and has\n      *   selected a resource, but it is not actually using the network at\n      *   this time.\n      * - NETWORK_LOADING (numeric value 2)\n      *   The user agent is actively trying to download data.\n      * - NETWORK_NO_SOURCE (numeric value 3)\n      *   The element's resource selection algorithm is active, but it has\n      *   not yet found a resource to use.\n      *\n      * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\n      * @return {number} the current network activity state\n      * @method Player.prototype.networkState\n      */\n      'networkState',\n      /**\n      * Returns a value that expresses the current state of the element\n      * with respect to rendering the current playback position, from the\n      * codes in the list below.\n      * - HAVE_NOTHING (numeric value 0)\n      *   No information regarding the media resource is available.\n      * - HAVE_METADATA (numeric value 1)\n      *   Enough of the resource has been obtained that the duration of the\n      *   resource is available.\n      * - HAVE_CURRENT_DATA (numeric value 2)\n      *   Data for the immediate current playback position is available.\n      * - HAVE_FUTURE_DATA (numeric value 3)\n      *   Data for the immediate current playback position is available, as\n      *   well as enough data for the user agent to advance the current\n      *   playback position in the direction of playback.\n      * - HAVE_ENOUGH_DATA (numeric value 4)\n      *   The user agent estimates that enough data is available for\n      *   playback to proceed uninterrupted.\n      *\n      * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\n      * @return {number} the current playback rendering state\n      * @method Player.prototype.readyState\n      */\n      'readyState'].forEach(function (fn) {\n        Player.prototype[fn] = function () {\n          return this.techGet_(fn);\n        };\n      });\n      TECH_EVENTS_RETRIGGER.forEach(function (event) {\n        Player.prototype['handleTech' + (0, _toTitleCase2['default'])(event) + '_'] = function () {\n          return this.trigger(event);\n        };\n      });\n      /**\n      * Fired when the player has initial duration and dimension information\n      *\n      * @event Player#loadedmetadata\n      * @type {EventTarget~Event}\n      */\n\n      /**\n      * Fired when the player has downloaded data at the current playback position\n      *\n      * @event Player#loadeddata\n      * @type {EventTarget~Event}\n      */\n\n      /**\n      * Fired when the current playback position has changed *\n      * During playback this is fired every 15-250 milliseconds, depending on the\n      * playback technology in use.\n      *\n      * @event Player#timeupdate\n      * @type {EventTarget~Event}\n      */\n\n      /**\n      * Fired when the volume changes\n      *\n      * @event Player#volumechange\n      * @type {EventTarget~Event}\n      */\n\n      _component2['default'].registerComponent('Player', Player);\n\n      exports['default'] = Player;\n      /***/\n    },\n    /* 22 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.createTimeRange = undefined;\n      exports.createTimeRanges = createTimeRanges;\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n      /**\n       * Returns the time for the specified index at the start or end\n       * of a TimeRange object.\n       *\n       * @function time-ranges:indexFunction\n       *\n       * @param {number} [index=0]\n       *        The range number to return the time for.\n       *\n       * @return {number}\n       *         The time that offset at the specified index.\n       *\n       * @depricated index must be set to a value, in the future this will throw an error.\n       */\n\n      /**\n       * An object that contains ranges of time for various reasons.\n       *\n       * @typedef {Object} TimeRange\n       *\n       * @property {number} length\n       *           The number of time ranges represented by this Object\n       *\n       * @property {time-ranges:indexFunction} start\n       *           Returns the time offset at which a specified time range begins.\n       *\n       * @property {time-ranges:indexFunction} end\n       *           Returns the time offset at which a specified time range begins.\n       *\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges\n       */\n\n      /**\n       * Check if any of the time ranges are over the maximum index.\n       *\n       * @param {string} fnName\n       *        The function name to use for logging\n       *\n       * @param {number} index\n       *        The index to check\n       *\n       * @param {number} maxIndex\n       *        The maximum possible index\n       *\n       * @throws {Error} if the timeRanges provided are over the maxIndex\n       */\n\n\n      function rangeCheck(fnName, index, maxIndex) {\n        if (index < 0 || index > maxIndex) {\n          throw new Error('Failed to execute \\'' + fnName + '\\' on \\'TimeRanges\\': The index provided (' + index + ') is greater than or equal to the maximum bound (' + maxIndex + ').');\n        }\n      }\n      /**\n       * Check if any of the time ranges are over the maximum index.\n       *\n       * @param {string} fnName\n       *        The function name to use for logging\n       *\n       * @param {string} valueIndex\n       *        The proprety that should be used to get the time. should be 'start' or 'end'\n       *\n       * @param {Array} ranges\n       *        An array of time ranges\n       *\n       * @param {Array} [rangeIndex=0]\n       *        The index to start the search at\n       *\n       * @return {number}\n       *         The time that offset at the specified index.\n       *\n       *\n       * @depricated rangeIndex must be set to a value, in the future this will throw an error.\n       * @throws {Error} if rangeIndex is more than the length of ranges\n       */\n\n      /**\n       * @file time-ranges.js\n       * @module time-ranges\n       */\n\n\n      function getRange(fnName, valueIndex, ranges, rangeIndex) {\n        if (rangeIndex === undefined) {\n          _log2['default'].warn('DEPRECATED: Function \\'' + fnName + '\\' on \\'TimeRanges\\' called without an index argument.');\n\n          rangeIndex = 0;\n        }\n\n        rangeCheck(fnName, rangeIndex, ranges.length - 1);\n        return ranges[rangeIndex][valueIndex];\n      }\n      /**\n       * Create a time range object givent ranges of time.\n       *\n       * @param {Array} [ranges]\n       *        An array of time ranges.\n       */\n\n\n      function createTimeRangesObj(ranges) {\n        if (ranges === undefined || ranges.length === 0) {\n          return {\n            length: 0,\n            start: function start() {\n              throw new Error('This TimeRanges object is empty');\n            },\n            end: function end() {\n              throw new Error('This TimeRanges object is empty');\n            }\n          };\n        }\n\n        return {\n          length: ranges.length,\n          start: getRange.bind(null, 'start', 0, ranges),\n          end: getRange.bind(null, 'end', 1, ranges)\n        };\n      }\n      /**\n       * Should create a fake `TimeRange` object which mimics an HTML5 time range instance.\n       *\n       * @param {number|Array} start\n       *        The start of a single range or an array of ranges\n       *\n       * @param {number} end\n       *        The end of a single range.\n       *\n       * @private\n       */\n\n\n      function createTimeRanges(start, end) {\n        if (Array.isArray(start)) {\n          return createTimeRangesObj(start);\n        } else if (start === undefined || end === undefined) {\n          return createTimeRangesObj();\n        }\n\n        return createTimeRangesObj([[start, end]]);\n      }\n\n      exports.createTimeRange = createTimeRanges;\n      /***/\n    },\n    /* 23 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.bufferedPercent = bufferedPercent;\n\n      var _timeRanges = __webpack_require__(22);\n      /**\n       * Compute the percentage of the media that has been buffered.\n       *\n       * @param {TimeRange} buffered\n       *        The current `TimeRange` object representing buffered time ranges\n       *\n       * @param {number} duration\n       *        Total duration of the media\n       *\n       * @return {number}\n       *         Percent buffered of the total duration in decimal form.\n       */\n\n\n      function bufferedPercent(buffered, duration) {\n        var bufferedDuration = 0;\n        var start = void 0;\n        var end = void 0;\n\n        if (!duration) {\n          return 0;\n        }\n\n        if (!buffered || !buffered.length) {\n          buffered = (0, _timeRanges.createTimeRange)(0, 0);\n        }\n\n        for (var i = 0; i < buffered.length; i++) {\n          start = buffered.start(i);\n          end = buffered.end(i); // buffered end can be bigger than duration by a very small fraction\n\n          if (end > duration) {\n            end = duration;\n          }\n\n          bufferedDuration += end - start;\n        }\n\n        return bufferedDuration / duration;\n      }\n      /**\n       * @file buffer.js\n       * @module buffer\n       */\n\n      /***/\n\n    },\n    /* 24 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n      /**\n       * Store the browser-specific methods for the fullscreen API.\n       *\n       * @type {Object}\n       * @see [Specification]{@link https://fullscreen.spec.whatwg.org}\n       * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}\n       */\n\n\n      var FullscreenApi = {}; // browser API methods\n\n      /**\n       * @file fullscreen-api.js\n       * @module fullscreen-api\n       * @private\n       */\n\n      var apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'], // WebKit\n      ['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'], // Old WebKit (Safari 5.1)\n      ['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'], // Mozilla\n      ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'], // Microsoft\n      ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];\n      var specApi = apiMap[0];\n      var browserApi = void 0; // determine the supported set of functions\n\n      for (var i = 0; i < apiMap.length; i++) {\n        // check for exitFullscreen function\n        if (apiMap[i][1] in _document2['default']) {\n          browserApi = apiMap[i];\n          break;\n        }\n      } // map the browser API names to the spec API names\n\n\n      if (browserApi) {\n        for (var _i = 0; _i < browserApi.length; _i++) {\n          FullscreenApi[specApi[_i]] = browserApi[_i];\n        }\n      }\n\n      exports['default'] = FullscreenApi;\n      /***/\n    },\n    /* 25 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _obj = __webpack_require__(13);\n      /**\n       * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.\n       *\n       * @param {number|string|Object|MediaError} value\n       *        This can be of multiple types:\n       *        - number: should be a standard error code\n       *        - string: an error message (the code will be 0)\n       *        - Object: arbitrary properties\n       *        - `MediaError` (native): used to populate a video.js `MediaError` object\n       *        - `MediaError` (video.js): will return itself if it's already a\n       *          video.js `MediaError` object.\n       *\n       * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}\n       * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}\n       *\n       * @class MediaError\n       */\n\n\n      function MediaError(value) {\n        // Allow redundant calls to this constructor to avoid having `instanceof`\n        // checks peppered around the code.\n        if (value instanceof MediaError) {\n          return value;\n        }\n\n        if (typeof value === 'number') {\n          this.code = value;\n        } else if (typeof value === 'string') {\n          // default code is zero, so this is a custom error\n          this.message = value;\n        } else if ((0, _obj.isObject)(value)) {\n          // We assign the `code` property manually because native `MediaError` objects\n          // do not expose it as an own/enumerable property of the object.\n          if (typeof value.code === 'number') {\n            this.code = value.code;\n          }\n\n          (0, _obj.assign)(this, value);\n        }\n\n        if (!this.message) {\n          this.message = MediaError.defaultMessages[this.code] || '';\n        }\n      }\n      /**\n       * The error code that refers two one of the defined `MediaError` types\n       *\n       * @type {Number}\n       */\n\n      /**\n       * @file media-error.js\n       */\n\n\n      MediaError.prototype.code = 0;\n      /**\n       * An optional message that to show with the error. Message is not part of the HTML5\n       * video spec but allows for more informative custom errors.\n       *\n       * @type {String}\n       */\n\n      MediaError.prototype.message = '';\n      /**\n       * An optional status code that can be set by plugins to allow even more detail about\n       * the error. For example a plugin might provide a specific HTTP status code and an\n       * error message for that code. Then when the plugin gets that error this class will\n       * know how to display an error message for it. This allows a custom message to show\n       * up on the `Player` error overlay.\n       *\n       * @type {Array}\n       */\n\n      MediaError.prototype.status = null;\n      /**\n       * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the\n       * specification listed under {@link MediaError} for more information.\n       *\n       * @enum {array}\n       * @readonly\n       * @property {string} 0 - MEDIA_ERR_CUSTOM\n       * @property {string} 1 - MEDIA_ERR_CUSTOM\n       * @property {string} 2 - MEDIA_ERR_ABORTED\n       * @property {string} 3 - MEDIA_ERR_NETWORK\n       * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED\n       * @property {string} 5 - MEDIA_ERR_ENCRYPTED\n       */\n\n      MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];\n      /**\n       * The default `MediaError` messages based on the {@link MediaError.errorTypes}.\n       *\n       * @type {Array}\n       * @constant\n       */\n\n      MediaError.defaultMessages = {\n        1: 'You aborted the media playback',\n        2: 'A network error caused the media download to fail part-way.',\n        3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',\n        4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',\n        5: 'The media is encrypted and we do not have the keys to decrypt it.'\n      }; // Add types as properties on MediaError\n      // e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\n\n      for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {\n        MediaError[MediaError.errorTypes[errNum]] = errNum; // values should be accessible on both the class and instance\n\n        MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;\n      } // jsdocs for instance/static members added above\n      // instance methods use `#` and static methods use `.`\n\n      /**\n       * W3C error code for any custom error.\n       *\n       * @member MediaError#MEDIA_ERR_CUSTOM\n       * @constant {number}\n       * @default 0\n       */\n\n      /**\n       * W3C error code for any custom error.\n       *\n       * @member MediaError.MEDIA_ERR_CUSTOM\n       * @constant {number}\n       * @default 0\n       */\n\n      /**\n       * W3C error code for media error aborted.\n       *\n       * @member MediaError#MEDIA_ERR_ABORTED\n       * @constant {number}\n       * @default 1\n       */\n\n      /**\n       * W3C error code for media error aborted.\n       *\n       * @member MediaError.MEDIA_ERR_ABORTED\n       * @constant {number}\n       * @default 1\n       */\n\n      /**\n       * W3C error code for any network error.\n       *\n       * @member MediaError#MEDIA_ERR_NETWORK\n       * @constant {number}\n       * @default 2\n       */\n\n      /**\n       * W3C error code for any network error.\n       *\n       * @member MediaError.MEDIA_ERR_NETWORK\n       * @constant {number}\n       * @default 2\n       */\n\n      /**\n       * W3C error code for any decoding error.\n       *\n       * @member MediaError#MEDIA_ERR_DECODE\n       * @constant {number}\n       * @default 3\n       */\n\n      /**\n       * W3C error code for any decoding error.\n       *\n       * @member MediaError.MEDIA_ERR_DECODE\n       * @constant {number}\n       * @default 3\n       */\n\n      /**\n       * W3C error code for any time that a source is not supported.\n       *\n       * @member MediaError#MEDIA_ERR_SRC_NOT_SUPPORTED\n       * @constant {number}\n       * @default 4\n       */\n\n      /**\n       * W3C error code for any time that a source is not supported.\n       *\n       * @member MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED\n       * @constant {number}\n       * @default 4\n       */\n\n      /**\n       * W3C error code for any time that a source is encrypted.\n       *\n       * @member MediaError#MEDIA_ERR_ENCRYPTED\n       * @constant {number}\n       * @default 5\n       */\n\n      /**\n       * W3C error code for any time that a source is encrypted.\n       *\n       * @member MediaError.MEDIA_ERR_ENCRYPTED\n       * @constant {number}\n       * @default 5\n       */\n\n\n      exports['default'] = MediaError;\n      /***/\n    },\n    /* 26 */\n\n    /***/\n    function (module, exports) {\n      module.exports = SafeParseTuple;\n\n      function SafeParseTuple(obj, reviver) {\n        var json;\n        var error = null;\n\n        try {\n          json = JSON.parse(obj, reviver);\n        } catch (err) {\n          error = err;\n        }\n\n        return [error, json];\n      }\n      /***/\n\n    },\n    /* 27 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      /**\n       * Utilities for capturing text track state and re-creating tracks\n       * based on a capture.\n       *\n       * @file text-track-list-converter.js\n       * @module text-track-list-converter\n       */\n\n      /**\n       * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that\n       * represents the {@link TextTrack}'s state.\n       *\n       * @param {TextTrack} track\n       *        The text track to query.\n       *\n       * @return {Object}\n       *         A serializable javascript representation of the TextTrack.\n       * @private\n       */\n\n      var trackToJson_ = function trackToJson_(track) {\n        var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {\n          if (track[prop]) {\n            acc[prop] = track[prop];\n          }\n\n          return acc;\n        }, {\n          cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {\n            return {\n              startTime: cue.startTime,\n              endTime: cue.endTime,\n              text: cue.text,\n              id: cue.id\n            };\n          })\n        });\n        return ret;\n      };\n      /**\n       * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the\n       * state of all {@link TextTrack}s currently configured. The return array is compatible with\n       * {@link text-track-list-converter:jsonToTextTracks}.\n       *\n       * @param {Tech} tech\n       *        The tech object to query\n       *\n       * @return {Array}\n       *         A serializable javascript representation of the {@link Tech}s\n       *         {@link TextTrackList}.\n       */\n\n\n      var textTracksToJson = function textTracksToJson(tech) {\n        var trackEls = tech.$$('track');\n        var trackObjs = Array.prototype.map.call(trackEls, function (t) {\n          return t.track;\n        });\n        var tracks = Array.prototype.map.call(trackEls, function (trackEl) {\n          var json = trackToJson_(trackEl.track);\n\n          if (trackEl.src) {\n            json.src = trackEl.src;\n          }\n\n          return json;\n        });\n        return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {\n          return trackObjs.indexOf(track) === -1;\n        }).map(trackToJson_));\n      };\n      /**\n       * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript\n       * object {@link TextTrack} representations.\n       *\n       * @param {Array} json\n       *        An array of `TextTrack` representation objects, like those that would be\n       *        produced by `textTracksToJson`.\n       *\n       * @param {Tech} tech\n       *        The `Tech` to create the `TextTrack`s on.\n       */\n\n\n      var jsonToTextTracks = function jsonToTextTracks(json, tech) {\n        json.forEach(function (track) {\n          var addedTrack = tech.addRemoteTextTrack(track).track;\n\n          if (!track.src && track.cues) {\n            track.cues.forEach(function (cue) {\n              return addedTrack.addCue(cue);\n            });\n          }\n        });\n        return tech.textTracks();\n      };\n\n      exports['default'] = {\n        textTracksToJson: textTracksToJson,\n        jsonToTextTracks: jsonToTextTracks,\n        trackToJson_: trackToJson_\n      };\n      /***/\n    },\n    /* 28 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file modal-dialog.js\n       */\n\n\n      var MODAL_CLASS_NAME = 'vjs-modal-dialog';\n      var ESC = 27;\n      /**\n       * The `ModalDialog` displays over the video and its controls, which blocks\n       * interaction with the player until it is closed.\n       *\n       * Modal dialogs include a \"Close\" button and will close when that button\n       * is activated - or when ESC is pressed anywhere.\n       *\n       * @extends Component\n       */\n\n      var ModalDialog = function (_Component) {\n        _inherits(ModalDialog, _Component);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         *\n         * @param {Mixed} [options.content=undefined]\n         *        Provide customized content for this modal.\n         *\n         * @param {string} [options.description]\n         *        A text description for the modal, primarily for accessibility.\n         *\n         * @param {boolean} [options.fillAlways=false]\n         *        Normally, modals are automatically filled only the first time\n         *        they open. This tells the modal to refresh its content\n         *        every time it opens.\n         *\n         * @param {string} [options.label]\n         *        A text label for the modal, primarily for accessibility.\n         *\n         * @param {boolean} [options.temporary=true]\n         *        If `true`, the modal can only be opened once; it will be\n         *        disposed as soon as it's closed.\n         *\n         * @param {boolean} [options.uncloseable=false]\n         *        If `true`, the user will not be able to close the modal\n         *        through the UI in the normal ways. Programmatic closing is\n         *        still possible.\n         */\n\n\n        function ModalDialog(player, options) {\n          _classCallCheck(this, ModalDialog);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;\n\n          _this.closeable(!_this.options_.uncloseable);\n\n          _this.content(_this.options_.content); // Make sure the contentEl is defined AFTER any children are initialized\n          // because we only want the contents of the modal in the contentEl\n          // (not the UI elements like the close button).\n\n\n          _this.contentEl_ = Dom.createEl('div', {\n            className: MODAL_CLASS_NAME + '-content'\n          }, {\n            role: 'document'\n          });\n          _this.descEl_ = Dom.createEl('p', {\n            className: MODAL_CLASS_NAME + '-description vjs-offscreen',\n            id: _this.el().getAttribute('aria-describedby')\n          });\n          Dom.textContent(_this.descEl_, _this.description());\n\n          _this.el_.appendChild(_this.descEl_);\n\n          _this.el_.appendChild(_this.contentEl_);\n\n          return _this;\n        }\n        /**\n         * Create the `ModalDialog`'s DOM element\n         *\n         * @return {Element}\n         *         The DOM element that gets created.\n         */\n\n\n        ModalDialog.prototype.createEl = function createEl() {\n          return _Component.prototype.createEl.call(this, 'div', {\n            className: this.buildCSSClass(),\n            tabIndex: -1\n          }, {\n            'aria-describedby': this.id() + '_description',\n            'aria-hidden': 'true',\n            'aria-label': this.label(),\n            'role': 'dialog'\n          });\n        };\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        ModalDialog.prototype.buildCSSClass = function buildCSSClass() {\n          return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * Handles `keydown` events on the document, looking for ESC, which closes\n         * the modal.\n         *\n         * @param {EventTarget~Event} e\n         *        The keypress that triggered this event.\n         *\n         * @listens keydown\n         */\n\n\n        ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {\n          if (e.which === ESC && this.closeable()) {\n            this.close();\n          }\n        };\n        /**\n         * Returns the label string for this modal. Primarily used for accessibility.\n         *\n         * @return {string}\n         *         the localized or raw label of this modal.\n         */\n\n\n        ModalDialog.prototype.label = function label() {\n          return this.options_.label || this.localize('Modal Window');\n        };\n        /**\n         * Returns the description string for this modal. Primarily used for\n         * accessibility.\n         *\n         * @return {string}\n         *         The localized or raw description of this modal.\n         */\n\n\n        ModalDialog.prototype.description = function description() {\n          var desc = this.options_.description || this.localize('This is a modal window.'); // Append a universal closeability message if the modal is closeable.\n\n          if (this.closeable()) {\n            desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n          }\n\n          return desc;\n        };\n        /**\n         * Opens the modal.\n         *\n         * @fires ModalDialog#beforemodalopen\n         * @fires ModalDialog#modalopen\n         *\n         * @return {ModalDialog}\n         *         Returns itself; method can be chained.\n         */\n\n\n        ModalDialog.prototype.open = function open() {\n          if (!this.opened_) {\n            var player = this.player();\n            /**\n             * Fired just before a `ModalDialog` is opened.\n             *\n             * @event ModalDialog#beforemodalopen\n             * @type {EventTarget~Event}\n             */\n\n            this.trigger('beforemodalopen');\n            this.opened_ = true; // Fill content if the modal has never opened before and\n            // never been filled.\n\n            if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n              this.fill();\n            } // If the player was playing, pause it and take note of its previously\n            // playing state.\n\n\n            this.wasPlaying_ = !player.paused();\n\n            if (this.wasPlaying_) {\n              player.pause();\n            }\n\n            if (this.closeable()) {\n              this.on(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));\n            }\n\n            player.controls(false);\n            this.show();\n            this.el().setAttribute('aria-hidden', 'false');\n            /**\n             * Fired just after a `ModalDialog` is opened.\n             *\n             * @event ModalDialog#modalopen\n             * @type {EventTarget~Event}\n             */\n\n            this.trigger('modalopen');\n            this.hasBeenOpened_ = true;\n          }\n\n          return this;\n        };\n        /**\n         * If the `ModalDialog` is currently open or closed.\n         *\n         * @param  {boolean} [value]\n         *         If given, it will open (`true`) or close (`false`) the modal.\n         *\n         * @return {boolean}\n         *         the current open state of the modaldialog\n         */\n\n\n        ModalDialog.prototype.opened = function opened(value) {\n          if (typeof value === 'boolean') {\n            this[value ? 'open' : 'close']();\n          }\n\n          return this.opened_;\n        };\n        /**\n         * Closes the modal, does nothing if the `ModalDialog` is\n         * not open.\n         *\n         * @fires ModalDialog#beforemodalclose\n         * @fires ModalDialog#modalclose\n         *\n         * @return {ModalDialog}\n         *         Returns itself; method can be chained.\n         */\n\n\n        ModalDialog.prototype.close = function close() {\n          if (this.opened_) {\n            var player = this.player();\n            /**\n             * Fired just before a `ModalDialog` is closed.\n             *\n             * @event ModalDialog#beforemodalclose\n             * @type {EventTarget~Event}\n             */\n\n            this.trigger('beforemodalclose');\n            this.opened_ = false;\n\n            if (this.wasPlaying_) {\n              player.play();\n            }\n\n            if (this.closeable()) {\n              this.off(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));\n            }\n\n            player.controls(true);\n            this.hide();\n            this.el().setAttribute('aria-hidden', 'true');\n            /**\n             * Fired just after a `ModalDialog` is closed.\n             *\n             * @event ModalDialog#modalclose\n             * @type {EventTarget~Event}\n             */\n\n            this.trigger('modalclose');\n\n            if (this.options_.temporary) {\n              this.dispose();\n            }\n          }\n\n          return this;\n        };\n        /**\n         * Check to see if the `ModalDialog` is closeable via the UI.\n         *\n         * @param  {boolean} [value]\n         *         If given as a boolean, it will set the `closeable` option.\n         *\n         * @return {boolean}\n         *         Returns the final value of the closable option.\n         */\n\n\n        ModalDialog.prototype.closeable = function closeable(value) {\n          if (typeof value === 'boolean') {\n            var closeable = this.closeable_ = !!value;\n            var close = this.getChild('closeButton'); // If this is being made closeable and has no close button, add one.\n\n            if (closeable && !close) {\n              // The close button should be a child of the modal - not its\n              // content element, so temporarily change the content element.\n              var temp = this.contentEl_;\n              this.contentEl_ = this.el_;\n              close = this.addChild('closeButton', {\n                controlText: 'Close Modal Dialog'\n              });\n              this.contentEl_ = temp;\n              this.on(close, 'close', this.close);\n            } // If this is being made uncloseable and has a close button, remove it.\n\n\n            if (!closeable && close) {\n              this.off(close, 'close', this.close);\n              this.removeChild(close);\n              close.dispose();\n            }\n          }\n\n          return this.closeable_;\n        };\n        /**\n         * Fill the modal's content element with the modal's \"content\" option.\n         * The content element will be emptied before this change takes place.\n         *\n         * @return {ModalDialog}\n         *         Returns itself; method can be chained.\n         */\n\n\n        ModalDialog.prototype.fill = function fill() {\n          return this.fillWith(this.content());\n        };\n        /**\n         * Fill the modal's content element with arbitrary content.\n         * The content element will be emptied before this change takes place.\n         *\n         * @fires ModalDialog#beforemodalfill\n         * @fires ModalDialog#modalfill\n         *\n         * @param  {Mixed} [content]\n         *         The same rules apply to this as apply to the `content` option.\n         *\n         * @return {ModalDialog}\n         *         Returns itself; method can be chained.\n         */\n\n\n        ModalDialog.prototype.fillWith = function fillWith(content) {\n          var contentEl = this.contentEl();\n          var parentEl = contentEl.parentNode;\n          var nextSiblingEl = contentEl.nextSibling;\n          /**\n           * Fired just before a `ModalDialog` is filled with content.\n           *\n           * @event ModalDialog#beforemodalfill\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('beforemodalfill');\n          this.hasBeenFilled_ = true; // Detach the content element from the DOM before performing\n          // manipulation to avoid modifying the live DOM multiple times.\n\n          parentEl.removeChild(contentEl);\n          this.empty();\n          Dom.insertContent(contentEl, content);\n          /**\n           * Fired just after a `ModalDialog` is filled with content.\n           *\n           * @event ModalDialog#modalfill\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('modalfill'); // Re-inject the re-filled content element.\n\n          if (nextSiblingEl) {\n            parentEl.insertBefore(contentEl, nextSiblingEl);\n          } else {\n            parentEl.appendChild(contentEl);\n          }\n\n          return this;\n        };\n        /**\n         * Empties the content element. This happens anytime the modal is filled.\n         *\n         * @fires ModalDialog#beforemodalempty\n         * @fires ModalDialog#modalempty\n         *\n         * @return {ModalDialog}\n         *         Returns itself; method can be chained.\n         */\n\n\n        ModalDialog.prototype.empty = function empty() {\n          /**\n           * Fired just before a `ModalDialog` is emptied.\n           *\n           * @event ModalDialog#beforemodalempty\n           * @type {EventTarget~Event}\n           */\n          this.trigger('beforemodalempty');\n          Dom.emptyEl(this.contentEl());\n          /**\n           * Fired just after a `ModalDialog` is emptied.\n           *\n           * @event ModalDialog#modalempty\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('modalempty');\n          return this;\n        };\n        /**\n         * Gets or sets the modal content, which gets normalized before being\n         * rendered into the DOM.\n         *\n         * This does not update the DOM or fill the modal, but it is called during\n         * that process.\n         *\n         * @param  {Mixed} [value]\n         *         If defined, sets the internal content value to be used on the\n         *         next call(s) to `fill`. This value is normalized before being\n         *         inserted. To \"clear\" the internal content value, pass `null`.\n         *\n         * @return {Mixed}\n         *         The current content of the modal dialog\n         */\n\n\n        ModalDialog.prototype.content = function content(value) {\n          if (typeof value !== 'undefined') {\n            this.content_ = value;\n          }\n\n          return this.content_;\n        };\n\n        return ModalDialog;\n      }(_component2['default']);\n      /**\n       * Default options for `ModalDialog` default options.\n       *\n       * @type {Object}\n       * @private\n       */\n\n\n      ModalDialog.prototype.options_ = {\n        temporary: true\n      };\n\n      _component2['default'].registerComponent('ModalDialog', ModalDialog);\n\n      exports['default'] = ModalDialog;\n      /***/\n    },\n    /* 29 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _htmlTrackElement = __webpack_require__(30);\n\n      var _htmlTrackElement2 = _interopRequireDefault(_htmlTrackElement);\n\n      var _htmlTrackElementList = __webpack_require__(43);\n\n      var _htmlTrackElementList2 = _interopRequireDefault(_htmlTrackElementList);\n\n      var _mergeOptions = __webpack_require__(19);\n\n      var _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\n      var _textTrack = __webpack_require__(31);\n\n      var _textTrack2 = _interopRequireDefault(_textTrack);\n\n      var _textTrackList = __webpack_require__(44);\n\n      var _textTrackList2 = _interopRequireDefault(_textTrackList);\n\n      var _videoTrackList = __webpack_require__(46);\n\n      var _videoTrackList2 = _interopRequireDefault(_videoTrackList);\n\n      var _audioTrackList = __webpack_require__(47);\n\n      var _audioTrackList2 = _interopRequireDefault(_audioTrackList);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      var _timeRanges = __webpack_require__(22);\n\n      var _buffer = __webpack_require__(23);\n\n      var _mediaError = __webpack_require__(25);\n\n      var _mediaError2 = _interopRequireDefault(_mediaError);\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file tech.js\n       */\n\n      /**\n       * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string\n       * that just contains the src url alone.\n       *\n       * ``` js\n       *   var SourceObject = {\n       *     src: 'http://example.com/some-video.mp4',\n       *     type: 'video/mp4'\n       *   };\n       *   var SourceString = 'http://example.com/some-video.mp4';\n       * ```\n       *\n       * @typedef {Object|string} Tech~SourceObject\n       *\n       * @property {string} src\n       *           The url to the source\n       *\n       * @property {string} type\n       *           The mime type of the source\n       */\n\n      /**\n       * A function used by {@link Tech} to create a new {@link TextTrack}.\n       *\n       * @param {Tech} self\n       *        An instance of the Tech class.\n       *\n       * @param {string} kind\n       *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n       *\n       * @param {string} [label]\n       *        Label to identify the text track\n       *\n       * @param {string} [language]\n       *        Two letter language abbreviation\n       *\n       * @param {Object} [options={}]\n       *        An object with additional text track options\n       *\n       * @return {TextTrack}\n       *          The text track that was created.\n       */\n\n\n      function createTrackHelper(self, kind, label, language) {\n        var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        var tracks = self.textTracks();\n        options.kind = kind;\n\n        if (label) {\n          options.label = label;\n        }\n\n        if (language) {\n          options.language = language;\n        }\n\n        options.tech = self;\n        var track = new _textTrack2['default'](options);\n        tracks.addTrack_(track);\n        return track;\n      }\n      /**\n       * This is the base class for media playback technology controllers, such as\n       * {@link Flash} and {@link HTML5}\n       *\n       * @extends Component\n       */\n\n\n      var Tech = function (_Component) {\n        _inherits(Tech, _Component);\n        /**\n         * Create an instance of this Tech.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         *\n         * @param {Component~ReadyCallback} ready\n         *        Callback function to call when the `HTML5` Tech is ready.\n         */\n\n\n        function Tech() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n\n          _classCallCheck(this, Tech); // we don't want the tech to report user activity automatically.\n          // This is done manually in addControlsListeners\n\n\n          options.reportTouchActivity = false; // keep track of whether the current source has played at all to\n          // implement a very limited played()\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, null, options, ready));\n\n          _this.hasStarted_ = false;\n\n          _this.on('playing', function () {\n            this.hasStarted_ = true;\n          });\n\n          _this.on('loadstart', function () {\n            this.hasStarted_ = false;\n          });\n\n          _this.textTracks_ = options.textTracks;\n          _this.videoTracks_ = options.videoTracks;\n          _this.audioTracks_ = options.audioTracks; // Manually track progress in cases where the browser/flash player doesn't report it.\n\n          if (!_this.featuresProgressEvents) {\n            _this.manualProgressOn();\n          } // Manually track timeupdates in cases where the browser/flash player doesn't report it.\n\n\n          if (!_this.featuresTimeupdateEvents) {\n            _this.manualTimeUpdatesOn();\n          }\n\n          ['Text', 'Audio', 'Video'].forEach(function (track) {\n            if (options['native' + track + 'Tracks'] === false) {\n              _this['featuresNative' + track + 'Tracks'] = false;\n            }\n          });\n\n          if (options.nativeCaptions === false) {\n            _this.featuresNativeTextTracks = false;\n          }\n\n          if (!_this.featuresNativeTextTracks) {\n            _this.emulateTextTracks();\n          }\n\n          _this.autoRemoteTextTracks_ = new _textTrackList2['default']();\n\n          _this.initTextTrackListeners();\n\n          _this.initTrackListeners(); // Turn on component tap events\n\n\n          _this.emitTapEvents();\n\n          return _this;\n        }\n        /* Fallbacks for unsupported event types\n        ================================================================================ */\n\n        /**\n         * Polyfill the `progress` event for browsers that don't support it natively.\n         *\n         * @see {@link Tech#trackProgress}\n         */\n\n\n        Tech.prototype.manualProgressOn = function manualProgressOn() {\n          this.on('durationchange', this.onDurationChange);\n          this.manualProgress = true; // Trigger progress watching when a source begins loading\n\n          this.one('ready', this.trackProgress);\n        };\n        /**\n         * Turn off the polyfill for `progress` events that was created in\n         * {@link Tech#manualProgressOn}\n         */\n\n\n        Tech.prototype.manualProgressOff = function manualProgressOff() {\n          this.manualProgress = false;\n          this.stopTrackingProgress();\n          this.off('durationchange', this.onDurationChange);\n        };\n        /**\n         * This is used to trigger a `progress` event when the buffered percent changes. It\n         * sets an interval function that will be called every 500 milliseconds to check if the\n         * buffer end percent has changed.\n         *\n         * > This function is called by {@link Tech#manualProgressOn}\n         *\n         * @param {EventTarget~Event} event\n         *        The `ready` event that caused this to run.\n         *\n         * @listens Tech#ready\n         * @fires Tech#progress\n         */\n\n\n        Tech.prototype.trackProgress = function trackProgress(event) {\n          this.stopTrackingProgress();\n          this.progressInterval = this.setInterval(Fn.bind(this, function () {\n            // Don't trigger unless buffered amount is greater than last time\n            var numBufferedPercent = this.bufferedPercent();\n\n            if (this.bufferedPercent_ !== numBufferedPercent) {\n              /**\n               * See {@link Player#progress}\n               *\n               * @event Tech#progress\n               * @type {EventTarget~Event}\n               */\n              this.trigger('progress');\n            }\n\n            this.bufferedPercent_ = numBufferedPercent;\n\n            if (numBufferedPercent === 1) {\n              this.stopTrackingProgress();\n            }\n          }), 500);\n        };\n        /**\n         * Update our internal duration on a `durationchange` event by calling\n         * {@link Tech#duration}.\n         *\n         * @param {EventTarget~Event} event\n         *        The `durationchange` event that caused this to run.\n         *\n         * @listens Tech#durationchange\n         */\n\n\n        Tech.prototype.onDurationChange = function onDurationChange(event) {\n          this.duration_ = this.duration();\n        };\n        /**\n         * Get and create a `TimeRange` object for buffering.\n         *\n         * @return {TimeRange}\n         *         The time range object that was created.\n         */\n\n\n        Tech.prototype.buffered = function buffered() {\n          return (0, _timeRanges.createTimeRange)(0, 0);\n        };\n        /**\n         * Get the percentage of the current video that is currently buffered.\n         *\n         * @return {number}\n         *         A number from 0 to 1 that represents the decimal percentage of the\n         *         video that is buffered.\n         *\n         */\n\n\n        Tech.prototype.bufferedPercent = function bufferedPercent() {\n          return (0, _buffer.bufferedPercent)(this.buffered(), this.duration_);\n        };\n        /**\n         * Turn off the polyfill for `progress` events that was created in\n         * {@link Tech#manualProgressOn}\n         * Stop manually tracking progress events by clearing the interval that was set in\n         * {@link Tech#trackProgress}.\n         */\n\n\n        Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {\n          this.clearInterval(this.progressInterval);\n        };\n        /**\n         * Polyfill the `timeupdate` event for browsers that don't support it.\n         *\n         * @see {@link Tech#trackCurrentTime}\n         */\n\n\n        Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {\n          this.manualTimeUpdates = true;\n          this.on('play', this.trackCurrentTime);\n          this.on('pause', this.stopTrackingCurrentTime);\n        };\n        /**\n         * Turn off the polyfill for `timeupdate` events that was created in\n         * {@link Tech#manualTimeUpdatesOn}\n         */\n\n\n        Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {\n          this.manualTimeUpdates = false;\n          this.stopTrackingCurrentTime();\n          this.off('play', this.trackCurrentTime);\n          this.off('pause', this.stopTrackingCurrentTime);\n        };\n        /**\n         * Sets up an interval function to track current time and trigger `timeupdate` every\n         * 250 milliseconds.\n         *\n         * @listens Tech#play\n         * @triggers Tech#timeupdate\n         */\n\n\n        Tech.prototype.trackCurrentTime = function trackCurrentTime() {\n          if (this.currentTimeInterval) {\n            this.stopTrackingCurrentTime();\n          }\n\n          this.currentTimeInterval = this.setInterval(function () {\n            /**\n             * Triggered at an interval of 250ms to indicated that time is passing in the video.\n             *\n             * @event Tech#timeupdate\n             * @type {EventTarget~Event}\n             */\n            this.trigger({\n              type: 'timeupdate',\n              target: this,\n              manuallyTriggered: true\n            }); // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n          }, 250);\n        };\n        /**\n         * Stop the interval function created in {@link Tech#trackCurrentTime} so that the\n         * `timeupdate` event is no longer triggered.\n         *\n         * @listens {Tech#pause}\n         */\n\n\n        Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {\n          this.clearInterval(this.currentTimeInterval); // #1002 - if the video ends right before the next timeupdate would happen,\n          // the progress bar won't make it all the way to the end\n\n          this.trigger({\n            type: 'timeupdate',\n            target: this,\n            manuallyTriggered: true\n          });\n        };\n        /**\n         * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},\n         * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.\n         *\n         * @fires Component#dispose\n         */\n\n\n        Tech.prototype.dispose = function dispose() {\n          // clear out all tracks because we can't reuse them between techs\n          this.clearTracks(['audio', 'video', 'text']); // Turn off any manual progress or timeupdate tracking\n\n          if (this.manualProgress) {\n            this.manualProgressOff();\n          }\n\n          if (this.manualTimeUpdates) {\n            this.manualTimeUpdatesOff();\n          }\n\n          _Component.prototype.dispose.call(this);\n        };\n        /**\n         * Clear out a single `TrackList` or an array of `TrackLists` given their names.\n         *\n         * > Note: Techs without source handlers should call this between sources for `video`\n         *         & `audio` tracks. You don't want to use them between tracks!\n         *\n         * @param {string[]|string} types\n         *        TrackList names to clear, valid names are `video`, `audio`, and\n         *        `text`.\n         */\n\n\n        Tech.prototype.clearTracks = function clearTracks(types) {\n          var _this2 = this;\n\n          types = [].concat(types); // clear out all tracks because we can't reuse them between techs\n\n          types.forEach(function (type) {\n            var list = _this2[type + 'Tracks']() || [];\n            var i = list.length;\n\n            while (i--) {\n              var track = list[i];\n\n              if (type === 'text') {\n                _this2.removeRemoteTextTrack(track);\n              }\n\n              list.removeTrack_(track);\n            }\n          });\n        };\n        /**\n         * Remove any TextTracks added via addRemoteTextTrack that are\n         * flagged for automatic garbage collection\n         */\n\n\n        Tech.prototype.cleanupAutoTextTracks = function cleanupAutoTextTracks() {\n          var list = this.autoRemoteTextTracks_ || [];\n          var i = list.length;\n\n          while (i--) {\n            var track = list[i];\n            this.removeRemoteTextTrack(track);\n          }\n        };\n        /**\n         * Reset the tech, which will removes all sources and reset the internal readyState.\n         *\n         * @abstract\n         */\n\n\n        Tech.prototype.reset = function reset() {};\n        /**\n         * Get or set an error on the Tech.\n         *\n         * @param {MediaError} [err]\n         *        Error to set on the Tech\n         *\n         * @return {MediaError|null}\n         *         The current error object on the tech, or null if there isn't one.\n         */\n\n\n        Tech.prototype.error = function error(err) {\n          if (err !== undefined) {\n            this.error_ = new _mediaError2['default'](err);\n            this.trigger('error');\n          }\n\n          return this.error_;\n        };\n        /**\n         * Returns the `TimeRange`s that have been played through for the current source.\n         *\n         * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.\n         *         It only checks wether the source has played at all or not.\n         *\n         * @return {TimeRange}\n         *         - A single time range if this video has played\n         *         - An empty set of ranges if not.\n         */\n\n\n        Tech.prototype.played = function played() {\n          if (this.hasStarted_) {\n            return (0, _timeRanges.createTimeRange)(0, 0);\n          }\n\n          return (0, _timeRanges.createTimeRange)();\n        };\n        /**\n         * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was\n         * previously called.\n         *\n         * @fires Tech#timeupdate\n         */\n\n\n        Tech.prototype.setCurrentTime = function setCurrentTime() {\n          // improve the accuracy of manual timeupdates\n          if (this.manualTimeUpdates) {\n            /**\n             * A manual `timeupdate` event.\n             *\n             * @event Tech#timeupdate\n             * @type {EventTarget~Event}\n             */\n            this.trigger({\n              type: 'timeupdate',\n              target: this,\n              manuallyTriggered: true\n            });\n          }\n        };\n        /**\n         * Turn on listeners for {@link TextTrackList} events. This adds\n         * {@link EventTarget~EventListeners} for `texttrackchange`, `addtrack` and\n         * `removetrack`.\n         *\n         * @fires Tech#texttrackchange\n         */\n\n\n        Tech.prototype.initTextTrackListeners = function initTextTrackListeners() {\n          var textTrackListChanges = Fn.bind(this, function () {\n            /**\n             * Triggered when tracks are added or removed on the Tech {@link TextTrackList}\n             *\n             * @event Tech#texttrackchange\n             * @type {EventTarget~Event}\n             */\n            this.trigger('texttrackchange');\n          });\n          var tracks = this.textTracks();\n\n          if (!tracks) {\n            return;\n          }\n\n          tracks.addEventListener('removetrack', textTrackListChanges);\n          tracks.addEventListener('addtrack', textTrackListChanges);\n          this.on('dispose', Fn.bind(this, function () {\n            tracks.removeEventListener('removetrack', textTrackListChanges);\n            tracks.removeEventListener('addtrack', textTrackListChanges);\n          }));\n        };\n        /**\n         * Turn on listeners for {@link VideoTrackList} and {@link {AudioTrackList} events.\n         * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.\n         *\n         * @fires Tech#audiotrackchange\n         * @fires Tech#videotrackchange\n         */\n\n\n        Tech.prototype.initTrackListeners = function initTrackListeners() {\n          var _this3 = this;\n\n          var trackTypes = ['video', 'audio'];\n          trackTypes.forEach(function (type) {\n            /**\n             * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}\n             *\n             * @event Tech#audiotrackchange\n             * @type {EventTarget~Event}\n             */\n\n            /**\n             * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}\n             *\n             * @event Tech#videotrackchange\n             * @type {EventTarget~Event}\n             */\n            var trackListChanges = function trackListChanges() {\n              _this3.trigger(type + 'trackchange');\n            };\n\n            var tracks = _this3[type + 'Tracks']();\n\n            tracks.addEventListener('removetrack', trackListChanges);\n            tracks.addEventListener('addtrack', trackListChanges);\n\n            _this3.on('dispose', function () {\n              tracks.removeEventListener('removetrack', trackListChanges);\n              tracks.removeEventListener('addtrack', trackListChanges);\n            });\n          });\n        };\n        /**\n         * Emulate TextTracks using vtt.js if necessary\n         *\n         * @fires Tech#vttjsloaded\n         * @fires Tech#vttjserror\n         * @fires Tech#texttrackchange\n         */\n\n\n        Tech.prototype.addWebVttScript_ = function addWebVttScript_() {\n          var _this4 = this;\n\n          if (!_window2['default'].WebVTT && this.el().parentNode !== null && this.el().parentNode !== undefined) {\n            (function () {\n              var script = _document2['default'].createElement('script');\n\n              script.src = _this4.options_['vtt.js'] || '../node_modules/videojs-vtt.js/dist/vtt.js';\n\n              script.onload = function () {\n                /**\n                 * Fired when vtt.js is loaded.\n                 *\n                 * @event Tech#vttjsloaded\n                 * @type {EventTarget~Event}\n                 */\n                _this4.trigger('vttjsloaded');\n              };\n\n              script.onerror = function () {\n                /**\n                 * Fired when vtt.js was not loaded due to an error\n                 *\n                 * @event Tech#vttjsloaded\n                 * @type {EventTarget~Event}\n                 */\n                _this4.trigger('vttjserror');\n              };\n\n              _this4.on('dispose', function () {\n                script.onload = null;\n                script.onerror = null;\n              }); // but have not loaded yet and we set it to true before the inject so that\n              // we don't overwrite the injected window.WebVTT if it loads right away\n\n\n              _window2['default'].WebVTT = true;\n\n              _this4.el().parentNode.appendChild(script);\n            })();\n          }\n        };\n        /**\n         * Emulate texttracks\n         *\n         * @method emulateTextTracks\n         */\n\n\n        Tech.prototype.emulateTextTracks = function emulateTextTracks() {\n          var _this5 = this;\n\n          var tracks = this.textTracks();\n\n          if (!tracks) {\n            return;\n          }\n\n          this.remoteTextTracks().on('addtrack', function (e) {\n            _this5.textTracks().addTrack_(e.track);\n          });\n          this.remoteTextTracks().on('removetrack', function (e) {\n            _this5.textTracks().removeTrack_(e.track);\n          }); // Initially, Tech.el_ is a child of a dummy-div wait until the Component system\n          // signals that the Tech is ready at which point Tech.el_ is part of the DOM\n          // before inserting the WebVTT script\n\n          this.on('ready', this.addWebVttScript_);\n\n          var updateDisplay = function updateDisplay() {\n            return _this5.trigger('texttrackchange');\n          };\n\n          var textTracksChanges = function textTracksChanges() {\n            updateDisplay();\n\n            for (var i = 0; i < tracks.length; i++) {\n              var track = tracks[i];\n              track.removeEventListener('cuechange', updateDisplay);\n\n              if (track.mode === 'showing') {\n                track.addEventListener('cuechange', updateDisplay);\n              }\n            }\n          };\n\n          textTracksChanges();\n          tracks.addEventListener('change', textTracksChanges);\n          this.on('dispose', function () {\n            tracks.removeEventListener('change', textTracksChanges);\n          });\n        };\n        /**\n         * Get the `Tech`s {@link VideoTrackList}.\n         *\n         * @return {VideoTrackList}\n         *          The video track list that the Tech is currently using.\n         */\n\n\n        Tech.prototype.videoTracks = function videoTracks() {\n          this.videoTracks_ = this.videoTracks_ || new _videoTrackList2['default']();\n          return this.videoTracks_;\n        };\n        /**\n         * Get the `Tech`s {@link AudioTrackList}.\n         *\n         * @return {AudioTrackList}\n         *          The audio track list that the Tech is currently using.\n         */\n\n\n        Tech.prototype.audioTracks = function audioTracks() {\n          this.audioTracks_ = this.audioTracks_ || new _audioTrackList2['default']();\n          return this.audioTracks_;\n        };\n        /**\n         * Get the `Tech`s {@link TextTrackList}.\n         *\n         * @return {TextTrackList}\n         *          The text track list that the Tech is currently using.\n         */\n\n\n        Tech.prototype.textTracks = function textTracks() {\n          this.textTracks_ = this.textTracks_ || new _textTrackList2['default']();\n          return this.textTracks_;\n        };\n        /**\n         * Get the `Tech`s remote {@link TextTrackList}, which is created from elements\n         * that were added to the DOM.\n         *\n         * @return {TextTrackList}\n         *          The remote text track list that the Tech is currently using.\n         */\n\n\n        Tech.prototype.remoteTextTracks = function remoteTextTracks() {\n          this.remoteTextTracks_ = this.remoteTextTracks_ || new _textTrackList2['default']();\n          return this.remoteTextTracks_;\n        };\n        /**\n         * Get The `Tech`s  {HTMLTrackElementList}, which are the elements in the DOM that are\n         * being used as TextTracks.\n         *\n         * @return {HTMLTrackElementList}\n         *          The current HTML track elements that exist for the tech.\n         */\n\n\n        Tech.prototype.remoteTextTrackEls = function remoteTextTrackEls() {\n          this.remoteTextTrackEls_ = this.remoteTextTrackEls_ || new _htmlTrackElementList2['default']();\n          return this.remoteTextTrackEls_;\n        };\n        /**\n         * Create and returns a remote {@link TextTrack} object.\n         *\n         * @param {string} kind\n         *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n         *\n         * @param {string} [label]\n         *        Label to identify the text track\n         *\n         * @param {string} [language]\n         *        Two letter language abbreviation\n         *\n         * @return {TextTrack}\n         *         The TextTrack that gets created.\n         */\n\n\n        Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n          if (!kind) {\n            throw new Error('TextTrack kind is required but was not provided');\n          }\n\n          return createTrackHelper(this, kind, label, language);\n        };\n        /**\n         * Create an emulated TextTrack for use by addRemoteTextTrack\n         *\n         * This is intended to be overridden by classes that inherit from\n         * Tech in order to create native or custom TextTracks.\n         *\n         * @param {Object} options\n         *        The object should contain the options to initialize the TextTrack with.\n         *\n         * @param {string} [options.kind]\n         *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n         *\n         * @param {string} [options.label].\n         *        Label to identify the text track\n         *\n         * @param {string} [options.language]\n         *        Two letter language abbreviation.\n         *\n         * @return {HTMLTrackElement}\n         *         The track element that gets created.\n         */\n\n\n        Tech.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {\n          var track = (0, _mergeOptions2['default'])(options, {\n            tech: this\n          });\n          return new _htmlTrackElement2['default'](track);\n        };\n        /**\n         * Creates a remote text track object and returns an html track element.\n         *\n         * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.\n         *\n         * @param {Object} options\n         *        See {@link Tech#createRemoteTextTrack} for more detailed properties.\n         *\n         * @param {boolean} [manualCleanup=true]\n         *        - When false: the TextTrack will be automatically removed from the video\n         *          element whenever the source changes\n         *        - When True: The TextTrack will have to be cleaned up manually\n         *\n         * @return {HTMLTrackElement}\n         *         An Html Track Element.\n         *\n         * @deprecated The default functionality for this function will be equivalent\n         *             to \"manualCleanup=false\" in the future. The manualCleanup parameter will\n         *             also be removed.\n         */\n\n\n        Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var manualCleanup = arguments[1];\n          var htmlTrackElement = this.createRemoteTextTrack(options);\n\n          if (manualCleanup !== true && manualCleanup !== false) {\n            // deprecation warning\n            _log2['default'].warn('Calling addRemoteTextTrack without explicitly setting the \"manualCleanup\" parameter to `true` is deprecated and default to `false` in future version of video.js');\n\n            manualCleanup = true;\n          } // store HTMLTrackElement and TextTrack to remote list\n\n\n          this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);\n          this.remoteTextTracks().addTrack_(htmlTrackElement.track);\n\n          if (manualCleanup !== true) {\n            // create the TextTrackList if it doesn't exist\n            this.autoRemoteTextTracks_.addTrack_(htmlTrackElement.track);\n          }\n\n          return htmlTrackElement;\n        };\n        /**\n         * Remove a remote text track from the remote `TextTrackList`.\n         *\n         * @param {TextTrack} track\n         *        `TextTrack` to remove from the `TextTrackList`\n         */\n\n\n        Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n          var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track); // remove HTMLTrackElement and TextTrack from remote list\n\n          this.remoteTextTrackEls().removeTrackElement_(trackElement);\n          this.remoteTextTracks().removeTrack_(track);\n          this.autoRemoteTextTracks_.removeTrack_(track);\n        };\n        /**\n         * A method to set a poster from a `Tech`.\n         *\n         * @abstract\n         */\n\n\n        Tech.prototype.setPoster = function setPoster() {};\n        /*\n         * Check if the tech can support the given mime-type.\n         *\n         * The base tech does not support any type, but source handlers might\n         * overwrite this.\n         *\n         * @param  {string} type\n         *         The mimetype to check for support\n         *\n         * @return {string}\n         *         'probably', 'maybe', or empty string\n         *\n         * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}\n         *\n         * @abstract\n         */\n\n\n        Tech.prototype.canPlayType = function canPlayType() {\n          return '';\n        };\n        /*\n         * Return whether the argument is a Tech or not.\n         * Can be passed either a Class like `Html5` or a instance like `player.tech_`\n         *\n         * @param {Object} component\n         *        The item to check\n         *\n         * @return {boolean}\n         *         Whether it is a tech or not\n         *         - True if it is a tech\n         *         - False if it is not\n         */\n\n\n        Tech.isTech = function isTech(component) {\n          return component.prototype instanceof Tech || component instanceof Tech || component === Tech;\n        };\n        /**\n         * Registers a `Tech` into a shared list for videojs.\n         *\n         * @param {string} name\n         *        Name of the `Tech` to register.\n         *\n         * @param {Object} tech\n         *        The `Tech` class to register.\n         */\n\n\n        Tech.registerTech = function registerTech(name, tech) {\n          if (!Tech.techs_) {\n            Tech.techs_ = {};\n          }\n\n          if (!Tech.isTech(tech)) {\n            throw new Error('Tech ' + name + ' must be a Tech');\n          }\n\n          Tech.techs_[name] = tech;\n          return tech;\n        };\n        /**\n         * Get a `Tech` from the shared list by name.\n         *\n         * @param {string} name\n         *        Name of the component to get\n         *\n         * @return {Tech|undefined}\n         *         The `Tech` or undefined if there was no tech with the name requsted.\n         */\n\n\n        Tech.getTech = function getTech(name) {\n          if (Tech.techs_ && Tech.techs_[name]) {\n            return Tech.techs_[name];\n          }\n\n          if (_window2['default'] && _window2['default'].videojs && _window2['default'].videojs[name]) {\n            _log2['default'].warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');\n\n            return _window2['default'].videojs[name];\n          }\n        };\n\n        return Tech;\n      }(_component2['default']);\n      /**\n       * List of associated text tracks.\n       *\n       * @type {TextTrackList}\n       * @private\n       */\n\n\n      Tech.prototype.textTracks_; // eslint-disable-line\n\n      /**\n       * List of associated audio tracks.\n       *\n       * @type {AudioTrackList}\n       * @private\n       */\n\n      Tech.prototype.audioTracks_; // eslint-disable-line\n\n      /**\n       * List of associated video tracks.\n       *\n       * @type {VideoTrackList}\n       * @private\n       */\n\n      Tech.prototype.videoTracks_; // eslint-disable-line\n\n      /**\n       * Boolean indicating wether the `Tech` supports volume control.\n       *\n       * @type {boolean}\n       * @default\n       */\n\n      Tech.prototype.featuresVolumeControl = true;\n      /**\n       * Boolean indicating wether the `Tech` support fullscreen resize control.\n       * Resizing plugins using request fullscreen reloads the plugin\n       *\n       * @type {boolean}\n       * @default\n       */\n\n      Tech.prototype.featuresFullscreenResize = false;\n      /**\n       * Boolean indicating wether the `Tech` supports changing the speed at which the video\n       * plays. Examples:\n       *   - Set player to play 2x (twice) as fast\n       *   - Set player to play 0.5x (half) as fast\n       *\n       * @type {boolean}\n       * @default\n       */\n\n      Tech.prototype.featuresPlaybackRate = false;\n      /**\n       * Boolean indicating wether the `Tech` supports the `progress` event. This is currently\n       * not triggered by video-js-swf. This will be used to determine if\n       * {@link Tech#manualProgressOn} should be called.\n       *\n       * @type {boolean}\n       * @default\n       */\n\n      Tech.prototype.featuresProgressEvents = false;\n      /**\n       * Boolean indicating wether the `Tech` supports the `timeupdate` event. This is currently\n       * not triggered by video-js-swf. This will be used to determine if\n       * {@link Tech#manualTimeUpdates} should be called.\n       *\n       * @type {boolean}\n       * @default\n       */\n\n      Tech.prototype.featuresTimeupdateEvents = false;\n      /**\n       * Boolean indicating wether the `Tech` supports the native `TextTrack`s.\n       * This will help us integrate with native `TextTrack`s if the browser supports them.\n       *\n       * @type {boolean}\n       * @default\n       */\n\n      Tech.prototype.featuresNativeTextTracks = false;\n      /**\n       * A functional mixin for techs that want to use the Source Handler pattern.\n       * Source handlers are scripts for handling specific formats.\n       * The source handler pattern is used for adaptive formats (HLS, DASH) that\n       * manually load video data and feed it into a Source Buffer (Media Source Extensions)\n       *\n       * ```js\n       *   Tech.withSourceHandlers.call(MyTech);\n       * ```\n       *\n       * @param {Tech} _Tech\n       *        The tech to add source handler functions to.\n       *\n       * @mixes Tech~SourceHandlerAdditions\n       */\n\n      Tech.withSourceHandlers = function (_Tech) {\n        /**\n         * Register a source handler\n         *\n         * @param {Function} handler\n         *        The source handler class\n         *\n         * @param {number} [index]\n         *        Register it at the following index\n         */\n        _Tech.registerSourceHandler = function (handler, index) {\n          var handlers = _Tech.sourceHandlers;\n\n          if (!handlers) {\n            handlers = _Tech.sourceHandlers = [];\n          }\n\n          if (index === undefined) {\n            // add to the end of the list\n            index = handlers.length;\n          }\n\n          handlers.splice(index, 0, handler);\n        };\n        /**\n         * Check if the tech can support the given type. Also checks the\n         * Techs sourceHandlers.\n         *\n         * @param {string} type\n         *         The mimetype to check.\n         *\n         * @return {string}\n         *         'probably', 'maybe', or '' (empty string)\n         */\n\n\n        _Tech.canPlayType = function (type) {\n          var handlers = _Tech.sourceHandlers || [];\n          var can = void 0;\n\n          for (var i = 0; i < handlers.length; i++) {\n            can = handlers[i].canPlayType(type);\n\n            if (can) {\n              return can;\n            }\n          }\n\n          return '';\n        };\n        /**\n         * Returns the first source handler that supports the source.\n         *\n         * TODO: Answer question: should 'probably' be prioritized over 'maybe'\n         *\n         * @param {Tech~SourceObject} source\n         *        The source object\n         *\n         * @param {Object} options\n         *        The options passed to the tech\n         *\n         * @return {SourceHandler|null}\n         *          The first source handler that supports the source or null if\n         *          no SourceHandler supports the source\n         */\n\n\n        _Tech.selectSourceHandler = function (source, options) {\n          var handlers = _Tech.sourceHandlers || [];\n          var can = void 0;\n\n          for (var i = 0; i < handlers.length; i++) {\n            can = handlers[i].canHandleSource(source, options);\n\n            if (can) {\n              return handlers[i];\n            }\n          }\n\n          return null;\n        };\n        /**\n         * Check if the tech can support the given source.\n         *\n         * @param {Tech~SourceObject} srcObj\n         *        The source object\n         *\n         * @param {Object} options\n         *        The options passed to the tech\n         *\n         * @return {string}\n         *         'probably', 'maybe', or '' (empty string)\n         */\n\n\n        _Tech.canPlaySource = function (srcObj, options) {\n          var sh = _Tech.selectSourceHandler(srcObj, options);\n\n          if (sh) {\n            return sh.canHandleSource(srcObj, options);\n          }\n\n          return '';\n        };\n        /**\n         * When using a source handler, prefer its implementation of\n         * any function normally provided by the tech.\n         */\n\n\n        var deferrable = ['seekable', 'duration'];\n        /**\n         * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable\n         * function if it exists, with a fallback to the Techs seekable function.\n         *\n         * @method _Tech.seekable\n         */\n\n        /**\n         * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration\n         * function if it exists, otherwise it will fallback to the techs duration function.\n         *\n         * @method _Tech.duration\n         */\n\n        deferrable.forEach(function (fnName) {\n          var originalFn = this[fnName];\n\n          if (typeof originalFn !== 'function') {\n            return;\n          }\n\n          this[fnName] = function () {\n            if (this.sourceHandler_ && this.sourceHandler_[fnName]) {\n              return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);\n            }\n\n            return originalFn.apply(this, arguments);\n          };\n        }, _Tech.prototype);\n        /**\n         * Create a function for setting the source using a source object\n         * and source handlers.\n         * Should never be called unless a source handler was found.\n         *\n         * @param {Tech~SourceObject} source\n         *        A source object with src and type keys\n         *\n         * @return {Tech}\n         *         Returns itself; this method is chainable\n         */\n\n        _Tech.prototype.setSource = function (source) {\n          var sh = _Tech.selectSourceHandler(source, this.options_);\n\n          if (!sh) {\n            // Fall back to a native source hander when unsupported sources are\n            // deliberately set\n            if (_Tech.nativeSourceHandler) {\n              sh = _Tech.nativeSourceHandler;\n            } else {\n              _log2['default'].error('No source hander found for the current source.');\n            }\n          } // Dispose any existing source handler\n\n\n          this.disposeSourceHandler();\n          this.off('dispose', this.disposeSourceHandler);\n\n          if (sh !== _Tech.nativeSourceHandler) {\n            this.currentSource_ = source; // Catch if someone replaced the src without calling setSource.\n            // If they do, set currentSource_ to null and dispose our source handler.\n\n            this.off(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);\n            this.off(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);\n            this.one(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);\n          }\n\n          this.sourceHandler_ = sh.handleSource(source, this, this.options_);\n          this.on('dispose', this.disposeSourceHandler);\n          return this;\n        };\n        /**\n         * Called once for the first loadstart of a video.\n         *\n         * @listens Tech#loadstart\n         */\n\n\n        _Tech.prototype.firstLoadStartListener_ = function () {\n          this.one(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);\n        }; // On successive loadstarts when setSource has not been called again\n\n        /**\n         * Called after the first loadstart for a video occurs.\n         *\n         * @listens Tech#loadstart\n         */\n\n\n        _Tech.prototype.successiveLoadStartListener_ = function () {\n          this.disposeSourceHandler();\n          this.one(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);\n        };\n        /**\n         * Clean up any existing SourceHandlers and listeners when the Tech is disposed.\n         *\n         * @listens Tech#dispose\n         */\n\n\n        _Tech.prototype.disposeSourceHandler = function () {\n          // if we have a source and get another one\n          // then we are loading something new\n          // than clear all of our current tracks\n          if (this.currentSource_) {\n            this.clearTracks(['audio', 'video']);\n            this.currentSource_ = null;\n          } // always clean up auto-text tracks\n\n\n          this.cleanupAutoTextTracks();\n\n          if (this.sourceHandler_) {\n            this.off(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);\n            this.off(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);\n\n            if (this.sourceHandler_.dispose) {\n              this.sourceHandler_.dispose();\n            }\n\n            this.sourceHandler_ = null;\n          }\n        };\n      };\n\n      _component2['default'].registerComponent('Tech', Tech); // Old name for Tech\n      // @deprecated\n\n\n      _component2['default'].registerComponent('MediaTechController', Tech);\n\n      Tech.registerTech('Tech', Tech);\n      exports['default'] = Tech;\n      /***/\n    },\n    /* 30 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      var _eventTarget = __webpack_require__(20);\n\n      var _eventTarget2 = _interopRequireDefault(_eventTarget);\n\n      var _textTrack = __webpack_require__(31);\n\n      var _textTrack2 = _interopRequireDefault(_textTrack);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file html-track-element.js\n       */\n\n      /**\n       * @typedef {HTMLTrackElement~ReadyState}\n       * @enum {number}\n       */\n\n\n      var NONE = 0;\n      var LOADING = 1;\n      var LOADED = 2;\n      var ERROR = 3;\n      /**\n       * A single track represented in the DOM.\n       *\n       * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}\n       * @extends EventTarget\n       */\n\n      var HTMLTrackElement = function (_EventTarget) {\n        _inherits(HTMLTrackElement, _EventTarget);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {Object} options={}\n         *        Object of option names and values\n         *\n         * @param {Tech} options.tech\n         *        A reference to the tech that owns this HTMLTrackElement.\n         *\n         * @param {TextTrack~Kind} [options.kind='subtitles']\n         *        A valid text track kind.\n         *\n         * @param {TextTrack~Mode} [options.mode='disabled']\n         *        A valid text track mode.\n         *\n         * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n         *        A unique id for this TextTrack.\n         *\n         * @param {string} [options.label='']\n         *        The menu label for this track.\n         *\n         * @param {string} [options.language='']\n         *        A valid two character language code.\n         *\n         * @param {string} [options.srclang='']\n         *        A valid two character language code. An alternative, but deprioritized\n         *        vesion of `options.language`\n         *\n         * @param {string} [options.src]\n         *        A url to TextTrack cues.\n         *\n         * @param {boolean} [options.default]\n         *        If this track should default to on or off.\n         */\n\n\n        function HTMLTrackElement() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n          _classCallCheck(this, HTMLTrackElement);\n\n          var _this = _possibleConstructorReturn(this, _EventTarget.call(this));\n\n          var readyState = void 0;\n          var trackElement = _this; // eslint-disable-line\n\n          if (browser.IS_IE8) {\n            trackElement = _document2['default'].createElement('custom');\n\n            for (var prop in HTMLTrackElement.prototype) {\n              if (prop !== 'constructor') {\n                trackElement[prop] = HTMLTrackElement.prototype[prop];\n              }\n            }\n          }\n\n          var track = new _textTrack2['default'](options);\n          trackElement.kind = track.kind;\n          trackElement.src = track.src;\n          trackElement.srclang = track.language;\n          trackElement.label = track.label;\n          trackElement['default'] = track['default'];\n          /**\n           * @member {HTMLTrackElement~ReadyState} readyState\n           *         The current ready state of the track element.\n           */\n\n          Object.defineProperty(trackElement, 'readyState', {\n            get: function get() {\n              return readyState;\n            }\n          });\n          /**\n           * @member {TextTrack} track\n           *         The underlying TextTrack object.\n           */\n\n          Object.defineProperty(trackElement, 'track', {\n            get: function get() {\n              return track;\n            }\n          });\n          readyState = NONE;\n          /**\n           * @listens TextTrack#loadeddata\n           * @fires HTMLTrackElement#load\n           */\n\n          track.addEventListener('loadeddata', function () {\n            readyState = LOADED;\n            trackElement.trigger({\n              type: 'load',\n              target: trackElement\n            });\n          });\n\n          if (browser.IS_IE8) {\n            var _ret;\n\n            return _ret = trackElement, _possibleConstructorReturn(_this, _ret);\n          }\n\n          return _this;\n        }\n\n        return HTMLTrackElement;\n      }(_eventTarget2['default']);\n\n      HTMLTrackElement.prototype.allowedEvents_ = {\n        load: 'load'\n      };\n      HTMLTrackElement.NONE = NONE;\n      HTMLTrackElement.LOADING = LOADING;\n      HTMLTrackElement.LOADED = LOADED;\n      HTMLTrackElement.ERROR = ERROR;\n      exports['default'] = HTMLTrackElement;\n      /***/\n    },\n    /* 31 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _textTrackCueList = __webpack_require__(32);\n\n      var _textTrackCueList2 = _interopRequireDefault(_textTrackCueList);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _trackEnums = __webpack_require__(33);\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      var _track = __webpack_require__(34);\n\n      var _track2 = _interopRequireDefault(_track);\n\n      var _url = __webpack_require__(35);\n\n      var _xhr = __webpack_require__(36);\n\n      var _xhr2 = _interopRequireDefault(_xhr);\n\n      var _mergeOptions = __webpack_require__(19);\n\n      var _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file text-track.js\n       */\n\n      /**\n       * Takes a webvtt file contents and parses it into cues\n       *\n       * @param {string} srcContent\n       *        webVTT file contents\n       *\n       * @param {TextTrack} track\n       *        TextTrack to add cues to. Cues come from the srcContent.\n       *\n       * @private\n       */\n\n\n      var parseCues = function parseCues(srcContent, track) {\n        var parser = new _window2['default'].WebVTT.Parser(_window2['default'], _window2['default'].vttjs, _window2['default'].WebVTT.StringDecoder());\n        var errors = [];\n\n        parser.oncue = function (cue) {\n          track.addCue(cue);\n        };\n\n        parser.onparsingerror = function (error) {\n          errors.push(error);\n        };\n\n        parser.onflush = function () {\n          track.trigger({\n            type: 'loadeddata',\n            target: track\n          });\n        };\n\n        parser.parse(srcContent);\n\n        if (errors.length > 0) {\n          if (_window2['default'].console && _window2['default'].console.groupCollapsed) {\n            _window2['default'].console.groupCollapsed('Text Track parsing errors for ' + track.src);\n          }\n\n          errors.forEach(function (error) {\n            return _log2['default'].error(error);\n          });\n\n          if (_window2['default'].console && _window2['default'].console.groupEnd) {\n            _window2['default'].console.groupEnd();\n          }\n        }\n\n        parser.flush();\n      };\n      /**\n       * Load a `TextTrack` from a specifed url.\n       *\n       * @param {string} src\n       *        Url to load track from.\n       *\n       * @param {TextTrack} track\n       *        Track to add cues to. Comes from the content at the end of `url`.\n       *\n       * @private\n       */\n\n\n      var loadTrack = function loadTrack(src, track) {\n        var opts = {\n          uri: src\n        };\n        var crossOrigin = (0, _url.isCrossOrigin)(src);\n\n        if (crossOrigin) {\n          opts.cors = crossOrigin;\n        }\n\n        (0, _xhr2['default'])(opts, Fn.bind(this, function (err, response, responseBody) {\n          if (err) {\n            return _log2['default'].error(err, response);\n          }\n\n          track.loaded_ = true; // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n          // NOTE: this is only used for the alt/video.novtt.js build\n\n          if (typeof _window2['default'].WebVTT !== 'function') {\n            if (track.tech_) {\n              (function () {\n                var loadHandler = function loadHandler() {\n                  return parseCues(responseBody, track);\n                };\n\n                track.tech_.on('vttjsloaded', loadHandler);\n                track.tech_.on('vttjserror', function () {\n                  _log2['default'].error('vttjs failed to load, stopping trying to process ' + track.src);\n\n                  track.tech_.off('vttjsloaded', loadHandler);\n                });\n              })();\n            }\n          } else {\n            parseCues(responseBody, track);\n          }\n        }));\n      };\n      /**\n       * A representation of a single `TextTrack`.\n       *\n       * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}\n       * @extends Track\n       */\n\n\n      var TextTrack = function (_Track) {\n        _inherits(TextTrack, _Track);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {Object} options={}\n         *        Object of option names and values\n         *\n         * @param {Tech} options.tech\n         *        A reference to the tech that owns this TextTrack.\n         *\n         * @param {TextTrack~Kind} [options.kind='subtitles']\n         *        A valid text track kind.\n         *\n         * @param {TextTrack~Mode} [options.mode='disabled']\n         *        A valid text track mode.\n         *\n         * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n         *        A unique id for this TextTrack.\n         *\n         * @param {string} [options.label='']\n         *        The menu label for this track.\n         *\n         * @param {string} [options.language='']\n         *        A valid two character language code.\n         *\n         * @param {string} [options.srclang='']\n         *        A valid two character language code. An alternative, but deprioritized\n         *        vesion of `options.language`\n         *\n         * @param {string} [options.src]\n         *        A url to TextTrack cues.\n         *\n         * @param {boolean} [options.default]\n         *        If this track should default to on or off.\n         */\n\n\n        function TextTrack() {\n          var _this, _ret2;\n\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n          _classCallCheck(this, TextTrack);\n\n          if (!options.tech) {\n            throw new Error('A tech was not provided.');\n          }\n\n          var settings = (0, _mergeOptions2['default'])(options, {\n            kind: _trackEnums.TextTrackKind[options.kind] || 'subtitles',\n            language: options.language || options.srclang || ''\n          });\n          var mode = _trackEnums.TextTrackMode[settings.mode] || 'disabled';\n          var default_ = settings['default'];\n\n          if (settings.kind === 'metadata' || settings.kind === 'chapters') {\n            mode = 'hidden';\n          } // on IE8 this will be a document element\n          // for every other browser this will be a normal object\n\n\n          var tt = (_this = _possibleConstructorReturn(this, _Track.call(this, settings)), _this);\n          tt.tech_ = settings.tech;\n\n          if (browser.IS_IE8) {\n            for (var prop in TextTrack.prototype) {\n              if (prop !== 'constructor') {\n                tt[prop] = TextTrack.prototype[prop];\n              }\n            }\n          }\n\n          tt.cues_ = [];\n          tt.activeCues_ = [];\n          var cues = new _textTrackCueList2['default'](tt.cues_);\n          var activeCues = new _textTrackCueList2['default'](tt.activeCues_);\n          var changed = false;\n          var timeupdateHandler = Fn.bind(tt, function () {\n            // Accessing this.activeCues for the side-effects of updating itself\n            // due to it's nature as a getter function. Do not remove or cues will\n            // stop updating!\n\n            /* eslint-disable no-unused-expressions */\n            this.activeCues;\n            /* eslint-enable no-unused-expressions */\n\n            if (changed) {\n              this.trigger('cuechange');\n              changed = false;\n            }\n          });\n\n          if (mode !== 'disabled') {\n            tt.tech_.on('timeupdate', timeupdateHandler);\n          }\n          /**\n           * @member {boolean} default\n           *         If this track was set to be on or off by default. Cannot be changed after\n           *         creation.\n           *\n           * @readonly\n           */\n\n\n          Object.defineProperty(tt, 'default', {\n            get: function get() {\n              return default_;\n            },\n            set: function set() {}\n          });\n          /**\n           * @member {string} mode\n           *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will\n           *         not be set if setting to an invalid mode.\n           *\n           * @fires TextTrack#modechange\n           */\n\n          Object.defineProperty(tt, 'mode', {\n            get: function get() {\n              return mode;\n            },\n            set: function set(newMode) {\n              if (!_trackEnums.TextTrackMode[newMode]) {\n                return;\n              }\n\n              mode = newMode;\n\n              if (mode === 'showing') {\n                this.tech_.on('timeupdate', timeupdateHandler);\n              }\n              /**\n               * An event that fires when mode changes on this track. This allows\n               * the TextTrackList that holds this track to act accordingly.\n               *\n               * > Note: This is not part of the spec!\n               *\n               * @event TextTrack#modechange\n               * @type {EventTarget~Event}\n               */\n\n\n              this.trigger('modechange');\n            }\n          });\n          /**\n           * @member {TextTrackCueList} cues\n           *         The text track cue list for this TextTrack.\n           */\n\n          Object.defineProperty(tt, 'cues', {\n            get: function get() {\n              if (!this.loaded_) {\n                return null;\n              }\n\n              return cues;\n            },\n            set: function set() {}\n          });\n          /**\n           * @member {TextTrackCueList} activeCues\n           *         The list text track cues that are currently active for this TextTrack.\n           */\n\n          Object.defineProperty(tt, 'activeCues', {\n            get: function get() {\n              if (!this.loaded_) {\n                return null;\n              } // nothing to do\n\n\n              if (this.cues.length === 0) {\n                return activeCues;\n              }\n\n              var ct = this.tech_.currentTime();\n              var active = [];\n\n              for (var i = 0, l = this.cues.length; i < l; i++) {\n                var cue = this.cues[i];\n\n                if (cue.startTime <= ct && cue.endTime >= ct) {\n                  active.push(cue);\n                } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {\n                  active.push(cue);\n                }\n              }\n\n              changed = false;\n\n              if (active.length !== this.activeCues_.length) {\n                changed = true;\n              } else {\n                for (var _i = 0; _i < active.length; _i++) {\n                  if (this.activeCues_.indexOf(active[_i]) === -1) {\n                    changed = true;\n                  }\n                }\n              }\n\n              this.activeCues_ = active;\n              activeCues.setCues_(this.activeCues_);\n              return activeCues;\n            },\n            set: function set() {}\n          });\n\n          if (settings.src) {\n            tt.src = settings.src;\n            loadTrack(settings.src, tt);\n          } else {\n            tt.loaded_ = true;\n          }\n\n          return _ret2 = tt, _possibleConstructorReturn(_this, _ret2);\n        }\n        /**\n         * Add a cue to the internal list of cues.\n         *\n         * @param {TextTrack~Cue} cue\n         *        The cue to add to our internal list\n         */\n\n\n        TextTrack.prototype.addCue = function addCue(cue) {\n          var tracks = this.tech_.textTracks();\n\n          if (tracks) {\n            for (var i = 0; i < tracks.length; i++) {\n              if (tracks[i] !== this) {\n                tracks[i].removeCue(cue);\n              }\n            }\n          }\n\n          this.cues_.push(cue);\n          this.cues.setCues_(this.cues_);\n        };\n        /**\n         * Remove a cue from our internal list\n         *\n         * @param {TextTrack~Cue} removeCue\n         *        The cue to remove from our internal list\n         */\n\n\n        TextTrack.prototype.removeCue = function removeCue(_removeCue) {\n          var removed = false;\n\n          for (var i = 0, l = this.cues_.length; i < l; i++) {\n            var cue = this.cues_[i];\n\n            if (cue === _removeCue) {\n              this.cues_.splice(i, 1);\n              removed = true;\n            }\n          }\n\n          if (removed) {\n            this.cues.setCues_(this.cues_);\n          }\n        };\n\n        return TextTrack;\n      }(_track2['default']);\n      /**\n       * cuechange - One or more cues in the track have become active or stopped being active.\n       */\n\n\n      TextTrack.prototype.allowedEvents_ = {\n        cuechange: 'cuechange'\n      };\n      exports['default'] = TextTrack;\n      /***/\n    },\n    /* 32 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /**\n       * @file text-track-cue-list.js\n       */\n\n      /**\n       * @typedef {Object} TextTrackCue\n       *\n       * @property {string} id\n       *           The unique id for this text track cue\n       *\n       * @property {number} startTime\n       *           The start time for this text track cue\n       *\n       * @property {number} endTime\n       *           The end time for this text track cue\n       *\n       * @property {boolean} pauseOnExit\n       *           Pause when the end time is reached if true.\n       *\n       * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}\n       */\n\n      /**\n       * A List of TextTrackCues.\n       *\n       * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}\n       */\n\n\n      var TextTrackCueList = function () {\n        /**\n         * Create an instance of this class..\n         *\n         * @param {Array} cues\n         *        A list of cues to be initialized with\n         */\n        function TextTrackCueList(cues) {\n          _classCallCheck(this, TextTrackCueList);\n\n          var list = this; // eslint-disable-line\n\n          if (browser.IS_IE8) {\n            list = _document2['default'].createElement('custom');\n\n            for (var prop in TextTrackCueList.prototype) {\n              if (prop !== 'constructor') {\n                list[prop] = TextTrackCueList.prototype[prop];\n              }\n            }\n          }\n\n          TextTrackCueList.prototype.setCues_.call(list, cues);\n          /**\n           * @member {number} length\n           *         The current number of `TextTrackCue`s in the TextTrackCueList.\n           */\n\n          Object.defineProperty(list, 'length', {\n            get: function get() {\n              return this.length_;\n            }\n          });\n\n          if (browser.IS_IE8) {\n            return list;\n          }\n        }\n        /**\n         * A setter for cues in this list. Creates getters\n         * an an index for the cues.\n         *\n         * @param {Array} cues\n         *        An array of cues to set\n         *\n         * @private\n         */\n\n\n        TextTrackCueList.prototype.setCues_ = function setCues_(cues) {\n          var oldLength = this.length || 0;\n          var i = 0;\n          var l = cues.length;\n          this.cues_ = cues;\n          this.length_ = cues.length;\n\n          var defineProp = function defineProp(index) {\n            if (!('' + index in this)) {\n              Object.defineProperty(this, '' + index, {\n                get: function get() {\n                  return this.cues_[index];\n                }\n              });\n            }\n          };\n\n          if (oldLength < l) {\n            i = oldLength;\n\n            for (; i < l; i++) {\n              defineProp.call(this, i);\n            }\n          }\n        };\n        /**\n         * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.\n         *\n         * @param {string} id\n         *        The id of the cue that should be searched for.\n         *\n         * @return {TextTrackCue|null}\n         *         A single cue or null if none was found.\n         */\n\n\n        TextTrackCueList.prototype.getCueById = function getCueById(id) {\n          var result = null;\n\n          for (var i = 0, l = this.length; i < l; i++) {\n            var cue = this[i];\n\n            if (cue.id === id) {\n              result = cue;\n              break;\n            }\n          }\n\n          return result;\n        };\n\n        return TextTrackCueList;\n      }();\n\n      exports['default'] = TextTrackCueList;\n      /***/\n    },\n    /* 33 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      /**\n       * @file track-kinds.js\n       */\n\n      /**\n       * All possible `VideoTrackKind`s\n       *\n       * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind\n       * @typedef VideoTrack~Kind\n       * @enum\n       */\n\n      var VideoTrackKind = exports.VideoTrackKind = {\n        alternative: 'alternative',\n        captions: 'captions',\n        main: 'main',\n        sign: 'sign',\n        subtitles: 'subtitles',\n        commentary: 'commentary'\n      };\n      /**\n       * All possible `AudioTrackKind`s\n       *\n       * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind\n       * @typedef AudioTrack~Kind\n       * @enum\n       */\n\n      var AudioTrackKind = exports.AudioTrackKind = {\n        'alternative': 'alternative',\n        'descriptions': 'descriptions',\n        'main': 'main',\n        'main-desc': 'main-desc',\n        'translation': 'translation',\n        'commentary': 'commentary'\n      };\n      /**\n       * All possible `TextTrackKind`s\n       *\n       * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind\n       * @typedef TextTrack~Kind\n       * @enum\n       */\n\n      var TextTrackKind = exports.TextTrackKind = {\n        subtitles: 'subtitles',\n        captions: 'captions',\n        descriptions: 'descriptions',\n        chapters: 'chapters',\n        metadata: 'metadata'\n      };\n      /**\n       * All possible `TextTrackMode`s\n       *\n       * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode\n       * @typedef TextTrack~Mode\n       * @enum\n       */\n\n      var TextTrackMode = exports.TextTrackMode = {\n        disabled: 'disabled',\n        hidden: 'hidden',\n        showing: 'showing'\n      };\n      /***/\n    },\n    /* 34 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      var _guid = __webpack_require__(10);\n\n      var Guid = _interopRequireWildcard(_guid);\n\n      var _eventTarget = __webpack_require__(20);\n\n      var _eventTarget2 = _interopRequireDefault(_eventTarget);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file track.js\n       */\n\n      /**\n       * A Track class that contains all of the common functionality for {@link AudioTrack},\n       * {@link VideoTrack}, and {@link TextTrack}.\n       *\n       * > Note: This class should not be used directly\n       *\n       * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}\n       * @extends EventTarget\n       * @abstract\n       */\n\n\n      var Track = function (_EventTarget) {\n        _inherits(Track, _EventTarget);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {Object} [options={}]\n         *        Object of option names and values\n         *\n         * @param {string} [options.kind='']\n         *        A valid kind for the track type you are creating.\n         *\n         * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n         *        A unique id for this AudioTrack.\n         *\n         * @param {string} [options.label='']\n         *        The menu label for this track.\n         *\n         * @param {string} [options.language='']\n         *        A valid two character language code.\n         *\n         * @abstract\n         */\n\n\n        function Track() {\n          var _ret;\n\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n          _classCallCheck(this, Track);\n\n          var _this = _possibleConstructorReturn(this, _EventTarget.call(this));\n\n          var track = _this; // eslint-disable-line\n\n          if (browser.IS_IE8) {\n            track = _document2['default'].createElement('custom');\n\n            for (var prop in Track.prototype) {\n              if (prop !== 'constructor') {\n                track[prop] = Track.prototype[prop];\n              }\n            }\n          }\n\n          var trackProps = {\n            id: options.id || 'vjs_track_' + Guid.newGUID(),\n            kind: options.kind || '',\n            label: options.label || '',\n            language: options.language || ''\n          };\n          /**\n           * @member {string} id\n           *         The id of this track. Cannot be changed after creation.\n           *\n           * @readonly\n           */\n\n          /**\n           * @member {string} kind\n           *         The kind of track that this is. Cannot be changed after creation.\n           *\n           * @readonly\n           */\n\n          /**\n           * @member {string} label\n           *         The label of this track. Cannot be changed after creation.\n           *\n           * @readonly\n           */\n\n          /**\n           * @member {string} language\n           *         The two letter language code for this track. Cannot be changed after\n           *         creation.\n           *\n           * @readonly\n           */\n\n          var _loop = function _loop(key) {\n            Object.defineProperty(track, key, {\n              get: function get() {\n                return trackProps[key];\n              },\n              set: function set() {}\n            });\n          };\n\n          for (var key in trackProps) {\n            _loop(key);\n          }\n\n          return _ret = track, _possibleConstructorReturn(_this, _ret);\n        }\n\n        return Track;\n      }(_eventTarget2['default']);\n\n      exports['default'] = Track;\n      /***/\n    },\n    /* 35 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.isCrossOrigin = exports.getFileExtension = exports.getAbsoluteURL = exports.parseUrl = undefined;\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n      /**\n       * @typedef {Object} url:URLObject\n       *\n       * @property {string} protocol\n       *           The protocol of the url that was parsed.\n       *\n       * @property {string} hostname\n       *           The hostname of the url that was parsed.\n       *\n       * @property {string} port\n       *           The port of the url that was parsed.\n       *\n       * @property {string} pathname\n       *           The pathname of the url that was parsed.\n       *\n       * @property {string} search\n       *           The search query of the url that was parsed.\n       *\n       * @property {string} hash\n       *           The hash of the url that was parsed.\n       *\n       * @property {string} host\n       *           The host of the url that was parsed.\n       */\n\n      /**\n       * Resolve and parse the elements of a URL.\n       *\n       * @param  {String} url\n       *         The url to parse\n       *\n       * @return {url:URLObject}\n       *         An object of url details\n       */\n\n      /**\n       * @file url.js\n       * @module url\n       */\n\n\n      var parseUrl = exports.parseUrl = function parseUrl(url) {\n        var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host']; // add the url to an anchor and let the browser parse the URL\n\n        var a = _document2['default'].createElement('a');\n\n        a.href = url; // IE8 (and 9?) Fix\n        // ie8 doesn't parse the URL correctly until the anchor is actually\n        // added to the body, and an innerHTML is needed to trigger the parsing\n\n        var addToBody = a.host === '' && a.protocol !== 'file:';\n        var div = void 0;\n\n        if (addToBody) {\n          div = _document2['default'].createElement('div');\n          div.innerHTML = '<a href=\"' + url + '\"></a>';\n          a = div.firstChild; // prevent the div from affecting layout\n\n          div.setAttribute('style', 'display:none; position:absolute;');\n\n          _document2['default'].body.appendChild(div);\n        } // Copy the specific URL properties to a new object\n        // This is also needed for IE8 because the anchor loses its\n        // properties when it's removed from the dom\n\n\n        var details = {};\n\n        for (var i = 0; i < props.length; i++) {\n          details[props[i]] = a[props[i]];\n        } // IE9 adds the port to the host property unlike everyone else. If\n        // a port identifier is added for standard ports, strip it.\n\n\n        if (details.protocol === 'http:') {\n          details.host = details.host.replace(/:80$/, '');\n        }\n\n        if (details.protocol === 'https:') {\n          details.host = details.host.replace(/:443$/, '');\n        }\n\n        if (addToBody) {\n          _document2['default'].body.removeChild(div);\n        }\n\n        return details;\n      };\n      /**\n       * Get absolute version of relative URL. Used to tell flash correct URL.\n       *\n       *\n       * @param  {string} url\n       *         URL to make absolute\n       *\n       * @return {string}\n       *         Absolute URL\n       *\n       * @see http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue\n       */\n\n\n      var getAbsoluteURL = exports.getAbsoluteURL = function getAbsoluteURL(url) {\n        // Check if absolute URL\n        if (!url.match(/^https?:\\/\\//)) {\n          // Convert to absolute URL. Flash hosted off-site needs an absolute URL.\n          var div = _document2['default'].createElement('div');\n\n          div.innerHTML = '<a href=\"' + url + '\">x</a>';\n          url = div.firstChild.href;\n        }\n\n        return url;\n      };\n      /**\n       * Returns the extension of the passed file name. It will return an empty string\n       * if passed an invalid path.\n       *\n       * @param {string} path\n       *        The fileName path like '/path/to/file.mp4'\n       *\n       * @returns {string}\n       *          The extension in lower case or an empty string if no\n       *          extension could be found.\n       */\n\n\n      var getFileExtension = exports.getFileExtension = function getFileExtension(path) {\n        if (typeof path === 'string') {\n          var splitPathRe = /^(\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?)(\\.([^\\.\\/\\?]+)))(?:[\\/]*|[\\?].*)$/i;\n          var pathParts = splitPathRe.exec(path);\n\n          if (pathParts) {\n            return pathParts.pop().toLowerCase();\n          }\n        }\n\n        return '';\n      };\n      /**\n       * Returns whether the url passed is a cross domain request or not.\n       *\n       * @param {string} url\n       *        The url to check.\n       *\n       * @return {boolean}\n       *         Whether it is a cross domain request or not.\n       */\n\n\n      var isCrossOrigin = exports.isCrossOrigin = function isCrossOrigin(url) {\n        var winLoc = _window2['default'].location;\n        var urlInfo = parseUrl(url); // IE8 protocol relative urls will return ':' for protocol\n\n        var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol; // Check if url is for another domain/origin\n        // IE8 doesn't know location.origin, so we won't rely on it here\n\n        var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;\n        return crossOrigin;\n      };\n      /***/\n\n    },\n    /* 36 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var window = __webpack_require__(4);\n\n      var once = __webpack_require__(37);\n\n      var isFunction = __webpack_require__(38);\n\n      var parseHeaders = __webpack_require__(39);\n\n      var xtend = __webpack_require__(42);\n\n      module.exports = createXHR;\n      createXHR.XMLHttpRequest = window.XMLHttpRequest || noop;\n      createXHR.XDomainRequest = \"withCredentials\" in new createXHR.XMLHttpRequest() ? createXHR.XMLHttpRequest : window.XDomainRequest;\n      forEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function (method) {\n        createXHR[method === \"delete\" ? \"del\" : method] = function (uri, options, callback) {\n          options = initParams(uri, options, callback);\n          options.method = method.toUpperCase();\n          return _createXHR(options);\n        };\n      });\n\n      function forEachArray(array, iterator) {\n        for (var i = 0; i < array.length; i++) {\n          iterator(array[i]);\n        }\n      }\n\n      function isEmpty(obj) {\n        for (var i in obj) {\n          if (obj.hasOwnProperty(i)) return false;\n        }\n\n        return true;\n      }\n\n      function initParams(uri, options, callback) {\n        var params = uri;\n\n        if (isFunction(options)) {\n          callback = options;\n\n          if (typeof uri === \"string\") {\n            params = {\n              uri: uri\n            };\n          }\n        } else {\n          params = xtend(options, {\n            uri: uri\n          });\n        }\n\n        params.callback = callback;\n        return params;\n      }\n\n      function createXHR(uri, options, callback) {\n        options = initParams(uri, options, callback);\n        return _createXHR(options);\n      }\n\n      function _createXHR(options) {\n        var callback = options.callback;\n\n        if (typeof callback === \"undefined\") {\n          throw new Error(\"callback argument missing\");\n        }\n\n        callback = once(callback);\n\n        function readystatechange() {\n          if (xhr.readyState === 4) {\n            loadFunc();\n          }\n        }\n\n        function getBody() {\n          // Chrome with requestType=blob throws errors arround when even testing access to responseText\n          var body = undefined;\n\n          if (xhr.response) {\n            body = xhr.response;\n          } else if (xhr.responseType === \"text\" || !xhr.responseType) {\n            body = xhr.responseText || xhr.responseXML;\n          }\n\n          if (isJson) {\n            try {\n              body = JSON.parse(body);\n            } catch (e) {}\n          }\n\n          return body;\n        }\n\n        var failureResponse = {\n          body: undefined,\n          headers: {},\n          statusCode: 0,\n          method: method,\n          url: uri,\n          rawRequest: xhr\n        };\n\n        function errorFunc(evt) {\n          clearTimeout(timeoutTimer);\n\n          if (!(evt instanceof Error)) {\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\"));\n          }\n\n          evt.statusCode = 0;\n          callback(evt, failureResponse);\n        } // will load the data & process the response in a special response object\n\n\n        function loadFunc() {\n          if (aborted) return;\n          var status;\n          clearTimeout(timeoutTimer);\n\n          if (options.useXDR && xhr.status === undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200;\n          } else {\n            status = xhr.status === 1223 ? 204 : xhr.status;\n          }\n\n          var response = failureResponse;\n          var err = null;\n\n          if (status !== 0) {\n            response = {\n              body: getBody(),\n              statusCode: status,\n              method: method,\n              headers: {},\n              url: uri,\n              rawRequest: xhr\n            };\n\n            if (xhr.getAllResponseHeaders) {\n              //remember xhr can in fact be XDR for CORS in IE\n              response.headers = parseHeaders(xhr.getAllResponseHeaders());\n            }\n          } else {\n            err = new Error(\"Internal XMLHttpRequest Error\");\n          }\n\n          callback(err, response, response.body);\n        }\n\n        var xhr = options.xhr || null;\n\n        if (!xhr) {\n          if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest();\n          } else {\n            xhr = new createXHR.XMLHttpRequest();\n          }\n        }\n\n        var key;\n        var aborted;\n        var uri = xhr.url = options.uri || options.url;\n        var method = xhr.method = options.method || \"GET\";\n        var body = options.body || options.data || null;\n        var headers = xhr.headers = options.headers || {};\n        var sync = !!options.sync;\n        var isJson = false;\n        var timeoutTimer;\n\n        if (\"json\" in options) {\n          isJson = true;\n          headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\"); //Don't override existing accept header declared by user\n\n          if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\"); //Don't override existing accept header declared by user\n\n            body = JSON.stringify(options.json);\n          }\n        }\n\n        xhr.onreadystatechange = readystatechange;\n        xhr.onload = loadFunc;\n        xhr.onerror = errorFunc; // IE9 must have onprogress be set to a unique function.\n\n        xhr.onprogress = function () {// IE must die\n        };\n\n        xhr.ontimeout = errorFunc;\n        xhr.open(method, uri, !sync, options.username, options.password); //has to be after open\n\n        if (!sync) {\n          xhr.withCredentials = !!options.withCredentials;\n        } // Cannot set timeout with sync request\n        // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n        // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n\n\n        if (!sync && options.timeout > 0) {\n          timeoutTimer = setTimeout(function () {\n            aborted = true; //IE9 may still call readystatechange\n\n            xhr.abort(\"timeout\");\n            var e = new Error(\"XMLHttpRequest timeout\");\n            e.code = \"ETIMEDOUT\";\n            errorFunc(e);\n          }, options.timeout);\n        }\n\n        if (xhr.setRequestHeader) {\n          for (key in headers) {\n            if (headers.hasOwnProperty(key)) {\n              xhr.setRequestHeader(key, headers[key]);\n            }\n          }\n        } else if (options.headers && !isEmpty(options.headers)) {\n          throw new Error(\"Headers cannot be set on an XDomainRequest object\");\n        }\n\n        if (\"responseType\" in options) {\n          xhr.responseType = options.responseType;\n        }\n\n        if (\"beforeSend\" in options && typeof options.beforeSend === \"function\") {\n          options.beforeSend(xhr);\n        }\n\n        xhr.send(body);\n        return xhr;\n      }\n\n      function noop() {}\n      /***/\n\n    },\n    /* 37 */\n\n    /***/\n    function (module, exports) {\n      module.exports = once;\n      once.proto = once(function () {\n        Object.defineProperty(Function.prototype, 'once', {\n          value: function value() {\n            return once(this);\n          },\n          configurable: true\n        });\n      });\n\n      function once(fn) {\n        var called = false;\n        return function () {\n          if (called) return;\n          called = true;\n          return fn.apply(this, arguments);\n        };\n      }\n      /***/\n\n    },\n    /* 38 */\n\n    /***/\n    function (module, exports) {\n      module.exports = isFunction;\n      var toString = Object.prototype.toString;\n\n      function isFunction(fn) {\n        var string = toString.call(fn);\n        return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && ( // IE8 and below\n        fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt);\n      }\n\n      ;\n      /***/\n    },\n    /* 39 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var trim = __webpack_require__(40),\n          forEach = __webpack_require__(41),\n          isArray = function isArray(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n      };\n\n      module.exports = function (headers) {\n        if (!headers) return {};\n        var result = {};\n        forEach(trim(headers).split('\\n'), function (row) {\n          var index = row.indexOf(':'),\n              key = trim(row.slice(0, index)).toLowerCase(),\n              value = trim(row.slice(index + 1));\n\n          if (typeof result[key] === 'undefined') {\n            result[key] = value;\n          } else if (isArray(result[key])) {\n            result[key].push(value);\n          } else {\n            result[key] = [result[key], value];\n          }\n        });\n        return result;\n      };\n      /***/\n\n    },\n    /* 40 */\n\n    /***/\n    function (module, exports) {\n      exports = module.exports = trim;\n\n      function trim(str) {\n        return str.replace(/^\\s*|\\s*$/g, '');\n      }\n\n      exports.left = function (str) {\n        return str.replace(/^\\s*/, '');\n      };\n\n      exports.right = function (str) {\n        return str.replace(/\\s*$/, '');\n      };\n      /***/\n\n    },\n    /* 41 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var isFunction = __webpack_require__(38);\n\n      module.exports = forEach;\n      var toString = Object.prototype.toString;\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n      function forEach(list, iterator, context) {\n        if (!isFunction(iterator)) {\n          throw new TypeError('iterator must be a function');\n        }\n\n        if (arguments.length < 3) {\n          context = this;\n        }\n\n        if (toString.call(list) === '[object Array]') forEachArray(list, iterator, context);else if (typeof list === 'string') forEachString(list, iterator, context);else forEachObject(list, iterator, context);\n      }\n\n      function forEachArray(array, iterator, context) {\n        for (var i = 0, len = array.length; i < len; i++) {\n          if (hasOwnProperty.call(array, i)) {\n            iterator.call(context, array[i], i, array);\n          }\n        }\n      }\n\n      function forEachString(string, iterator, context) {\n        for (var i = 0, len = string.length; i < len; i++) {\n          // no such thing as a sparse string.\n          iterator.call(context, string.charAt(i), i, string);\n        }\n      }\n\n      function forEachObject(object, iterator, context) {\n        for (var k in object) {\n          if (hasOwnProperty.call(object, k)) {\n            iterator.call(context, object[k], k, object);\n          }\n        }\n      }\n      /***/\n\n    },\n    /* 42 */\n\n    /***/\n    function (module, exports) {\n      module.exports = extend;\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n      function extend() {\n        var target = {};\n\n        for (var i = 0; i < arguments.length; i++) {\n          var source = arguments[i];\n\n          for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n\n        return target;\n      }\n      /***/\n\n    },\n    /* 43 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /**\n       * @file html-track-element-list.js\n       */\n\n      /**\n       * The current list of {@link HtmlTrackElement}s.\n       */\n\n\n      var HtmlTrackElementList = function () {\n        /**\n         * Create an instance of this class.\n         *\n         * @param {HtmlTrackElement[]} [tracks=[]]\n         *        A list of `HtmlTrackElement` to instantiate the list with.\n         */\n        function HtmlTrackElementList() {\n          var trackElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n          _classCallCheck(this, HtmlTrackElementList);\n\n          var list = this; // eslint-disable-line\n\n          if (browser.IS_IE8) {\n            list = _document2['default'].createElement('custom');\n\n            for (var prop in HtmlTrackElementList.prototype) {\n              if (prop !== 'constructor') {\n                list[prop] = HtmlTrackElementList.prototype[prop];\n              }\n            }\n          }\n\n          list.trackElements_ = [];\n          /**\n           * @member {number} length\n           *         The current number of `Track`s in the this Trackist.\n           */\n\n          Object.defineProperty(list, 'length', {\n            get: function get() {\n              return this.trackElements_.length;\n            }\n          });\n\n          for (var i = 0, length = trackElements.length; i < length; i++) {\n            list.addTrackElement_(trackElements[i]);\n          }\n\n          if (browser.IS_IE8) {\n            return list;\n          }\n        }\n        /**\n         * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`\n         *\n         * @param {HtmlTrackElement} trackElement\n         *        The track element to add to the list.\n         *\n         * @private\n         */\n\n\n        HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {\n          var index = this.trackElements_.length;\n\n          if (!('' + index in this)) {\n            Object.defineProperty(this, index, {\n              get: function get() {\n                return this.trackElements_[index];\n              }\n            });\n          } // Do not add duplicate elements\n\n\n          if (this.trackElements_.indexOf(trackElement) === -1) {\n            this.trackElements_.push(trackElement);\n          }\n        };\n        /**\n         * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an\n         * {@link TextTrack}.\n         *\n         * @param {TextTrack} track\n         *        The track associated with a track element.\n         *\n         * @return {HtmlTrackElement|undefined}\n         *         The track element that was found or undefined.\n         *\n         * @private\n         */\n\n\n        HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {\n          var trackElement_ = void 0;\n\n          for (var i = 0, length = this.trackElements_.length; i < length; i++) {\n            if (track === this.trackElements_[i].track) {\n              trackElement_ = this.trackElements_[i];\n              break;\n            }\n          }\n\n          return trackElement_;\n        };\n        /**\n         * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`\n         *\n         * @param {HtmlTrackElement} trackElement\n         *        The track element to remove from the list.\n         *\n         * @private\n         */\n\n\n        HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {\n          for (var i = 0, length = this.trackElements_.length; i < length; i++) {\n            if (trackElement === this.trackElements_[i]) {\n              this.trackElements_.splice(i, 1);\n              break;\n            }\n          }\n        };\n\n        return HtmlTrackElementList;\n      }();\n\n      exports['default'] = HtmlTrackElementList;\n      /***/\n    },\n    /* 44 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _trackList = __webpack_require__(45);\n\n      var _trackList2 = _interopRequireDefault(_trackList);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file text-track-list.js\n       */\n\n      /**\n       * The current list of {@link TextTrack} for a media file.\n       *\n       * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}\n       * @extends TrackList\n       */\n\n\n      var TextTrackList = function (_TrackList) {\n        _inherits(TextTrackList, _TrackList);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {TextTrack[]} [tracks=[]]\n         *        A list of `TextTrack` to instantiate the list with.\n         */\n\n\n        function TextTrackList() {\n          var _this, _ret;\n\n          var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n          _classCallCheck(this, TextTrackList);\n\n          var list = void 0; // IE8 forces us to implement inheritance ourselves\n          // as it does not support Object.defineProperty properly\n\n          if (browser.IS_IE8) {\n            list = _document2['default'].createElement('custom');\n\n            for (var prop in _trackList2['default'].prototype) {\n              if (prop !== 'constructor') {\n                list[prop] = _trackList2['default'].prototype[prop];\n              }\n            }\n\n            for (var _prop in TextTrackList.prototype) {\n              if (_prop !== 'constructor') {\n                list[_prop] = TextTrackList.prototype[_prop];\n              }\n            }\n          }\n\n          list = (_this = _possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);\n          return _ret = list, _possibleConstructorReturn(_this, _ret);\n        }\n        /**\n         * Add a {@link TextTrack} to the `TextTrackList`\n         *\n         * @param {TextTrack} track\n         *        The text track to add to the list.\n         *\n         * @fires TrackList#addtrack\n         * @private\n         */\n\n\n        TextTrackList.prototype.addTrack_ = function addTrack_(track) {\n          _TrackList.prototype.addTrack_.call(this, track);\n          /**\n           * @listens TextTrack#modechange\n           * @fires TrackList#change\n           */\n\n\n          track.addEventListener('modechange', Fn.bind(this, function () {\n            this.trigger('change');\n          }));\n        };\n\n        return TextTrackList;\n      }(_trackList2['default']);\n\n      exports['default'] = TextTrackList;\n      /***/\n    },\n    /* 45 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _eventTarget = __webpack_require__(20);\n\n      var _eventTarget2 = _interopRequireDefault(_eventTarget);\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file track-list.js\n       */\n\n      /**\n       * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and\n       * {@link VideoTrackList}\n       *\n       * @extends EventTarget\n       */\n\n\n      var TrackList = function (_EventTarget) {\n        _inherits(TrackList, _EventTarget);\n        /**\n         * Create an instance of this class\n         *\n         * @param {Track[]} tracks\n         *        A list of tracks to initialize the list with.\n         *\n         * @param {Object} [list]\n         *        The child object with inheritance done manually for ie8.\n         *\n         * @abstract\n         */\n\n\n        function TrackList() {\n          var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n          var _ret;\n\n          var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n          _classCallCheck(this, TrackList);\n\n          var _this = _possibleConstructorReturn(this, _EventTarget.call(this));\n\n          if (!list) {\n            list = _this; // eslint-disable-line\n\n            if (browser.IS_IE8) {\n              list = _document2['default'].createElement('custom');\n\n              for (var prop in TrackList.prototype) {\n                if (prop !== 'constructor') {\n                  list[prop] = TrackList.prototype[prop];\n                }\n              }\n            }\n          }\n\n          list.tracks_ = [];\n          /**\n           * @member {number} length\n           *         The current number of `Track`s in the this Trackist.\n           */\n\n          Object.defineProperty(list, 'length', {\n            get: function get() {\n              return this.tracks_.length;\n            }\n          });\n\n          for (var i = 0; i < tracks.length; i++) {\n            list.addTrack_(tracks[i]);\n          } // must return the object, as for ie8 it will not be this\n          // but a reference to a document object\n\n\n          return _ret = list, _possibleConstructorReturn(_this, _ret);\n        }\n        /**\n         * Add a {@link Track} to the `TrackList`\n         *\n         * @param {Track} track\n         *        The audio, video, or text track to add to the list.\n         *\n         * @fires TrackList#addtrack\n         * @private\n         */\n\n\n        TrackList.prototype.addTrack_ = function addTrack_(track) {\n          var index = this.tracks_.length;\n\n          if (!('' + index in this)) {\n            Object.defineProperty(this, index, {\n              get: function get() {\n                return this.tracks_[index];\n              }\n            });\n          } // Do not add duplicate tracks\n\n\n          if (this.tracks_.indexOf(track) === -1) {\n            this.tracks_.push(track);\n            /**\n             * Triggered when a track is added to a track list.\n             *\n             * @event TrackList#addtrack\n             * @type {EventTarget~Event}\n             * @property {Track} track\n             *           A reference to track that was added.\n             */\n\n            this.trigger({\n              track: track,\n              type: 'addtrack'\n            });\n          }\n        };\n        /**\n         * Remove a {@link Track} from the `TrackList`\n         *\n         * @param {Track} track\n         *        The audio, video, or text track to remove from the list.\n         *\n         * @fires TrackList#removetrack\n         * @private\n         */\n\n\n        TrackList.prototype.removeTrack_ = function removeTrack_(rtrack) {\n          var track = void 0;\n\n          for (var i = 0, l = this.length; i < l; i++) {\n            if (this[i] === rtrack) {\n              track = this[i];\n\n              if (track.off) {\n                track.off();\n              }\n\n              this.tracks_.splice(i, 1);\n              break;\n            }\n          }\n\n          if (!track) {\n            return;\n          }\n          /**\n           * Triggered when a track is removed from track list.\n           *\n           * @event TrackList#removetrack\n           * @type {EventTarget~Event}\n           * @property {Track} track\n           *           A reference to track that was removed.\n           */\n\n\n          this.trigger({\n            track: track,\n            type: 'removetrack'\n          });\n        };\n        /**\n         * Get a Track from the TrackList by a tracks id\n         *\n         * @param {String} id - the id of the track to get\n         * @method getTrackById\n         * @return {Track}\n         * @private\n         */\n\n\n        TrackList.prototype.getTrackById = function getTrackById(id) {\n          var result = null;\n\n          for (var i = 0, l = this.length; i < l; i++) {\n            var track = this[i];\n\n            if (track.id === id) {\n              result = track;\n              break;\n            }\n          }\n\n          return result;\n        };\n\n        return TrackList;\n      }(_eventTarget2['default']);\n      /**\n       * Triggered when a different track is selected/enabled.\n       *\n       * @event TrackList#change\n       * @type {EventTarget~Event}\n       */\n\n      /**\n       * Events that can be called with on + eventName. See {@link EventHandler}.\n       *\n       * @property\n       * @private\n       */\n\n\n      TrackList.prototype.allowedEvents_ = {\n        change: 'change',\n        addtrack: 'addtrack',\n        removetrack: 'removetrack'\n      }; // emulate attribute EventHandler support to allow for feature detection\n\n      for (var event in TrackList.prototype.allowedEvents_) {\n        TrackList.prototype['on' + event] = null;\n      }\n\n      exports['default'] = TrackList;\n      /***/\n    },\n    /* 46 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _trackList = __webpack_require__(45);\n\n      var _trackList2 = _interopRequireDefault(_trackList);\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file video-track-list.js\n       */\n\n      /**\n       * Un-select all other {@link VideoTrack}s that are selected.\n       *\n       * @param {VideoTrackList} list\n       *        list to work on\n       *\n       * @param {VideoTrack} track\n       *        The track to skip\n       *\n       * @private\n       */\n\n\n      var disableOthers = function disableOthers(list, track) {\n        for (var i = 0; i < list.length; i++) {\n          if (track.id === list[i].id) {\n            continue;\n          } // another video track is enabled, disable it\n\n\n          list[i].selected = false;\n        }\n      };\n      /**\n       * The current list of {@link VideoTrack} for a video.\n       *\n       * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}\n       * @extends TrackList\n       */\n\n\n      var VideoTrackList = function (_TrackList) {\n        _inherits(VideoTrackList, _TrackList);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {VideoTrack[]} [tracks=[]]\n         *        A list of `VideoTrack` to instantiate the list with.\n         */\n\n\n        function VideoTrackList() {\n          var _this, _ret;\n\n          var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n          _classCallCheck(this, VideoTrackList);\n\n          var list = void 0; // make sure only 1 track is enabled\n          // sorted from last index to first index\n\n          for (var i = tracks.length - 1; i >= 0; i--) {\n            if (tracks[i].selected) {\n              disableOthers(tracks, tracks[i]);\n              break;\n            }\n          } // IE8 forces us to implement inheritance ourselves\n          // as it does not support Object.defineProperty properly\n\n\n          if (browser.IS_IE8) {\n            list = _document2['default'].createElement('custom');\n\n            for (var prop in _trackList2['default'].prototype) {\n              if (prop !== 'constructor') {\n                list[prop] = _trackList2['default'].prototype[prop];\n              }\n            }\n\n            for (var _prop in VideoTrackList.prototype) {\n              if (_prop !== 'constructor') {\n                list[_prop] = VideoTrackList.prototype[_prop];\n              }\n            }\n          }\n\n          list = (_this = _possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);\n          list.changing_ = false;\n          /**\n           * @member {number} VideoTrackList#selectedIndex\n           *         The current index of the selected {@link VideoTrack`}.\n           */\n\n          Object.defineProperty(list, 'selectedIndex', {\n            get: function get() {\n              for (var _i = 0; _i < this.length; _i++) {\n                if (this[_i].selected) {\n                  return _i;\n                }\n              }\n\n              return -1;\n            },\n            set: function set() {}\n          });\n          return _ret = list, _possibleConstructorReturn(_this, _ret);\n        }\n        /**\n         * Add a {@link VideoTrack} to the `VideoTrackList`.\n         *\n         * @param {VideoTrack} track\n         *        The VideoTrack to add to the list\n         *\n         * @fires TrackList#addtrack\n         * @private\n         */\n\n\n        VideoTrackList.prototype.addTrack_ = function addTrack_(track) {\n          var _this2 = this;\n\n          if (track.selected) {\n            disableOthers(this, track);\n          }\n\n          _TrackList.prototype.addTrack_.call(this, track); // native tracks don't have this\n\n\n          if (!track.addEventListener) {\n            return;\n          }\n          /**\n           * @listens VideoTrack#selectedchange\n           * @fires TrackList#change\n           */\n\n\n          track.addEventListener('selectedchange', function () {\n            if (_this2.changing_) {\n              return;\n            }\n\n            _this2.changing_ = true;\n            disableOthers(_this2, track);\n            _this2.changing_ = false;\n\n            _this2.trigger('change');\n          });\n        };\n        /**\n         * Add a {@link VideoTrack} to the `VideoTrackList`.\n         *\n         * @param {VideoTrack} track\n         *        The VideoTrack to add to the list\n         *\n         * @fires TrackList#addtrack\n         */\n\n\n        VideoTrackList.prototype.addTrack = function addTrack(track) {\n          this.addTrack_(track);\n        };\n        /**\n         * Remove a {@link VideoTrack} to the `VideoTrackList`.\n         *\n         * @param {VideoTrack} track\n         *        The VideoTrack to remove from the list.\n         *\n         * @fires TrackList#removetrack\n         */\n\n\n        VideoTrackList.prototype.removeTrack = function removeTrack(track) {\n          _TrackList.prototype.removeTrack_.call(this, track);\n        };\n\n        return VideoTrackList;\n      }(_trackList2['default']);\n\n      exports['default'] = VideoTrackList;\n      /***/\n    },\n    /* 47 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _trackList = __webpack_require__(45);\n\n      var _trackList2 = _interopRequireDefault(_trackList);\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file audio-track-list.js\n       */\n\n      /**\n       * Anywhere we call this function we diverge from the spec\n       * as we only support one enabled audiotrack at a time\n       *\n       * @param {AudioTrackList} list\n       *        list to work on\n       *\n       * @param {AudioTrack} track\n       *        The track to skip\n       *\n       * @private\n       */\n\n\n      var disableOthers = function disableOthers(list, track) {\n        for (var i = 0; i < list.length; i++) {\n          if (track.id === list[i].id) {\n            continue;\n          } // another audio track is enabled, disable it\n\n\n          list[i].enabled = false;\n        }\n      };\n      /**\n       * The current list of {@link AudioTrack} for a media file.\n       *\n       * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}\n       * @extends TrackList\n       */\n\n\n      var AudioTrackList = function (_TrackList) {\n        _inherits(AudioTrackList, _TrackList);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {AudioTrack[]} [tracks=[]]\n         *        A list of `AudioTrack` to instantiate the list with.\n         */\n\n\n        function AudioTrackList() {\n          var _this, _ret;\n\n          var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n          _classCallCheck(this, AudioTrackList);\n\n          var list = void 0; // make sure only 1 track is enabled\n          // sorted from last index to first index\n\n          for (var i = tracks.length - 1; i >= 0; i--) {\n            if (tracks[i].enabled) {\n              disableOthers(tracks, tracks[i]);\n              break;\n            }\n          } // IE8 forces us to implement inheritance ourselves\n          // as it does not support Object.defineProperty properly\n\n\n          if (browser.IS_IE8) {\n            list = _document2['default'].createElement('custom');\n\n            for (var prop in _trackList2['default'].prototype) {\n              if (prop !== 'constructor') {\n                list[prop] = _trackList2['default'].prototype[prop];\n              }\n            }\n\n            for (var _prop in AudioTrackList.prototype) {\n              if (_prop !== 'constructor') {\n                list[_prop] = AudioTrackList.prototype[_prop];\n              }\n            }\n          }\n\n          list = (_this = _possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);\n          list.changing_ = false;\n          return _ret = list, _possibleConstructorReturn(_this, _ret);\n        }\n        /**\n         * Add an {@link AudioTrack} to the `AudioTrackList`.\n         *\n         * @param {AudioTrack} track\n         *        The AudioTrack to add to the list\n         *\n         * @fires Track#addtrack\n         * @private\n         */\n\n\n        AudioTrackList.prototype.addTrack_ = function addTrack_(track) {\n          var _this2 = this;\n\n          if (track.enabled) {\n            disableOthers(this, track);\n          }\n\n          _TrackList.prototype.addTrack_.call(this, track); // native tracks don't have this\n\n\n          if (!track.addEventListener) {\n            return;\n          }\n          /**\n           * @listens AudioTrack#enabledchange\n           * @fires TrackList#change\n           */\n\n\n          track.addEventListener('enabledchange', function () {\n            // when we are disabling other tracks (since we don't support\n            // more than one track at a time) we will set changing_\n            // to true so that we don't trigger additional change events\n            if (_this2.changing_) {\n              return;\n            }\n\n            _this2.changing_ = true;\n            disableOthers(_this2, track);\n            _this2.changing_ = false;\n\n            _this2.trigger('change');\n          });\n        };\n        /**\n         * Add an {@link AudioTrack} to the `AudioTrackList`.\n         *\n         * @param {AudioTrack} track\n         *        The AudioTrack to add to the list\n         *\n         * @fires Track#addtrack\n         */\n\n\n        AudioTrackList.prototype.addTrack = function addTrack(track) {\n          this.addTrack_(track);\n        };\n        /**\n         * Remove an {@link AudioTrack} from the `AudioTrackList`.\n         *\n         * @param {AudioTrack} track\n         *        The AudioTrack to remove from the list\n         *\n         * @fires Track#removetrack\n         */\n\n\n        AudioTrackList.prototype.removeTrack = function removeTrack(track) {\n          _TrackList.prototype.removeTrack_.call(this, track);\n        };\n\n        return AudioTrackList;\n      }(_trackList2['default']);\n\n      exports['default'] = AudioTrackList;\n      /***/\n    },\n    /* 48 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _tech = __webpack_require__(29);\n\n      var _tech2 = _interopRequireDefault(_tech);\n\n      var _toTitleCase = __webpack_require__(18);\n\n      var _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file loader.js\n       */\n\n      /**\n       * The `MediaLoader` is the `Component` that decides which playback technology to load\n       * when a player is initialized.\n       *\n       * @extends Component\n       */\n\n\n      var MediaLoader = function (_Component) {\n        _inherits(MediaLoader, _Component);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should attach to.\n         *\n         * @param {Object} [options]\n         *        The key/value stroe of player options.\n         *\n         * @param {Component~ReadyCallback} [ready]\n         *        The function that is run when this component is ready.\n         */\n\n\n        function MediaLoader(player, options, ready) {\n          _classCallCheck(this, MediaLoader); // If there are no sources when the player is initialized,\n          // load the first supported playback technology.\n\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options, ready));\n\n          if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {\n            for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {\n              var techName = (0, _toTitleCase2['default'])(j[i]);\n\n              var tech = _tech2['default'].getTech(techName); // Support old behavior of techs being registered as components.\n              // Remove once that deprecated behavior is removed.\n\n\n              if (!techName) {\n                tech = _component2['default'].getComponent(techName);\n              } // Check if the browser supports this technology\n\n\n              if (tech && tech.isSupported()) {\n                player.loadTech_(techName);\n                break;\n              }\n            }\n          } else {\n            // Loop through playback technologies (HTML5, Flash) and check for support.\n            // Then load the best source.\n            // A few assumptions here:\n            //   All playback technologies respect preload false.\n            player.src(options.playerOptions.sources);\n          }\n\n          return _this;\n        }\n\n        return MediaLoader;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('MediaLoader', MediaLoader);\n\n      exports['default'] = MediaLoader;\n      /***/\n    },\n    /* 49 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _tech = __webpack_require__(29);\n\n      var _tech2 = _interopRequireDefault(_tech);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _url = __webpack_require__(35);\n\n      var Url = _interopRequireWildcard(_url);\n\n      var _timeRanges = __webpack_require__(22);\n\n      var _flashRtmp = __webpack_require__(50);\n\n      var _flashRtmp2 = _interopRequireDefault(_flashRtmp);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      var _obj = __webpack_require__(13);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file flash.js\n       * VideoJS-SWF - Custom Flash Player with HTML5-ish API\n       * https://github.com/zencoder/video-js-swf\n       * Not using setupTriggers. Using global onEvent func to distribute events\n       */\n\n\n      var navigator = _window2['default'].navigator;\n      /**\n       * Flash Media Controller - Wrapper for Flash Media API\n       *\n       * @mixes FlashRtmpDecorator\n       * @mixes Tech~SouceHandlerAdditions\n       * @extends Tech\n       */\n\n      var Flash = function (_Tech) {\n        _inherits(Flash, _Tech);\n        /**\n         * Create an instance of this Tech.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         *\n         * @param {Component~ReadyCallback} ready\n         *        Callback function to call when the `Flash` Tech is ready.\n         */\n\n\n        function Flash(options, ready) {\n          _classCallCheck(this, Flash); // Set the source when ready\n\n\n          var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n          if (options.source) {\n            _this.ready(function () {\n              this.setSource(options.source);\n            }, true);\n          } // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers\n          // This allows resetting the playhead when we catch the reload\n\n\n          if (options.startTime) {\n            _this.ready(function () {\n              this.load();\n              this.play();\n              this.currentTime(options.startTime);\n            }, true);\n          } // Add global window functions that the swf expects\n          // A 4.x workflow we weren't able to solve for in 5.0\n          // because of the need to hard code these functions\n          // into the swf for security reasons\n\n\n          _window2['default'].videojs = _window2['default'].videojs || {};\n          _window2['default'].videojs.Flash = _window2['default'].videojs.Flash || {};\n          _window2['default'].videojs.Flash.onReady = Flash.onReady;\n          _window2['default'].videojs.Flash.onEvent = Flash.onEvent;\n          _window2['default'].videojs.Flash.onError = Flash.onError;\n\n          _this.on('seeked', function () {\n            this.lastSeekTarget_ = undefined;\n          });\n\n          return _this;\n        }\n        /**\n         * Create the `Flash` Tech's DOM element.\n         *\n         * @return {Element}\n         *         The element that gets created.\n         */\n\n\n        Flash.prototype.createEl = function createEl() {\n          var options = this.options_; // If video.js is hosted locally you should also set the location\n          // for the hosted swf, which should be relative to the page (not video.js)\n          // Otherwise this adds a CDN url.\n          // The CDN also auto-adds a swf URL for that specific version.\n\n          if (!options.swf) {\n            var ver = '5.1.0';\n            options.swf = '//vjs.zencdn.net/swf/' + ver + '/video-js.swf';\n          } // Generate ID for swf object\n\n\n          var objId = options.techId; // Merge default flashvars with ones passed in to init\n\n          var flashVars = (0, _obj.assign)({\n            // SWF Callback Functions\n            readyFunction: 'videojs.Flash.onReady',\n            eventProxyFunction: 'videojs.Flash.onEvent',\n            errorEventProxyFunction: 'videojs.Flash.onError',\n            // Player Settings\n            autoplay: options.autoplay,\n            preload: options.preload,\n            loop: options.loop,\n            muted: options.muted\n          }, options.flashVars); // Merge default parames with ones passed in\n\n          var params = (0, _obj.assign)({\n            // Opaque is needed to overlay controls, but can affect playback performance\n            wmode: 'opaque',\n            // Using bgcolor prevents a white flash when the object is loading\n            bgcolor: '#000000'\n          }, options.params); // Merge default attributes with ones passed in\n\n          var attributes = (0, _obj.assign)({\n            // Both ID and Name needed or swf to identify itself\n            id: objId,\n            name: objId,\n            'class': 'vjs-tech'\n          }, options.attributes);\n          this.el_ = Flash.embed(options.swf, flashVars, params, attributes);\n          this.el_.tech = this;\n          return this.el_;\n        };\n        /**\n         * Called by {@link Player#play} to play using the `Flash` `Tech`.\n         */\n\n\n        Flash.prototype.play = function play() {\n          if (this.ended()) {\n            this.setCurrentTime(0);\n          }\n\n          this.el_.vjs_play();\n        };\n        /**\n         * Called by {@link Player#pause} to pause using the `Flash` `Tech`.\n         */\n\n\n        Flash.prototype.pause = function pause() {\n          this.el_.vjs_pause();\n        };\n        /**\n         * A getter/setter for the `Flash` Tech's source object.\n         * > Note: Please use {@link Flash#setSource}\n         *\n         * @param {Tech~SourceObject} [src]\n         *        The source object you want to set on the `Flash` techs.\n         *\n         * @return {Tech~SourceObject|undefined}\n         *         - The current source object when a source is not passed in.\n         *         - undefined when setting\n         *\n         * @deprecated Since version 5.\n         */\n\n\n        Flash.prototype.src = function src(_src) {\n          if (_src === undefined) {\n            return this.currentSrc();\n          } // Setting src through `src` not `setSrc` will be deprecated\n\n\n          return this.setSrc(_src);\n        };\n        /**\n         * A getter/setter for the `Flash` Tech's source object.\n         *\n         * @param {Tech~SourceObject} [src]\n         *        The source object you want to set on the `Flash` techs.\n         *\n         * @return {Tech~SourceObject|undefined}\n         *         - The current source object when a source is not passed in.\n         *         - undefined when setting\n         */\n\n\n        Flash.prototype.setSrc = function setSrc(src) {\n          var _this2 = this; // Make sure source URL is absolute.\n\n\n          src = Url.getAbsoluteURL(src);\n          this.el_.vjs_src(src); // Currently the SWF doesn't autoplay if you load a source later.\n          // e.g. Load player w/ no source, wait 2s, set src.\n\n          if (this.autoplay()) {\n            this.setTimeout(function () {\n              return _this2.play();\n            }, 0);\n          }\n        };\n        /**\n         * Indicates whether the media is currently seeking to a new position or not.\n         *\n         * @return {boolean}\n         *         - True if seeking to a new position\n         *         - False otherwise\n         */\n\n\n        Flash.prototype.seeking = function seeking() {\n          return this.lastSeekTarget_ !== undefined;\n        };\n        /**\n         * Returns the current time in seconds that the media is at in playback.\n         *\n         * @param {number} time\n         *        Current playtime of the media in seconds.\n         */\n\n\n        Flash.prototype.setCurrentTime = function setCurrentTime(time) {\n          var seekable = this.seekable();\n\n          if (seekable.length) {\n            // clamp to the current seekable range\n            time = time > seekable.start(0) ? time : seekable.start(0);\n            time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);\n            this.lastSeekTarget_ = time;\n            this.trigger('seeking');\n            this.el_.vjs_setProperty('currentTime', time);\n\n            _Tech.prototype.setCurrentTime.call(this);\n          }\n        };\n        /**\n         * Get the current playback time in seconds\n         *\n         * @return {number}\n         *         The current time of playback in seconds.\n         */\n\n\n        Flash.prototype.currentTime = function currentTime() {\n          // when seeking make the reported time keep up with the requested time\n          // by reading the time we're seeking to\n          if (this.seeking()) {\n            return this.lastSeekTarget_ || 0;\n          }\n\n          return this.el_.vjs_getProperty('currentTime');\n        };\n        /**\n         * Get the current source\n         *\n         * @method currentSrc\n         * @return {Tech~SourceObject}\n         *         The current source\n         */\n\n\n        Flash.prototype.currentSrc = function currentSrc() {\n          if (this.currentSource_) {\n            return this.currentSource_.src;\n          }\n\n          return this.el_.vjs_getProperty('currentSrc');\n        };\n        /**\n         * Get the total duration of the current media.\n         *\n         * @return {number}\n         8          The total duration of the current media.\n         */\n\n\n        Flash.prototype.duration = function duration() {\n          if (this.readyState() === 0) {\n            return NaN;\n          }\n\n          var duration = this.el_.vjs_getProperty('duration');\n          return duration >= 0 ? duration : Infinity;\n        };\n        /**\n         * Load media into Tech.\n         */\n\n\n        Flash.prototype.load = function load() {\n          this.el_.vjs_load();\n        };\n        /**\n         * Get the poster image that was set on the tech.\n         */\n\n\n        Flash.prototype.poster = function poster() {\n          this.el_.vjs_getProperty('poster');\n        };\n        /**\n         * Poster images are not handled by the Flash tech so make this is a no-op.\n         */\n\n\n        Flash.prototype.setPoster = function setPoster() {};\n        /**\n         * Determine the time ranges that can be seeked to in the media.\n         *\n         * @return {TimeRange}\n         *         Returns the time ranges that can be seeked to.\n         */\n\n\n        Flash.prototype.seekable = function seekable() {\n          var duration = this.duration();\n\n          if (duration === 0) {\n            return (0, _timeRanges.createTimeRange)();\n          }\n\n          return (0, _timeRanges.createTimeRange)(0, duration);\n        };\n        /**\n         * Get and create a `TimeRange` object for buffering.\n         *\n         * @return {TimeRange}\n         *         The time range object that was created.\n         */\n\n\n        Flash.prototype.buffered = function buffered() {\n          var ranges = this.el_.vjs_getProperty('buffered');\n\n          if (ranges.length === 0) {\n            return (0, _timeRanges.createTimeRange)();\n          }\n\n          return (0, _timeRanges.createTimeRange)(ranges[0][0], ranges[0][1]);\n        };\n        /**\n         * Get fullscreen support -\n         *\n         * Flash does not allow fullscreen through javascript\n         * so this always returns false.\n         *\n         * @return {boolean}\n         *         The Flash tech does not support fullscreen, so it will always return false.\n         */\n\n\n        Flash.prototype.supportsFullScreen = function supportsFullScreen() {\n          // Flash does not allow fullscreen through javascript\n          return false;\n        };\n        /**\n         * Flash does not allow fullscreen through javascript\n         * so this always returns false.\n         *\n         * @return {boolean}\n         *         The Flash tech does not support fullscreen, so it will always return false.\n         */\n\n\n        Flash.prototype.enterFullScreen = function enterFullScreen() {\n          return false;\n        };\n\n        return Flash;\n      }(_tech2['default']); // Create setters and getters for attributes\n\n\n      var _api = Flash.prototype;\n\n      var _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');\n\n      var _readOnly = 'networkState,readyState,initialTime,startOffsetTime,paused,ended,videoWidth,videoHeight'.split(',');\n\n      function _createSetter(attr) {\n        var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);\n\n        _api['set' + attrUpper] = function (val) {\n          return this.el_.vjs_setProperty(attr, val);\n        };\n      }\n\n      function _createGetter(attr) {\n        _api[attr] = function () {\n          return this.el_.vjs_getProperty(attr);\n        };\n      } // Create getter and setters for all read/write attributes\n\n\n      for (var i = 0; i < _readWrite.length; i++) {\n        _createGetter(_readWrite[i]);\n\n        _createSetter(_readWrite[i]);\n      } // Create getters for read-only attributes\n\n\n      for (var _i = 0; _i < _readOnly.length; _i++) {\n        _createGetter(_readOnly[_i]);\n      }\n      /** ------------------------------ Getters ------------------------------ **/\n\n      /**\n       * Get the value of `rtmpConnection` from the swf.\n       *\n       * @method Flash.prototype.rtmpConnection\n       * @return {string}\n       *         The current value of `rtmpConnection` on the swf.\n       */\n\n      /**\n       * Get the value of `rtmpStream` from the swf.\n       *\n       * @method Flash.prototype.rtmpStream\n       * @return {string}\n       *         The current value of `rtmpStream` on the swf.\n       */\n\n      /**\n       * Get the value of `preload` from the swf. `preload` indicates\n       * what should download before the media is interacted with. It can have the following\n       * values:\n       * - none: nothing should be downloaded\n       * - metadata: poster and the first few frames of the media may be downloaded to get\n       *   media dimensions and other metadata\n       * - auto: allow the media and metadata for the media to be downloaded before\n       *    interaction\n       *\n       * @method Flash.prototype.preload\n       * @return {string}\n       *         The value of `preload` from the swf. Will be 'none', 'metadata',\n       *         or 'auto'.\n       */\n\n      /**\n       * Get the value of `defaultPlaybackRate` from the swf.\n       *\n       * @method Flash.prototype.defaultPlaybackRate\n       * @return {number}\n       *         The current value of `defaultPlaybackRate` on the swf.\n       */\n\n      /**\n       * Get the value of `playbackRate` from the swf. `playbackRate` indicates\n       * the rate at which the media is currently playing back. Examples:\n       *   - if playbackRate is set to 2, media will play twice as fast.\n       *   - if playbackRate is set to 0.5, media will play half as fast.\n       *\n       * @method Flash.prototype.playbackRate\n       * @return {number}\n       *         The value of `playbackRate` from the swf. A number indicating\n       *         the current playback speed of the media, where 1 is normal speed.\n       */\n\n      /**\n       * Get the value of `autoplay` from the swf. `autoplay` indicates\n       * that the media should start to play as soon as the page is ready.\n       *\n       * @method Flash.prototype.autoplay\n       * @return {boolean}\n       *         - The value of `autoplay` from the swf.\n       *         - True indicates that the media ashould start as soon as the page loads.\n       *         - False indicates that the media should not start as soon as the page loads.\n       */\n\n      /**\n       * Get the value of `loop` from the swf. `loop` indicates\n       * that the media should return to the start of the media and continue playing once\n       * it reaches the end.\n       *\n       * @method Flash.prototype.loop\n       * @return {boolean}\n       *         - The value of `loop` from the swf.\n       *         - True indicates that playback should seek back to start once\n       *           the end of a media is reached.\n       *         - False indicates that playback should not loop back to the start when the\n       *           end of the media is reached.\n       */\n\n      /**\n       * Get the value of `mediaGroup` from the swf.\n       *\n       * @method Flash.prototype.mediaGroup\n       * @return {string}\n       *         The current value of `mediaGroup` on the swf.\n       */\n\n      /**\n       * Get the value of `controller` from the swf.\n       *\n       * @method Flash.prototype.controller\n       * @return {string}\n       *         The current value of `controller` on the swf.\n       */\n\n      /**\n       * Get the value of `controls` from the swf. `controls` indicates\n       * whether the native flash controls should be shown or hidden.\n       *\n       * @method Html5.prototype.controls\n       * @return {boolean}\n       *         - The value of `controls` from the swf.\n       *         - True indicates that native controls should be showing.\n       *         - False indicates that native controls should be hidden.\n       */\n\n      /**\n       * Get the value of the `volume` from the swf. `volume` indicates the current\n       * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n       * so on.\n       *\n       * @method Flash.prototype.volume\n       * @return {number}\n       *         The volume percent as a decimal. Value will be between 0-1.\n       */\n\n      /**\n       * Get the value of the `muted` from the swf. `muted` indicates the current\n       * audio level should be silent.\n       *\n       * @method Flash.prototype.muted\n       * @return {boolean}\n       *         - True if the audio should be set to silent\n       *         - False otherwise\n       */\n\n      /**\n       * Get the value of `defaultMuted` from the swf. `defaultMuted` indicates\n       * whether the media should start muted or not. Only changes the default state of the\n       * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n       * current state.\n       *\n       * @method Flash.prototype.defaultMuted\n       * @return {boolean}\n       *         - The value of `defaultMuted` from the swf.\n       *         - True indicates that the media should start muted.\n       *         - False indicates that the media should not start muted.\n       */\n\n      /**\n       * Get the value of `networkState` from the swf. `networkState` indicates\n       * the current network state. It returns an enumeration from the following list:\n       * - 0: NETWORK_EMPTY\n       * - 1: NEWORK_IDLE\n       * - 2: NETWORK_LOADING\n       * - 3: NETWORK_NO_SOURCE\n       *\n       * @method Flash.prototype.networkState\n       * @return {number}\n       *         The value of `networkState` from the swf. This will be a number\n       *         from the list in the description.\n       */\n\n      /**\n       * Get the value of `readyState` from the swf. `readyState` indicates\n       * the current state of the media element. It returns an enumeration from the\n       * following list:\n       * - 0: HAVE_NOTHING\n       * - 1: HAVE_METADATA\n       * - 2: HAVE_CURRENT_DATA\n       * - 3: HAVE_FUTURE_DATA\n       * - 4: HAVE_ENOUGH_DATA\n       *\n       * @method Flash.prototype.readyState\n       * @return {number}\n       *         The value of `readyState` from the swf. This will be a number\n       *         from the list in the description.\n       */\n\n      /**\n       * Get the value of `readyState` from the swf. `readyState` indicates\n       * the current state of the media element. It returns an enumeration from the\n       * following list:\n       * - 0: HAVE_NOTHING\n       * - 1: HAVE_METADATA\n       * - 2: HAVE_CURRENT_DATA\n       * - 3: HAVE_FUTURE_DATA\n       * - 4: HAVE_ENOUGH_DATA\n       *\n       * @method Flash.prototype.readyState\n       * @return {number}\n       *         The value of `readyState` from the swf. This will be a number\n       *         from the list in the description.\n       */\n\n      /**\n       * Get the value of `initialTime` from the swf.\n       *\n       * @method Flash.prototype.initialTime\n       * @return {number}\n       *         The `initialTime` proprety on the swf.\n       */\n\n      /**\n       * Get the value of `startOffsetTime` from the swf.\n       *\n       * @method Flash.prototype.startOffsetTime\n       * @return {number}\n       *         The `startOffsetTime` proprety on the swf.\n       */\n\n      /**\n       * Get the value of `paused` from the swf. `paused` indicates whether the swf\n       * is current paused or not.\n       *\n       * @method Flash.prototype.paused\n       * @return {boolean}\n       *         The value of `paused` from the swf.\n       */\n\n      /**\n       * Get the value of `ended` from the swf. `ended` indicates whether\n       * the media has reached the end or not.\n       *\n       * @method Flash.prototype.ended\n       * @return {boolean}\n       *         - True indicates that the media has ended.\n       *         - False indicates that the media has not ended.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n       */\n\n      /**\n       * Get the value of `videoWidth` from the swf. `videoWidth` indicates\n       * the current width of the media in css pixels.\n       *\n       * @method Flash.prototype.videoWidth\n       * @return {number}\n       *         The value of `videoWidth` from the swf. This will be a number\n       *         in css pixels.\n       */\n\n      /**\n       * Get the value of `videoHeight` from the swf. `videoHeigth` indicates\n       * the current height of the media in css pixels.\n       *\n       * @method Flassh.prototype.videoHeight\n       * @return {number}\n       *         The value of `videoHeight` from the swf. This will be a number\n       *         in css pixels.\n       */\n\n      /** ------------------------------ Setters ------------------------------ **/\n\n      /**\n       * Set the value of `rtmpConnection` on the swf.\n       *\n       * @method Flash.prototype.setRtmpConnection\n       * @param {string} rtmpConnection\n       *        New value to set the `rtmpConnection` property to.\n       */\n\n      /**\n       * Set the value of `rtmpStream` on the swf.\n       *\n       * @method Flash.prototype.setRtmpStream\n       * @param {string} rtmpStream\n       *        New value to set the `rtmpStream` property to.\n       */\n\n      /**\n       * Set the value of `preload` on the swf. `preload` indicates\n       * what should download before the media is interacted with. It can have the following\n       * values:\n       * - none: nothing should be downloaded\n       * - metadata: poster and the first few frames of the media may be downloaded to get\n       *   media dimensions and other metadata\n       * - auto: allow the media and metadata for the media to be downloaded before\n       *    interaction\n       *\n       * @method Flash.prototype.setPreload\n       * @param {string} preload\n       *        The value of `preload` to set on the swf. Should be 'none', 'metadata',\n       *        or 'auto'.\n       */\n\n      /**\n       * Set the value of `defaultPlaybackRate` on the swf.\n       *\n       * @method Flash.prototype.setDefaultPlaybackRate\n       * @param {number} defaultPlaybackRate\n       *        New value to set the `defaultPlaybackRate` property to.\n       */\n\n      /**\n       * Set the value of `playbackRate` on the swf. `playbackRate` indicates\n       * the rate at which the media is currently playing back. Examples:\n       *   - if playbackRate is set to 2, media will play twice as fast.\n       *   - if playbackRate is set to 0.5, media will play half as fast.\n       *\n       * @method Flash.prototype.setPlaybackRate\n       * @param {number} playbackRate\n       *        New value of `playbackRate` on the swf. A number indicating\n       *        the current playback speed of the media, where 1 is normal speed.\n       */\n\n      /**\n       * Set the value of `autoplay` on the swf. `autoplay` indicates\n       * that the media should start to play as soon as the page is ready.\n       *\n       * @method Flash.prototype.setAutoplay\n       * @param {boolean} autoplay\n       *        - The value of `autoplay` from the swf.\n       *        - True indicates that the media ashould start as soon as the page loads.\n       *        - False indicates that the media should not start as soon as the page loads.\n       */\n\n      /**\n       * Set the value of `loop` on the swf. `loop` indicates\n       * that the media should return to the start of the media and continue playing once\n       * it reaches the end.\n       *\n       * @method Flash.prototype.setLoop\n       * @param {boolean} loop\n       *        - True indicates that playback should seek back to start once\n       *          the end of a media is reached.\n       *        - False indicates that playback should not loop back to the start when the\n       *          end of the media is reached.\n       */\n\n      /**\n       * Set the value of `mediaGroup` on the swf.\n       *\n       * @method Flash.prototype.setMediaGroup\n       * @param {string} mediaGroup\n       *        New value of `mediaGroup` to set on the swf.\n       */\n\n      /**\n       * Set the value of `controller` on the swf.\n       *\n       * @method Flash.prototype.setController\n       * @param {string} controller\n       *        New value the current value of `controller` on the swf.\n       */\n\n      /**\n       * Get the value of `controls` from the swf. `controls` indicates\n       * whether the native flash controls should be shown or hidden.\n       *\n       * @method Flash.prototype.controls\n       * @return {boolean}\n       *         - The value of `controls` from the swf.\n       *         - True indicates that native controls should be showing.\n       *         - False indicates that native controls should be hidden.\n       */\n\n      /**\n       * Set the value of the `volume` on the swf. `volume` indicates the current\n       * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n       * so on.\n       *\n       * @method Flash.prototype.setVolume\n       * @param {number} percentAsDecimal\n       *         The volume percent as a decimal. Value will be between 0-1.\n       */\n\n      /**\n       * Set the value of the `muted` on the swf. `muted` indicates that the current\n       * audio level should be silent.\n       *\n       * @method Flash.prototype.setMuted\n       * @param {boolean} muted\n       *         - True if the audio should be set to silent\n       *         - False otherwise\n       */\n\n      /**\n       * Set the value of `defaultMuted` on the swf. `defaultMuted` indicates\n       * whether the media should start muted or not. Only changes the default state of the\n       * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n       * current state.\n       *\n       * @method Flash.prototype.setDefaultMuted\n       * @param {boolean} defaultMuted\n       *         - True indicates that the media should start muted.\n       *         - False indicates that the media should not start muted.\n       */\n\n      /* Flash Support Testing -------------------------------------------------------- */\n\n      /**\n       * Check if the Flash tech is currently supported.\n       *\n       * @return {boolean}\n       *          - True if the flash tech is supported.\n       *          - False otherwise.\n       */\n\n\n      Flash.isSupported = function () {\n        return Flash.version()[0] >= 10; // return swfobject.hasFlashPlayerVersion('10');\n      }; // Add Source Handler pattern functions to this tech\n\n\n      _tech2['default'].withSourceHandlers(Flash);\n      /*\n       * Native source handler for flash,  simply passes the source to the swf element.\n       *\n       * @property {Tech~SourceObject} source\n       *           The source object\n       *\n       * @property {Flash} tech\n       *           The instance of the Flash tech\n       */\n\n\n      Flash.nativeSourceHandler = {};\n      /**\n       * Check if the Flash can play the given mime type.\n       *\n       * @param {string} type\n       *        The mimetype to check\n       *\n       * @return {string}\n       *         'maybe', or '' (empty string)\n       */\n\n      Flash.nativeSourceHandler.canPlayType = function (type) {\n        if (type in Flash.formats) {\n          return 'maybe';\n        }\n\n        return '';\n      };\n      /**\n       * Check if the media element can handle a source natively.\n       *\n       * @param {Tech~SourceObject} source\n       *         The source object\n       *\n       * @param {Object} [options]\n       *         Options to be passed to the tech.\n       *\n       * @return {string}\n       *         'maybe', or '' (empty string).\n       */\n\n\n      Flash.nativeSourceHandler.canHandleSource = function (source, options) {\n        var type = void 0;\n\n        function guessMimeType(src) {\n          var ext = Url.getFileExtension(src);\n\n          if (ext) {\n            return 'video/' + ext;\n          }\n\n          return '';\n        }\n\n        if (!source.type) {\n          type = guessMimeType(source.src);\n        } else {\n          // Strip code information from the type because we don't get that specific\n          type = source.type.replace(/;.*/, '').toLowerCase();\n        }\n\n        return Flash.nativeSourceHandler.canPlayType(type);\n      };\n      /**\n       * Pass the source to the swf.\n       *\n       * @param {Tech~SourceObject} source\n       *        The source object\n       *\n       * @param {Flash} tech\n       *        The instance of the Flash tech\n       *\n       * @param {Object} [options]\n       *        The options to pass to the source\n       */\n\n\n      Flash.nativeSourceHandler.handleSource = function (source, tech, options) {\n        tech.setSrc(source.src);\n      };\n      /**\n       * noop for native source handler dispose, as cleanup will happen automatically.\n       */\n\n\n      Flash.nativeSourceHandler.dispose = function () {}; // Register the native source handler\n\n\n      Flash.registerSourceHandler(Flash.nativeSourceHandler);\n      /**\n       * Flash supported mime types.\n       *\n       * @constant {Object}\n       */\n\n      Flash.formats = {\n        'video/flv': 'FLV',\n        'video/x-flv': 'FLV',\n        'video/mp4': 'MP4',\n        'video/m4v': 'MP4'\n      };\n      /**\n       * Called when the the swf is \"ready\", and makes sure that the swf is really\n       * ready using {@link Flash#checkReady}\n       */\n\n      Flash.onReady = function (currSwf) {\n        var el = Dom.getEl(currSwf);\n        var tech = el && el.tech; // if there is no el then the tech has been disposed\n        // and the tech element was removed from the player div\n\n        if (tech && tech.el()) {\n          // check that the flash object is really ready\n          Flash.checkReady(tech);\n        }\n      };\n      /**\n       * The SWF isn't always ready when it says it is. Sometimes the API functions still\n       * need to be added to the object. If it's not ready, we set a timeout to check again\n       * shortly.\n       *\n       * @param {Flash} tech\n       *        The instance of the flash tech to check.\n       */\n\n\n      Flash.checkReady = function (tech) {\n        // stop worrying if the tech has been disposed\n        if (!tech.el()) {\n          return;\n        } // check if API property exists\n\n\n        if (tech.el().vjs_getProperty) {\n          // tell tech it's ready\n          tech.triggerReady();\n        } else {\n          // wait longer\n          this.setTimeout(function () {\n            Flash.checkReady(tech);\n          }, 50);\n        }\n      };\n      /**\n       * Trigger events from the swf on the Flash Tech.\n       *\n       * @param {number} swfID\n       *        The id of the swf that had the event\n       *\n       * @param {string} eventName\n       *        The name of the event to trigger\n       */\n\n\n      Flash.onEvent = function (swfID, eventName) {\n        var tech = Dom.getEl(swfID).tech;\n        var args = Array.prototype.slice.call(arguments, 2); // dispatch Flash events asynchronously for two reasons:\n        // - Flash swallows any exceptions generated by javascript it\n        //   invokes\n        // - Flash is suspended until the javascript returns which may cause\n        //   playback performance issues\n\n        tech.setTimeout(function () {\n          tech.trigger(eventName, args);\n        }, 1);\n      };\n      /**\n       * Log errors from the swf on the Flash tech.\n       *\n       * @param {number} swfID\n       *        The id of the swf that had an error.\n       *\n       * @param {string} The error string\n       *        The error to set on the Flash Tech.\n       *\n       * @return {MediaError|undefined}\n       *          - Returns a MediaError when err is 'srcnotfound'\n       *          - Returns undefined otherwise.\n       */\n\n\n      Flash.onError = function (swfID, err) {\n        var tech = Dom.getEl(swfID).tech; // trigger MEDIA_ERR_SRC_NOT_SUPPORTED\n\n        if (err === 'srcnotfound') {\n          return tech.error(4);\n        } // trigger a custom error\n\n\n        tech.error('FLASH: ' + err);\n      };\n      /**\n       * Get the current version of Flash that is in use on the page.\n       *\n       * @return {Array}\n       *          an array of versions that are available.\n       */\n\n\n      Flash.version = function () {\n        var version = '0,0,0'; // IE\n\n        try {\n          version = new _window2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1]; // other browsers\n        } catch (e) {\n          try {\n            if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {\n              version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1];\n            }\n          } catch (err) {// satisfy linter\n          }\n        }\n\n        return version.split(',');\n      };\n      /**\n       * Only use for non-iframe embeds.\n       *\n       * @param {Object} swf\n       *        The videojs-swf object.\n       *\n       * @param {Object} flashVars\n       *        Names and values to use as flash option variables.\n       *\n       * @param {Object} params\n       *        Style parameters to set on the object.\n       *\n       * @param {Object} attributes\n       *        Attributes to set on the element.\n       *\n       * @return {Element}\n       *          The embeded Flash DOM element.\n       */\n\n\n      Flash.embed = function (swf, flashVars, params, attributes) {\n        var code = Flash.getEmbedCode(swf, flashVars, params, attributes); // Get element by embedding code and retrieving created element\n\n        var obj = Dom.createEl('div', {\n          innerHTML: code\n        }).childNodes[0];\n        return obj;\n      };\n      /**\n       * Only use for non-iframe embeds.\n       *\n       * @param {Object} swf\n       *        The videojs-swf object.\n       *\n       * @param {Object} flashVars\n       *        Names and values to use as flash option variables.\n       *\n       * @param {Object} params\n       *        Style parameters to set on the object.\n       *\n       * @param {Object} attributes\n       *        Attributes to set on the element.\n       *\n       * @return {Element}\n       *          The embeded Flash DOM element.\n       */\n\n\n      Flash.getEmbedCode = function (swf, flashVars, params, attributes) {\n        var objTag = '<object type=\"application/x-shockwave-flash\" ';\n        var flashVarsString = '';\n        var paramsString = '';\n        var attrsString = ''; // Convert flash vars to string\n\n        if (flashVars) {\n          Object.getOwnPropertyNames(flashVars).forEach(function (key) {\n            flashVarsString += key + '=' + flashVars[key] + '&amp;';\n          });\n        } // Add swf, flashVars, and other default params\n\n\n        params = (0, _obj.assign)({\n          movie: swf,\n          flashvars: flashVarsString,\n          // Required to talk to swf\n          allowScriptAccess: 'always',\n          // All should be default, but having security issues.\n          allowNetworking: 'all'\n        }, params); // Create param tags string\n\n        Object.getOwnPropertyNames(params).forEach(function (key) {\n          paramsString += '<param name=\"' + key + '\" value=\"' + params[key] + '\" />';\n        });\n        attributes = (0, _obj.assign)({\n          // Add swf to attributes (need both for IE and Others to work)\n          data: swf,\n          // Default to 100% width/height\n          width: '100%',\n          height: '100%'\n        }, attributes); // Create Attributes string\n\n        Object.getOwnPropertyNames(attributes).forEach(function (key) {\n          attrsString += key + '=\"' + attributes[key] + '\" ';\n        });\n        return '' + objTag + attrsString + '>' + paramsString + '</object>';\n      }; // Run Flash through the RTMP decorator\n\n\n      (0, _flashRtmp2['default'])(Flash);\n\n      _component2['default'].registerComponent('Flash', Flash);\n\n      _tech2['default'].registerTech('Flash', Flash);\n\n      exports['default'] = Flash;\n      /***/\n    },\n    /* 50 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      /**\n       * @file flash-rtmp.js\n       * @module flash-rtmp\n       */\n\n      /**\n       * Add RTMP properties to the {@link Flash} Tech.\n       *\n       * @param {Flash} Flash\n       *        The flash tech class.\n       *\n       * @mixin FlashRtmpDecorator\n       */\n\n      function FlashRtmpDecorator(Flash) {\n        Flash.streamingFormats = {\n          'rtmp/mp4': 'MP4',\n          'rtmp/flv': 'FLV'\n        };\n        /**\n         * Join connection and stream with an ampersand.\n         *\n         * @param {string} connection\n         *        The connection string.\n         *\n         * @param {string} stream\n         *        The stream string.\n         */\n\n        Flash.streamFromParts = function (connection, stream) {\n          return connection + '&' + stream;\n        };\n        /**\n         * The flash parts object that contains connection and stream info.\n         *\n         * @typedef {Object} Flash~PartsObject\n         *\n         * @property {string} connection\n         *           The connection string of a source, defaults to an empty string.\n         *\n         * @property {string} stream\n         *           The stream string of the source, defaults to an empty string.\n         */\n\n        /**\n         * Convert a source url into a stream and connection parts.\n         *\n         * @param {string} src\n         *        the source url\n         *\n         * @return {Flash~PartsObject}\n         *         The parts object that contains a connection and a stream\n         */\n\n\n        Flash.streamToParts = function (src) {\n          var parts = {\n            connection: '',\n            stream: ''\n          };\n\n          if (!src) {\n            return parts;\n          } // Look for the normal URL separator we expect, '&'.\n          // If found, we split the URL into two pieces around the\n          // first '&'.\n\n\n          var connEnd = src.search(/&(?!\\w+=)/);\n          var streamBegin = void 0;\n\n          if (connEnd !== -1) {\n            streamBegin = connEnd + 1;\n          } else {\n            // If there's not a '&', we use the last '/' as the delimiter.\n            connEnd = streamBegin = src.lastIndexOf('/') + 1;\n\n            if (connEnd === 0) {\n              // really, there's not a '/'?\n              connEnd = streamBegin = src.length;\n            }\n          }\n\n          parts.connection = src.substring(0, connEnd);\n          parts.stream = src.substring(streamBegin, src.length);\n          return parts;\n        };\n        /**\n         * Check if the source type is a streaming type.\n         *\n         * @param {string} srcType\n         *        The mime type to check.\n         *\n         * @return {boolean}\n         *          - True if the source type is a streaming type.\n         *          - False if the source type is not a streaming type.\n         */\n\n\n        Flash.isStreamingType = function (srcType) {\n          return srcType in Flash.streamingFormats;\n        }; // RTMP has four variations, any string starting\n        // with one of these protocols should be valid\n\n        /**\n         * Regular expression used to check if the source is an rtmp source.\n         *\n         * @property\n         * @type {RegExp}\n         */\n\n\n        Flash.RTMP_RE = /^rtmp[set]?:\\/\\//i;\n        /**\n         * Check if the source itself is a streaming type.\n         *\n         * @param {string} src\n         *        The url to the source.\n         *\n         * @return {boolean}\n         *          - True if the source url indicates that the source is streaming.\n         *          - False if the shource url indicates that the source url is not streaming.\n         */\n\n        Flash.isStreamingSrc = function (src) {\n          return Flash.RTMP_RE.test(src);\n        };\n        /**\n         * A source handler for RTMP urls\n         * @type {Object}\n         */\n\n\n        Flash.rtmpSourceHandler = {};\n        /**\n         * Check if Flash can play the given mime type.\n         *\n         * @param {string} type\n         *        The mime type to check\n         *\n         * @return {string}\n         *         'maybe', or '' (empty string)\n         */\n\n        Flash.rtmpSourceHandler.canPlayType = function (type) {\n          if (Flash.isStreamingType(type)) {\n            return 'maybe';\n          }\n\n          return '';\n        };\n        /**\n         * Check if Flash can handle the source natively\n         *\n         * @param {Object} source\n         *        The source object\n         *\n         * @param {Object} [options]\n         *        The options passed to the tech\n         *\n         * @return {string}\n         *         'maybe', or '' (empty string)\n         */\n\n\n        Flash.rtmpSourceHandler.canHandleSource = function (source, options) {\n          var can = Flash.rtmpSourceHandler.canPlayType(source.type);\n\n          if (can) {\n            return can;\n          }\n\n          if (Flash.isStreamingSrc(source.src)) {\n            return 'maybe';\n          }\n\n          return '';\n        };\n        /**\n         * Pass the source to the flash object.\n         *\n         * @param {Object} source\n         *        The source object\n         *\n         * @param {Flash} tech\n         *        The instance of the Flash tech\n         *\n         * @param {Object} [options]\n         *        The options to pass to the source\n         */\n\n\n        Flash.rtmpSourceHandler.handleSource = function (source, tech, options) {\n          var srcParts = Flash.streamToParts(source.src);\n          tech.setRtmpConnection(srcParts.connection);\n          tech.setRtmpStream(srcParts.stream);\n        }; // Register the native source handler\n\n\n        Flash.registerSourceHandler(Flash.rtmpSourceHandler);\n        return Flash;\n      }\n\n      exports['default'] = FlashRtmpDecorator;\n      /***/\n    },\n    /* 51 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _clickableComponent = __webpack_require__(52);\n\n      var _clickableComponent2 = _interopRequireDefault(_clickableComponent);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file poster-image.js\n       */\n\n      /**\n       * A `ClickableComponent` that handles showing the poster image for the player.\n       *\n       * @extends ClickableComponent\n       */\n\n\n      var PosterImage = function (_ClickableComponent) {\n        _inherits(PosterImage, _ClickableComponent);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should attach to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function PosterImage(player, options) {\n          _classCallCheck(this, PosterImage);\n\n          var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));\n\n          _this.update();\n\n          player.on('posterchange', Fn.bind(_this, _this.update));\n          return _this;\n        }\n        /**\n         * Clean up and dispose of the `PosterImage`.\n         */\n\n\n        PosterImage.prototype.dispose = function dispose() {\n          this.player().off('posterchange', this.update);\n\n          _ClickableComponent.prototype.dispose.call(this);\n        };\n        /**\n         * Create the `PosterImage`s DOM element.\n         *\n         * @return {Element}\n         *         The element that gets created.\n         */\n\n\n        PosterImage.prototype.createEl = function createEl() {\n          var el = Dom.createEl('div', {\n            className: 'vjs-poster',\n            // Don't want poster to be tabbable.\n            tabIndex: -1\n          }); // To ensure the poster image resizes while maintaining its original aspect\n          // ratio, use a div with `background-size` when available. For browsers that\n          // do not support `background-size` (e.g. IE8), fall back on using a regular\n          // img element.\n\n          if (!browser.BACKGROUND_SIZE_SUPPORTED) {\n            this.fallbackImg_ = Dom.createEl('img');\n            el.appendChild(this.fallbackImg_);\n          }\n\n          return el;\n        };\n        /**\n         * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.\n         *\n         * @listens Player#posterchange\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `Player#posterchange` event that triggered this function.\n         */\n\n\n        PosterImage.prototype.update = function update(event) {\n          var url = this.player().poster();\n          this.setSrc(url); // If there's no poster source we should display:none on this component\n          // so it's not still clickable or right-clickable\n\n          if (url) {\n            this.show();\n          } else {\n            this.hide();\n          }\n        };\n        /**\n         * Set the source of the `PosterImage` depending on the display method.\n         *\n         * @param {String} url\n         *        The URL to the source for the `PosterImage`.\n         */\n\n\n        PosterImage.prototype.setSrc = function setSrc(url) {\n          if (this.fallbackImg_) {\n            this.fallbackImg_.src = url;\n          } else {\n            var backgroundImage = ''; // Any falsey values should stay as an empty string, otherwise\n            // this will throw an extra error\n\n            if (url) {\n              backgroundImage = 'url(\"' + url + '\")';\n            }\n\n            this.el_.style.backgroundImage = backgroundImage;\n          }\n        };\n        /**\n         * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See\n         * {@link ClickableComponent#handleClick} for instances where this will be triggered.\n         *\n         * @listens tap\n         * @listens click\n         * @listens keydown\n         *\n         * @param {EventTarget~Event} event\n         +        The `click`, `tap` or `keydown` event that caused this function to be called.\n         */\n\n\n        PosterImage.prototype.handleClick = function handleClick(event) {\n          // We don't want a click to trigger playback when controls are disabled\n          // but CSS should be hiding the poster to prevent that from happening\n          if (this.player_.paused()) {\n            this.player_.play();\n          } else {\n            this.player_.pause();\n          }\n        };\n\n        return PosterImage;\n      }(_clickableComponent2['default']);\n\n      _component2['default'].registerComponent('PosterImage', PosterImage);\n\n      exports['default'] = PosterImage;\n      /***/\n    },\n    /* 52 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _events = __webpack_require__(8);\n\n      var Events = _interopRequireWildcard(_events);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      var _obj = __webpack_require__(13);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file button.js\n       */\n\n      /**\n       * Clickable Component which is clickable or keyboard actionable,\n       * but is not a native HTML button.\n       *\n       * @extends Component\n       */\n\n\n      var ClickableComponent = function (_Component) {\n        _inherits(ClickableComponent, _Component);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param  {Player} player\n         *         The `Player` that this class should be attached to.\n         *\n         * @param  {Object} [options]\n         *         The key/value store of player options.\n         */\n\n\n        function ClickableComponent(player, options) {\n          _classCallCheck(this, ClickableComponent);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          _this.emitTapEvents();\n\n          _this.enable();\n\n          return _this;\n        }\n        /**\n         * Create the `Component`s DOM element.\n         *\n         * @param {string} [tag=div]\n         *        The element's node type.\n         *\n         * @param {Object} [props={}]\n         *        An object of properties that should be set on the element.\n         *\n         * @param {Object} [attributes={}]\n         *        An object of attributes that should be set on the element.\n         *\n         * @return {Element}\n         *         The element that gets created.\n         */\n\n\n        ClickableComponent.prototype.createEl = function createEl() {\n          var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';\n          var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          props = (0, _obj.assign)({\n            className: this.buildCSSClass(),\n            tabIndex: 0\n          }, props);\n\n          if (tag === 'button') {\n            _log2['default'].error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');\n          } // Add ARIA attributes for clickable element which is not a native HTML button\n\n\n          attributes = (0, _obj.assign)({\n            'role': 'button',\n            // let the screen reader user know that the text of the element may change\n            'aria-live': 'polite'\n          }, attributes);\n          this.tabIndex_ = props.tabIndex;\n\n          var el = _Component.prototype.createEl.call(this, tag, props, attributes);\n\n          this.createControlTextEl(el);\n          return el;\n        };\n        /**\n         * Create a control text element on this `Component`\n         *\n         * @param {Element} [el]\n         *        Parent element for the control text.\n         *\n         * @return {Element}\n         *         The control text element that gets created.\n         */\n\n\n        ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {\n          this.controlTextEl_ = Dom.createEl('span', {\n            className: 'vjs-control-text'\n          });\n\n          if (el) {\n            el.appendChild(this.controlTextEl_);\n          }\n\n          this.controlText(this.controlText_, el);\n          return this.controlTextEl_;\n        };\n        /**\n         * Get or set the localize text to use for the controls on the `Component`.\n         *\n         * @param {string} [text]\n         *        Control text for element.\n         *\n         * @param {Element} [el=this.el()]\n         *        Element to set the title on.\n         *\n         * @return {string|ClickableComponent}\n         *         - The control text when getting\n         *         - Returns itself when setting; method can be chained.\n         */\n\n\n        ClickableComponent.prototype.controlText = function controlText(text) {\n          var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.el();\n\n          if (!text) {\n            return this.controlText_ || 'Need Text';\n          }\n\n          var localizedText = this.localize(text);\n          this.controlText_ = text;\n          this.controlTextEl_.innerHTML = localizedText;\n          el.setAttribute('title', localizedText);\n          return this;\n        };\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * Enable this `Component`s element.\n         *\n         * @return {ClickableComponent}\n         *         Returns itself; method can be chained.\n         */\n\n\n        ClickableComponent.prototype.enable = function enable() {\n          this.removeClass('vjs-disabled');\n          this.el_.setAttribute('aria-disabled', 'false');\n\n          if (typeof this.tabIndex_ !== 'undefined') {\n            this.el_.setAttribute('tabIndex', this.tabIndex_);\n          }\n\n          this.on('tap', this.handleClick);\n          this.on('click', this.handleClick);\n          this.on('focus', this.handleFocus);\n          this.on('blur', this.handleBlur);\n          return this;\n        };\n        /**\n         * Disable this `Component`s element.\n         *\n         * @return {ClickableComponent}\n         *         Returns itself; method can be chained.\n         */\n\n\n        ClickableComponent.prototype.disable = function disable() {\n          this.addClass('vjs-disabled');\n          this.el_.setAttribute('aria-disabled', 'true');\n\n          if (typeof this.tabIndex_ !== 'undefined') {\n            this.el_.removeAttribute('tabIndex');\n          }\n\n          this.off('tap', this.handleClick);\n          this.off('click', this.handleClick);\n          this.off('focus', this.handleFocus);\n          this.off('blur', this.handleBlur);\n          return this;\n        };\n        /**\n         * This gets called when a `ClickableComponent` gets:\n         * - Clicked (via the `click` event, listening starts in the constructor)\n         * - Tapped (via the `tap` event, listening starts in the constructor)\n         * - The following things happen in order:\n         *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the\n         *      `ClickableComponent`.\n         *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using\n         *      {@link ClickableComponent#handleKeyPress}.\n         *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses\n         *      the space or enter key.\n         *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`\n         *      event as a parameter.\n         *\n         * @param {EventTarget~Event} event\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         * @abstract\n         */\n\n\n        ClickableComponent.prototype.handleClick = function handleClick(event) {};\n        /**\n         * This gets called when a `ClickableComponent` gains focus via a `focus` event.\n         * Turns on listening for `keydown` events. When they happen it\n         * calls `this.handleKeyPress`.\n         *\n         * @param {EventTarget~Event} event\n         *        The `focus` event that caused this function to be called.\n         *\n         * @listens focus\n         */\n\n\n        ClickableComponent.prototype.handleFocus = function handleFocus(event) {\n          Events.on(_document2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));\n        };\n        /**\n         * Called when this ClickableComponent has focus and a key gets pressed down. By\n         * default it will call `this.handleClick` when the key is space or enter.\n         *\n         * @param {EventTarget~Event} event\n         *        The `keydown` event that caused this function to be called.\n         *\n         * @listens keydown\n         */\n\n\n        ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {\n          // Support Space (32) or Enter (13) key operation to fire a click event\n          if (event.which === 32 || event.which === 13) {\n            event.preventDefault();\n            this.handleClick(event);\n          } else if (_Component.prototype.handleKeyPress) {\n            // Pass keypress handling up for unsupported keys\n            _Component.prototype.handleKeyPress.call(this, event);\n          }\n        };\n        /**\n         * Called when a `ClickableComponent` loses focus. Turns off the listener for\n         * `keydown` events. Which Stops `this.handleKeyPress` from getting called.\n         *\n         * @param {EventTarget~Event} event\n         *        The `blur` event that caused this function to be called.\n         *\n         * @listens blur\n         */\n\n\n        ClickableComponent.prototype.handleBlur = function handleBlur(event) {\n          Events.off(_document2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));\n        };\n\n        return ClickableComponent;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('ClickableComponent', ClickableComponent);\n\n      exports['default'] = ClickableComponent;\n      /***/\n    },\n    /* 53 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file text-track-display.js\n       */\n\n\n      var darkGray = '#222';\n      var lightGray = '#ccc';\n      var fontMap = {\n        monospace: 'monospace',\n        sansSerif: 'sans-serif',\n        serif: 'serif',\n        monospaceSansSerif: '\"Andale Mono\", \"Lucida Console\", monospace',\n        monospaceSerif: '\"Courier New\", monospace',\n        proportionalSansSerif: 'sans-serif',\n        proportionalSerif: 'serif',\n        casual: '\"Comic Sans MS\", Impact, fantasy',\n        script: '\"Monotype Corsiva\", cursive',\n        smallcaps: '\"Andale Mono\", \"Lucida Console\", monospace, sans-serif'\n      };\n      /**\n       * Construct an rgba color from a given hex color code.\n       *\n       * @param {number} color\n       *        Hex number for color, like #f0e.\n       *\n       * @param {number} opacity\n       *        Value for opacity, 0.0 - 1.0.\n       *\n       * @return {string}\n       *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.\n       *\n       * @private\n       */\n\n      function constructColor(color, opacity) {\n        return 'rgba(' + // color looks like \"#f0e\"\n        parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';\n      }\n      /**\n       * Try to update the style of a DOM element. Some style changes will throw an error,\n       * particularly in IE8. Those should be noops.\n       *\n       * @param {Element} el\n       *        The DOM element to be styled.\n       *\n       * @param {string} style\n       *        The CSS property on the element that should be styled.\n       *\n       * @param {string} rule\n       *        The style rule that should be applied to the property.\n       */\n\n\n      function tryUpdateStyle(el, style, rule) {\n        try {\n          el.style[style] = rule;\n        } catch (e) {\n          // Satisfies linter.\n          return;\n        }\n      }\n      /**\n       * The component for displaying text track cues.\n       *\n       * @extends Component\n       */\n\n\n      var TextTrackDisplay = function (_Component) {\n        _inherits(TextTrackDisplay, _Component);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         *\n         * @param {Component~ReadyCallback} [ready]\n         *        The function to call when `TextTrackDisplay` is ready.\n         */\n\n\n        function TextTrackDisplay(player, options, ready) {\n          _classCallCheck(this, TextTrackDisplay);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options, ready));\n\n          player.on('loadstart', Fn.bind(_this, _this.toggleDisplay));\n          player.on('texttrackchange', Fn.bind(_this, _this.updateDisplay)); // This used to be called during player init, but was causing an error\n          // if a track should show by default and the display hadn't loaded yet.\n          // Should probably be moved to an external track loader when we support\n          // tracks that don't need a display.\n\n          player.ready(Fn.bind(_this, function () {\n            if (player.tech_ && player.tech_.featuresNativeTextTracks) {\n              this.hide();\n              return;\n            }\n\n            player.on('fullscreenchange', Fn.bind(this, this.updateDisplay));\n            var tracks = this.options_.playerOptions.tracks || [];\n\n            for (var i = 0; i < tracks.length; i++) {\n              this.player_.addRemoteTextTrack(tracks[i]);\n            }\n\n            var modes = {\n              captions: 1,\n              subtitles: 1\n            };\n            var trackList = this.player_.textTracks();\n            var firstDesc = void 0;\n            var firstCaptions = void 0;\n\n            if (trackList) {\n              for (var _i = 0; _i < trackList.length; _i++) {\n                var track = trackList[_i];\n\n                if (track['default']) {\n                  if (track.kind === 'descriptions' && !firstDesc) {\n                    firstDesc = track;\n                  } else if (track.kind in modes && !firstCaptions) {\n                    firstCaptions = track;\n                  }\n                }\n              } // We want to show the first default track but captions and subtitles\n              // take precedence over descriptions.\n              // So, display the first default captions or subtitles track\n              // and otherwise the first default descriptions track.\n\n\n              if (firstCaptions) {\n                firstCaptions.mode = 'showing';\n              } else if (firstDesc) {\n                firstDesc.mode = 'showing';\n              }\n            }\n          }));\n          return _this;\n        }\n        /**\n         * Turn display of {@link TextTrack}'s from the current state into the other state.\n         * There are only two states:\n         * - 'shown'\n         * - 'hidden'\n         *\n         * @listens Player#loadstart\n         */\n\n\n        TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {\n          if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {\n            this.hide();\n          } else {\n            this.show();\n          }\n        };\n        /**\n         * Create the {@link Component}'s DOM element.\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        TextTrackDisplay.prototype.createEl = function createEl() {\n          return _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-text-track-display'\n          }, {\n            'aria-live': 'off',\n            'aria-atomic': 'true'\n          });\n        };\n        /**\n         * Clear all displayed {@link TextTrack}s.\n         */\n\n\n        TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {\n          if (typeof _window2['default'].WebVTT === 'function') {\n            _window2['default'].WebVTT.processCues(_window2['default'], [], this.el_);\n          }\n        };\n        /**\n         * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or\n         * a {@link Player#fullscreenchange} is fired.\n         *\n         * @listens Player#texttrackchange\n         * @listens Player#fullscreenchange\n         */\n\n\n        TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {\n          var tracks = this.player_.textTracks();\n          this.clearDisplay();\n\n          if (!tracks) {\n            return;\n          } // Track display prioritization model: if multiple tracks are 'showing',\n          //  display the first 'subtitles' or 'captions' track which is 'showing',\n          //  otherwise display the first 'descriptions' track which is 'showing'\n\n\n          var descriptionsTrack = null;\n          var captionsSubtitlesTrack = null;\n          var i = tracks.length;\n\n          while (i--) {\n            var track = tracks[i];\n\n            if (track.mode === 'showing') {\n              if (track.kind === 'descriptions') {\n                descriptionsTrack = track;\n              } else {\n                captionsSubtitlesTrack = track;\n              }\n            }\n          }\n\n          if (captionsSubtitlesTrack) {\n            if (this.getAttribute('aria-live') !== 'off') {\n              this.setAttribute('aria-live', 'off');\n            }\n\n            this.updateForTrack(captionsSubtitlesTrack);\n          } else if (descriptionsTrack) {\n            if (this.getAttribute('aria-live') !== 'assertive') {\n              this.setAttribute('aria-live', 'assertive');\n            }\n\n            this.updateForTrack(descriptionsTrack);\n          }\n        };\n        /**\n         * Add an {@link Texttrack} to to the {@link Tech}s {@link TextTrackList}.\n         *\n         * @param {TextTrack} track\n         *        Text track object to be added to the list.\n         */\n\n\n        TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {\n          if (typeof _window2['default'].WebVTT !== 'function' || !track.activeCues) {\n            return;\n          }\n\n          var overrides = this.player_.textTrackSettings.getValues();\n          var cues = [];\n\n          for (var _i2 = 0; _i2 < track.activeCues.length; _i2++) {\n            cues.push(track.activeCues[_i2]);\n          }\n\n          _window2['default'].WebVTT.processCues(_window2['default'], cues, this.el_);\n\n          var i = cues.length;\n\n          while (i--) {\n            var cue = cues[i];\n\n            if (!cue) {\n              continue;\n            }\n\n            var cueDiv = cue.displayState;\n\n            if (overrides.color) {\n              cueDiv.firstChild.style.color = overrides.color;\n            }\n\n            if (overrides.textOpacity) {\n              tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));\n            }\n\n            if (overrides.backgroundColor) {\n              cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;\n            }\n\n            if (overrides.backgroundOpacity) {\n              tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));\n            }\n\n            if (overrides.windowColor) {\n              if (overrides.windowOpacity) {\n                tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));\n              } else {\n                cueDiv.style.backgroundColor = overrides.windowColor;\n              }\n            }\n\n            if (overrides.edgeStyle) {\n              if (overrides.edgeStyle === 'dropshadow') {\n                cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;\n              } else if (overrides.edgeStyle === 'raised') {\n                cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;\n              } else if (overrides.edgeStyle === 'depressed') {\n                cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;\n              } else if (overrides.edgeStyle === 'uniform') {\n                cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;\n              }\n            }\n\n            if (overrides.fontPercent && overrides.fontPercent !== 1) {\n              var fontSize = _window2['default'].parseFloat(cueDiv.style.fontSize);\n\n              cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';\n              cueDiv.style.height = 'auto';\n              cueDiv.style.top = 'auto';\n              cueDiv.style.bottom = '2px';\n            }\n\n            if (overrides.fontFamily && overrides.fontFamily !== 'default') {\n              if (overrides.fontFamily === 'small-caps') {\n                cueDiv.firstChild.style.fontVariant = 'small-caps';\n              } else {\n                cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];\n              }\n            }\n          }\n        };\n\n        return TextTrackDisplay;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('TextTrackDisplay', TextTrackDisplay);\n\n      exports['default'] = TextTrackDisplay;\n      /***/\n    },\n    /* 54 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file loading-spinner.js\n       */\n\n      /**\n       * A loading spinner for use during waiting/loading events.\n       *\n       * @extends Component\n       */\n\n\n      var LoadingSpinner = function (_Component) {\n        _inherits(LoadingSpinner, _Component);\n\n        function LoadingSpinner() {\n          _classCallCheck(this, LoadingSpinner);\n\n          return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n        }\n        /**\n         * Create the `LoadingSpinner`s DOM element.\n         *\n         * @return {Element}\n         *         The dom element that gets created.\n         */\n\n\n        LoadingSpinner.prototype.createEl = function createEl() {\n          return _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-loading-spinner',\n            dir: 'ltr'\n          });\n        };\n\n        return LoadingSpinner;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('LoadingSpinner', LoadingSpinner);\n\n      exports['default'] = LoadingSpinner;\n      /***/\n    },\n    /* 55 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _button = __webpack_require__(56);\n\n      var _button2 = _interopRequireDefault(_button);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file big-play-button.js\n       */\n\n      /**\n       * The initial play button that shows before the video has played. The hiding of the\n       * `BigPlayButton` get done via CSS and `Player` states.\n       *\n       * @extends Button\n       */\n\n\n      var BigPlayButton = function (_Button) {\n        _inherits(BigPlayButton, _Button);\n\n        function BigPlayButton() {\n          _classCallCheck(this, BigPlayButton);\n\n          return _possibleConstructorReturn(this, _Button.apply(this, arguments));\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.\n         */\n\n\n        BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-big-play-button';\n        };\n        /**\n         * This gets called when a `BigPlayButton` \"clicked\". See {@link ClickableComponent}\n         * for more detailed information on what a click can be.\n         *\n         * @param {EventTarget~Event} event\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        BigPlayButton.prototype.handleClick = function handleClick(event) {\n          this.player_.play();\n        };\n\n        return BigPlayButton;\n      }(_button2['default']);\n      /**\n       * The text that should display over the `BigPlayButton`s controls. Added to for localization.\n       *\n       * @type {string}\n       * @private\n       */\n\n\n      BigPlayButton.prototype.controlText_ = 'Play Video';\n\n      _component2['default'].registerComponent('BigPlayButton', BigPlayButton);\n\n      exports['default'] = BigPlayButton;\n      /***/\n    },\n    /* 56 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _clickableComponent = __webpack_require__(52);\n\n      var _clickableComponent2 = _interopRequireDefault(_clickableComponent);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      var _obj = __webpack_require__(13);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file button.js\n       */\n\n      /**\n       * Base class for all buttons.\n       *\n       * @extends ClickableComponent\n       */\n\n\n      var Button = function (_ClickableComponent) {\n        _inherits(Button, _ClickableComponent);\n\n        function Button() {\n          _classCallCheck(this, Button);\n\n          return _possibleConstructorReturn(this, _ClickableComponent.apply(this, arguments));\n        }\n        /**\n         * Create the `Button`s DOM element.\n         *\n         * @param {string} [tag=button]\n         *        Element's node type. e.g. 'button'\n         *\n         * @param {Object} [props={}]\n         *        An object of properties that should be set on the element.\n         *\n         * @param {Object} [attributes={}]\n         *        An object of attributes that should be set on the element.\n         *\n         * @return {Element}\n         *         The element that gets created.\n         */\n\n\n        Button.prototype.createEl = function createEl() {\n          var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'button';\n          var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          props = (0, _obj.assign)({\n            className: this.buildCSSClass()\n          }, props);\n\n          if (tag !== 'button') {\n            _log2['default'].warn('Creating a Button with an HTML element of ' + tag + ' is deprecated; use ClickableComponent instead.'); // Add properties for clickable element which is not a native HTML button\n\n\n            props = (0, _obj.assign)({\n              tabIndex: 0\n            }, props); // Add ARIA attributes for clickable element which is not a native HTML button\n\n            attributes = (0, _obj.assign)({\n              role: 'button'\n            }, attributes);\n          } // Add attributes for button element\n\n\n          attributes = (0, _obj.assign)({\n            // Necessary since the default button type is \"submit\"\n            'type': 'button',\n            // let the screen reader user know that the text of the button may change\n            'aria-live': 'polite'\n          }, attributes);\n\n          var el = _component2['default'].prototype.createEl.call(this, tag, props, attributes);\n\n          this.createControlTextEl(el);\n          return el;\n        };\n        /**\n         * Add a child `Component` inside of this `Button`.\n         *\n         * @param {string|Component} child\n         *        The name or instance of a child to add.\n         *\n         * @param {Object} [options={}]\n         *        The key/value store of options that will get passed to children of\n         *        the child.\n         *\n         * @return {Component}\n         *         The `Component` that gets added as a child. When using a string the\n         *         `Component` will get created by this process.\n         *\n         * @deprecated since version 5\n         */\n\n\n        Button.prototype.addChild = function addChild(child) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          var className = this.constructor.name;\n\n          _log2['default'].warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.'); // Avoid the error message generated by ClickableComponent's addChild method\n\n\n          return _component2['default'].prototype.addChild.call(this, child, options);\n        };\n        /**\n         * Enable the `Button` element so that it can be activated or clicked. Use this with\n         * {@link Button#disable}.\n         *\n         * @return {Component}\n         *         Returns itself; method is chainable.\n         */\n\n\n        Button.prototype.enable = function enable() {\n          _ClickableComponent.prototype.enable.call(this);\n\n          this.el_.removeAttribute('disabled');\n        };\n        /**\n         * Enable the `Button` element so that it cannot be activated or clicked. Use this with\n         * {@link Button#enable}.\n         *\n         * @return {Component}\n         *         Returns itself; method is chainable.\n         */\n\n\n        Button.prototype.disable = function disable() {\n          _ClickableComponent.prototype.disable.call(this);\n\n          this.el_.setAttribute('disabled', 'disabled');\n        };\n        /**\n         * This gets called when a `Button` has focus and `keydown` is triggered via a key\n         * press.\n         *\n         * @param {EventTarget~Event} event\n         *        The event that caused this function to get called.\n         *\n         * @listens keydown\n         */\n\n\n        Button.prototype.handleKeyPress = function handleKeyPress(event) {\n          // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.\n          if (event.which === 32 || event.which === 13) {\n            return;\n          } // Pass keypress handling up for unsupported keys\n\n\n          _ClickableComponent.prototype.handleKeyPress.call(this, event);\n        };\n\n        return Button;\n      }(_clickableComponent2['default']);\n\n      _component2['default'].registerComponent('Button', Button);\n\n      exports['default'] = Button;\n      /***/\n    },\n    /* 57 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _button = __webpack_require__(56);\n\n      var _button2 = _interopRequireDefault(_button);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file close-button.js\n       */\n\n      /**\n       * The `CloseButton` is a `{@link Button}` that fires a `close` event when\n       * it gets clicked.\n       *\n       * @extends Button\n       */\n\n\n      var CloseButton = function (_Button) {\n        _inherits(CloseButton, _Button);\n        /**\n         * Creates an instance of the this class.\n         *\n         * @param  {Player} player\n         *         The `Player` that this class should be attached to.\n         *\n         * @param  {Object} [options]\n         *         The key/value store of player options.\n         */\n\n\n        function CloseButton(player, options) {\n          _classCallCheck(this, CloseButton);\n\n          var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));\n\n          _this.controlText(options && options.controlText || _this.localize('Close'));\n\n          return _this;\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        CloseButton.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * This gets called when a `CloseButton` gets clicked. See\n         * {@link ClickableComponent#handleClick} for more information on when this will be\n         * triggered\n         *\n         * @param {EventTarget~Event} event\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         * @fires CloseButton#close\n         */\n\n\n        CloseButton.prototype.handleClick = function handleClick(event) {\n          /**\n           * Triggered when the a `CloseButton` is clicked.\n           *\n           * @event CloseButton#close\n           * @type {EventTarget~Event}\n           *\n           * @property {boolean} [bubbles=false]\n           *           set to false so that the close event does not\n           *           bubble up to parents if there is no listener\n           */\n          this.trigger({\n            type: 'close',\n            bubbles: false\n          });\n        };\n\n        return CloseButton;\n      }(_button2['default']);\n\n      _component2['default'].registerComponent('CloseButton', CloseButton);\n\n      exports['default'] = CloseButton;\n      /***/\n    },\n    /* 58 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      __webpack_require__(59);\n\n      __webpack_require__(60);\n\n      __webpack_require__(62);\n\n      __webpack_require__(63);\n\n      __webpack_require__(64);\n\n      __webpack_require__(65);\n\n      __webpack_require__(66);\n\n      __webpack_require__(74);\n\n      __webpack_require__(75);\n\n      __webpack_require__(78);\n\n      __webpack_require__(81);\n\n      __webpack_require__(82);\n\n      __webpack_require__(91);\n\n      __webpack_require__(92);\n\n      __webpack_require__(93);\n\n      __webpack_require__(95);\n\n      __webpack_require__(97);\n\n      __webpack_require__(99);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file control-bar.js\n       */\n      // Required children\n\n      /**\n       * Container of main controls.\n       *\n       * @extends Component\n       */\n\n\n      var ControlBar = function (_Component) {\n        _inherits(ControlBar, _Component);\n\n        function ControlBar() {\n          _classCallCheck(this, ControlBar);\n\n          return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        ControlBar.prototype.createEl = function createEl() {\n          return _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-control-bar',\n            dir: 'ltr'\n          }, {\n            // The control bar is a group, so it can contain menuitems\n            role: 'group'\n          });\n        };\n\n        return ControlBar;\n      }(_component2['default']);\n      /**\n       * Default options for `ControlBar`\n       *\n       * @type {Object}\n       * @private\n       */\n\n\n      ControlBar.prototype.options_ = {\n        children: ['playToggle', 'volumeMenuButton', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subtitlesButton', 'captionsButton', 'audioTrackButton', 'fullscreenToggle']\n      };\n\n      _component2['default'].registerComponent('ControlBar', ControlBar);\n\n      exports['default'] = ControlBar;\n      /***/\n    },\n    /* 59 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _button = __webpack_require__(56);\n\n      var _button2 = _interopRequireDefault(_button);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file play-toggle.js\n       */\n\n      /**\n       * Button to toggle between play and pause.\n       *\n       * @extends Button\n       */\n\n\n      var PlayToggle = function (_Button) {\n        _inherits(PlayToggle, _Button);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function PlayToggle(player, options) {\n          _classCallCheck(this, PlayToggle);\n\n          var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));\n\n          _this.on(player, 'play', _this.handlePlay);\n\n          _this.on(player, 'pause', _this.handlePause);\n\n          return _this;\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        PlayToggle.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * This gets called when an `PlayToggle` is \"clicked\". See\n         * {@link ClickableComponent} for more detailed information on what a click can be.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        PlayToggle.prototype.handleClick = function handleClick(event) {\n          if (this.player_.paused()) {\n            this.player_.play();\n          } else {\n            this.player_.pause();\n          }\n        };\n        /**\n         * Add the vjs-playing class to the element so it can change appearance.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The event that caused this function to run.\n         *\n         * @listens Player#play\n         */\n\n\n        PlayToggle.prototype.handlePlay = function handlePlay(event) {\n          this.removeClass('vjs-paused');\n          this.addClass('vjs-playing'); // change the button text to \"Pause\"\n\n          this.controlText('Pause');\n        };\n        /**\n         * Add the vjs-paused class to the element so it can change appearance.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The event that caused this function to run.\n         *\n         * @listens Player#pause\n         */\n\n\n        PlayToggle.prototype.handlePause = function handlePause(event) {\n          this.removeClass('vjs-playing');\n          this.addClass('vjs-paused'); // change the button text to \"Play\"\n\n          this.controlText('Play');\n        };\n\n        return PlayToggle;\n      }(_button2['default']);\n      /**\n       * The text that should display over the `PlayToggle`s controls. Added for localization.\n       *\n       * @type {string}\n       * @private\n       */\n\n\n      PlayToggle.prototype.controlText_ = 'Play';\n\n      _component2['default'].registerComponent('PlayToggle', PlayToggle);\n\n      exports['default'] = PlayToggle;\n      /***/\n    },\n    /* 60 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _formatTime = __webpack_require__(61);\n\n      var _formatTime2 = _interopRequireDefault(_formatTime);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file current-time-display.js\n       */\n\n      /**\n       * Displays the current time\n       *\n       * @extends Component\n       */\n\n\n      var CurrentTimeDisplay = function (_Component) {\n        _inherits(CurrentTimeDisplay, _Component);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function CurrentTimeDisplay(player, options) {\n          _classCallCheck(this, CurrentTimeDisplay);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          _this.on(player, 'timeupdate', _this.updateContent);\n\n          return _this;\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        CurrentTimeDisplay.prototype.createEl = function createEl() {\n          var el = _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-current-time vjs-time-control vjs-control'\n          });\n\n          this.contentEl_ = Dom.createEl('div', {\n            className: 'vjs-current-time-display',\n            // label the current time for screen reader users\n            innerHTML: '<span class=\"vjs-control-text\">Current Time </span>' + '0:00'\n          }, {\n            // tell screen readers not to automatically read the time as it changes\n            'aria-live': 'off'\n          });\n          el.appendChild(this.contentEl_);\n          return el;\n        };\n        /**\n         * Update current time display\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `timeupdate` event that caused this function to run.\n         *\n         * @listens Player#timeupdate\n         */\n\n\n        CurrentTimeDisplay.prototype.updateContent = function updateContent(event) {\n          // Allows for smooth scrubbing, when player can't keep up.\n          var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n          var localizedText = this.localize('Current Time');\n          var formattedTime = (0, _formatTime2['default'])(time, this.player_.duration());\n\n          if (formattedTime !== this.formattedTime_) {\n            this.formattedTime_ = formattedTime;\n            this.contentEl_.innerHTML = '<span class=\"vjs-control-text\">' + localizedText + '</span> ' + formattedTime;\n          }\n        };\n\n        return CurrentTimeDisplay;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);\n\n      exports['default'] = CurrentTimeDisplay;\n      /***/\n    },\n    /* 61 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      /**\n       * @file format-time.js\n       * @module Format-time\n       */\n\n      /**\n       * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in seconds)\n       * will force a number of leading zeros to cover the length of the guide.\n       *\n       * @param {number} seconds\n       *        Number of seconds to be turned into a string\n       *\n       * @param {number} guide\n       *        Number (in seconds) to model the string after\n       *\n       * @return {string}\n       *         Time formatted as H:MM:SS or M:SS\n       */\n\n      function formatTime(seconds) {\n        var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;\n        seconds = seconds < 0 ? 0 : seconds;\n        var s = Math.floor(seconds % 60);\n        var m = Math.floor(seconds / 60 % 60);\n        var h = Math.floor(seconds / 3600);\n        var gm = Math.floor(guide / 60 % 60);\n        var gh = Math.floor(guide / 3600); // handle invalid times\n\n        if (isNaN(seconds) || seconds === Infinity) {\n          // '-' is false for all relational operators (e.g. <, >=) so this setting\n          // will add the minimum number of fields specified by the guide\n          h = m = s = '-';\n        } // Check if we need to show hours\n\n\n        h = h > 0 || gh > 0 ? h + ':' : ''; // If hours are showing, we may need to add a leading zero.\n        // Always show at least one digit of minutes.\n\n        m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':'; // Check if leading zero is need for seconds\n\n        s = s < 10 ? '0' + s : s;\n        return h + m + s;\n      }\n\n      exports['default'] = formatTime;\n      /***/\n    },\n    /* 62 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _formatTime = __webpack_require__(61);\n\n      var _formatTime2 = _interopRequireDefault(_formatTime);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file duration-display.js\n       */\n\n      /**\n       * Displays the duration\n       *\n       * @extends Component\n       */\n\n\n      var DurationDisplay = function (_Component) {\n        _inherits(DurationDisplay, _Component);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function DurationDisplay(player, options) {\n          _classCallCheck(this, DurationDisplay);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          _this.on(player, 'durationchange', _this.updateContent); // Also listen for timeupdate and loadedmetadata because removing those\n          // listeners could have broken dependent applications/libraries. These\n          // can likely be removed for 6.0.\n\n\n          _this.on(player, 'timeupdate', _this.updateContent);\n\n          _this.on(player, 'loadedmetadata', _this.updateContent);\n\n          return _this;\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        DurationDisplay.prototype.createEl = function createEl() {\n          var el = _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-duration vjs-time-control vjs-control'\n          });\n\n          this.contentEl_ = Dom.createEl('div', {\n            className: 'vjs-duration-display',\n            // label the duration time for screen reader users\n            innerHTML: '<span class=\"vjs-control-text\">' + this.localize('Duration Time') + '</span> 0:00'\n          }, {\n            // tell screen readers not to automatically read the time as it changes\n            'aria-live': 'off'\n          });\n          el.appendChild(this.contentEl_);\n          return el;\n        };\n        /**\n         * Update duration time display.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused\n         *        this function to be called.\n         *\n         * @listens Player#durationchange\n         * @listens Player#timeupdate\n         * @listens Player#loadedmetadata\n         */\n\n\n        DurationDisplay.prototype.updateContent = function updateContent(event) {\n          var duration = this.player_.duration();\n\n          if (duration && this.duration_ !== duration) {\n            this.duration_ = duration;\n            var localizedText = this.localize('Duration Time');\n            var formattedTime = (0, _formatTime2['default'])(duration); // label the duration time for screen reader users\n\n            this.contentEl_.innerHTML = '<span class=\"vjs-control-text\">' + localizedText + '</span> ' + formattedTime;\n          }\n        };\n\n        return DurationDisplay;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('DurationDisplay', DurationDisplay);\n\n      exports['default'] = DurationDisplay;\n      /***/\n    },\n    /* 63 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file time-divider.js\n       */\n\n      /**\n       * The separator between the current time and duration.\n       * Can be hidden if it's not needed in the design.\n       *\n       * @extends Component\n       */\n\n\n      var TimeDivider = function (_Component) {\n        _inherits(TimeDivider, _Component);\n\n        function TimeDivider() {\n          _classCallCheck(this, TimeDivider);\n\n          return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n        }\n        /**\n         * Create the component's DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        TimeDivider.prototype.createEl = function createEl() {\n          return _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-time-control vjs-time-divider',\n            innerHTML: '<div><span>/</span></div>'\n          });\n        };\n\n        return TimeDivider;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('TimeDivider', TimeDivider);\n\n      exports['default'] = TimeDivider;\n      /***/\n    },\n    /* 64 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _formatTime = __webpack_require__(61);\n\n      var _formatTime2 = _interopRequireDefault(_formatTime);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file remaining-time-display.js\n       */\n\n      /**\n       * Displays the time left in the video\n       *\n       * @extends Component\n       */\n\n\n      var RemainingTimeDisplay = function (_Component) {\n        _inherits(RemainingTimeDisplay, _Component);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function RemainingTimeDisplay(player, options) {\n          _classCallCheck(this, RemainingTimeDisplay);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          _this.on(player, 'timeupdate', _this.updateContent);\n\n          _this.on(player, 'durationchange', _this.updateContent);\n\n          return _this;\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        RemainingTimeDisplay.prototype.createEl = function createEl() {\n          var el = _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-remaining-time vjs-time-control vjs-control'\n          });\n\n          this.contentEl_ = Dom.createEl('div', {\n            className: 'vjs-remaining-time-display',\n            // label the remaining time for screen reader users\n            innerHTML: '<span class=\"vjs-control-text\">' + this.localize('Remaining Time') + '</span> -0:00'\n          }, {\n            // tell screen readers not to automatically read the time as it changes\n            'aria-live': 'off'\n          });\n          el.appendChild(this.contentEl_);\n          return el;\n        };\n        /**\n         * Update remaining time display.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `timeupdate` or `durationchange` event that caused this to run.\n         *\n         * @listens Player#timeupdate\n         * @listens Player#durationchange\n         */\n\n\n        RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {\n          if (this.player_.duration()) {\n            var localizedText = this.localize('Remaining Time');\n            var formattedTime = (0, _formatTime2['default'])(this.player_.remainingTime());\n\n            if (formattedTime !== this.formattedTime_) {\n              this.formattedTime_ = formattedTime;\n              this.contentEl_.innerHTML = '<span class=\"vjs-control-text\">' + localizedText + '</span> -' + formattedTime;\n            }\n          } // Allows for smooth scrubbing, when player can't keep up.\n          // var time = (this.player_.scrubbing()) ? this.player_.getCache().currentTime : this.player_.currentTime();\n          // this.contentEl_.innerHTML = vjs.formatTime(time, this.player_.duration());\n\n        };\n\n        return RemainingTimeDisplay;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);\n\n      exports['default'] = RemainingTimeDisplay;\n      /***/\n    },\n    /* 65 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file live-display.js\n       */\n      // TODO - Future make it click to snap to live\n\n      /**\n       * Displays the live indicator when duration is Infinity.\n       *\n       * @extends Component\n       */\n\n\n      var LiveDisplay = function (_Component) {\n        _inherits(LiveDisplay, _Component);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function LiveDisplay(player, options) {\n          _classCallCheck(this, LiveDisplay);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          _this.updateShowing();\n\n          _this.on(_this.player(), 'durationchange', _this.updateShowing);\n\n          return _this;\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        LiveDisplay.prototype.createEl = function createEl() {\n          var el = _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-live-control vjs-control'\n          });\n\n          this.contentEl_ = Dom.createEl('div', {\n            className: 'vjs-live-display',\n            innerHTML: '<span class=\"vjs-control-text\">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE')\n          }, {\n            'aria-live': 'off'\n          });\n          el.appendChild(this.contentEl_);\n          return el;\n        };\n        /**\n         * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide\n         * it accordingly\n         *\n         * @param {EventTarget~Event} [event]\n         *        The {@link Player#durationchange} event that caused this function to run.\n         *\n         * @listens Player#durationchange\n         */\n\n\n        LiveDisplay.prototype.updateShowing = function updateShowing(event) {\n          if (this.player().duration() === Infinity) {\n            this.show();\n          } else {\n            this.hide();\n          }\n        };\n\n        return LiveDisplay;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('LiveDisplay', LiveDisplay);\n\n      exports['default'] = LiveDisplay;\n      /***/\n    },\n    /* 66 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      __webpack_require__(67);\n\n      __webpack_require__(73);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file progress-control.js\n       */\n\n      /**\n       * The Progress Control component contains the seek bar, load progress,\n       * and play progress.\n       *\n       * @extends Component\n       */\n\n\n      var ProgressControl = function (_Component) {\n        _inherits(ProgressControl, _Component);\n\n        function ProgressControl() {\n          _classCallCheck(this, ProgressControl);\n\n          return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        ProgressControl.prototype.createEl = function createEl() {\n          return _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-progress-control vjs-control'\n          });\n        };\n\n        return ProgressControl;\n      }(_component2['default']);\n      /**\n       * Default options for `ProgressControl`\n       *\n       * @type {Object}\n       * @private\n       */\n\n\n      ProgressControl.prototype.options_ = {\n        children: ['seekBar']\n      };\n\n      _component2['default'].registerComponent('ProgressControl', ProgressControl);\n\n      exports['default'] = ProgressControl;\n      /***/\n    },\n    /* 67 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _slider = __webpack_require__(68);\n\n      var _slider2 = _interopRequireDefault(_slider);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _formatTime = __webpack_require__(61);\n\n      var _formatTime2 = _interopRequireDefault(_formatTime);\n\n      var _computedStyle = __webpack_require__(69);\n\n      var _computedStyle2 = _interopRequireDefault(_computedStyle);\n\n      __webpack_require__(70);\n\n      __webpack_require__(71);\n\n      __webpack_require__(72);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file seek-bar.js\n       */\n\n      /**\n       * Seek Bar and holder for the progress bars\n       *\n       * @extends Slider\n       */\n\n\n      var SeekBar = function (_Slider) {\n        _inherits(SeekBar, _Slider);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function SeekBar(player, options) {\n          _classCallCheck(this, SeekBar);\n\n          var _this = _possibleConstructorReturn(this, _Slider.call(this, player, options));\n\n          _this.on(player, 'timeupdate', _this.updateProgress);\n\n          _this.on(player, 'ended', _this.updateProgress);\n\n          player.ready(Fn.bind(_this, _this.updateProgress));\n\n          if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {\n            _this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;\n          }\n\n          if (_this.keepTooltipsInside) {\n            _this.tooltipProgressBar = _this.addChild('TooltipProgressBar');\n          }\n\n          return _this;\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        SeekBar.prototype.createEl = function createEl() {\n          return _Slider.prototype.createEl.call(this, 'div', {\n            className: 'vjs-progress-holder'\n          }, {\n            'aria-label': 'progress bar'\n          });\n        };\n        /**\n         * Update the seek bars tooltip and width.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `timeupdate` or `ended` event that caused this to run.\n         *\n         * @listens Player#timeupdate\n         * @listens Player#ended\n         */\n\n\n        SeekBar.prototype.updateProgress = function updateProgress(event) {\n          this.updateAriaAttributes(this.el_);\n\n          if (this.keepTooltipsInside) {\n            this.updateAriaAttributes(this.tooltipProgressBar.el_);\n            this.tooltipProgressBar.el_.style.width = this.bar.el_.style.width;\n            var playerWidth = parseFloat((0, _computedStyle2['default'])(this.player().el(), 'width'));\n            var tooltipWidth = parseFloat((0, _computedStyle2['default'])(this.tooltipProgressBar.tooltip, 'width'));\n            var tooltipStyle = this.tooltipProgressBar.el().style;\n            tooltipStyle.maxWidth = Math.floor(playerWidth - tooltipWidth / 2) + 'px';\n            tooltipStyle.minWidth = Math.ceil(tooltipWidth / 2) + 'px';\n            tooltipStyle.right = '-' + tooltipWidth / 2 + 'px';\n          }\n        };\n        /**\n         * Update ARIA accessibility attributes\n         *\n         * @param {Element} el\n         *        The element to update with aria accessibility attributes.\n         */\n\n\n        SeekBar.prototype.updateAriaAttributes = function updateAriaAttributes(el) {\n          // Allows for smooth scrubbing, when player can't keep up.\n          var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime(); // machine readable value of progress bar (percentage complete)\n\n          el.setAttribute('aria-valuenow', (this.getPercent() * 100).toFixed(2)); // human readable value of progress bar (time complete)\n\n          el.setAttribute('aria-valuetext', (0, _formatTime2['default'])(time, this.player_.duration()));\n        };\n        /**\n         * Get percentage of video played\n         *\n          * @return {Number} Percentage played\n         */\n\n\n        SeekBar.prototype.getPercent = function getPercent() {\n          var percent = this.player_.currentTime() / this.player_.duration();\n          return percent >= 1 ? 1 : percent;\n        };\n        /**\n         * Handle mouse down on seek bar\n         *\n         * @param {EventTarget~Event} event\n         *        The `mousedown` event that caused this to run.\n         *\n         * @listens mousedown\n         */\n\n\n        SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {\n          _Slider.prototype.handleMouseDown.call(this, event);\n\n          this.player_.scrubbing(true);\n          this.videoWasPlaying = !this.player_.paused();\n          this.player_.pause();\n        };\n        /**\n         * Handle mouse move on seek bar\n         *\n         * @param {EventTarget~Event} event\n         *        The `mousemove` event that caused this to run.\n         *\n         * @listens mousemove\n         */\n\n\n        SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {\n          var newTime = this.calculateDistance(event) * this.player_.duration(); // Don't let video end while scrubbing.\n\n          if (newTime === this.player_.duration()) {\n            newTime = newTime - 0.1;\n          } // Set new time (tell player to seek to new time)\n\n\n          this.player_.currentTime(newTime);\n        };\n        /**\n         * Handle mouse up on seek bar\n         *\n         * @param {EventTarget~Event} event\n         *        The `mouseup` event that caused this to run.\n         *\n         * @listens mouseup\n         */\n\n\n        SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {\n          _Slider.prototype.handleMouseUp.call(this, event);\n\n          this.player_.scrubbing(false);\n\n          if (this.videoWasPlaying) {\n            this.player_.play();\n          }\n        };\n        /**\n         * Move more quickly fast forward for keyboard-only users\n         */\n\n\n        SeekBar.prototype.stepForward = function stepForward() {\n          // more quickly fast forward for keyboard-only users\n          this.player_.currentTime(this.player_.currentTime() + 5);\n        };\n        /**\n         * Move more quickly rewind for keyboard-only users\n         */\n\n\n        SeekBar.prototype.stepBack = function stepBack() {\n          // more quickly rewind for keyboard-only users\n          this.player_.currentTime(this.player_.currentTime() - 5);\n        };\n\n        return SeekBar;\n      }(_slider2['default']);\n      /**\n       * Default options for the `SeekBar`\n       *\n       * @type {Object}\n       * @private\n       */\n\n\n      SeekBar.prototype.options_ = {\n        children: ['loadProgressBar', 'mouseTimeDisplay', 'playProgressBar'],\n        barName: 'playProgressBar'\n      };\n      /**\n       * Call the update event for this Slider when this event happens on the player.\n       *\n       * @type {string}\n       */\n\n      SeekBar.prototype.playerEvent = 'timeupdate';\n\n      _component2['default'].registerComponent('SeekBar', SeekBar);\n\n      exports['default'] = SeekBar;\n      /***/\n    },\n    /* 68 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _obj = __webpack_require__(13);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file slider.js\n       */\n\n      /**\n       * The base functionality for a slider. Can be vertical or horizontal.\n       * For instance the volume bar or the seek bar on a video is a slider.\n       *\n       * @extends Component\n       */\n\n\n      var Slider = function (_Component) {\n        _inherits(Slider, _Component);\n        /**\n         * Create an instance of this class\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function Slider(player, options) {\n          _classCallCheck(this, Slider); // Set property names to bar to match with the child Slider class is looking for\n\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          _this.bar = _this.getChild(_this.options_.barName); // Set a horizontal or vertical class on the slider depending on the slider type\n\n          _this.vertical(!!_this.options_.vertical);\n\n          _this.on('mousedown', _this.handleMouseDown);\n\n          _this.on('touchstart', _this.handleMouseDown);\n\n          _this.on('focus', _this.handleFocus);\n\n          _this.on('blur', _this.handleBlur);\n\n          _this.on('click', _this.handleClick);\n\n          _this.on(player, 'controlsvisible', _this.update);\n\n          _this.on(player, _this.playerEvent, _this.update);\n\n          return _this;\n        }\n        /**\n         * Create the `Button`s DOM element.\n         *\n         * @param {string} type\n         *        Type of element to create.\n         *\n         * @param {Object} [props={}]\n         *        List of properties in Object form.\n         *\n         * @param {Object} [attributes={}]\n         *        list of attributes in Object form.\n         *\n         * @return {Element}\n         *         The element that gets created.\n         */\n\n\n        Slider.prototype.createEl = function createEl(type) {\n          var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // Add the slider element class to all sub classes\n\n          props.className = props.className + ' vjs-slider';\n          props = (0, _obj.assign)({\n            tabIndex: 0\n          }, props);\n          attributes = (0, _obj.assign)({\n            'role': 'slider',\n            'aria-valuenow': 0,\n            'aria-valuemin': 0,\n            'aria-valuemax': 100,\n            'tabIndex': 0\n          }, attributes);\n          return _Component.prototype.createEl.call(this, type, props, attributes);\n        };\n        /**\n         * Handle `mousedown` or `touchstart` events on the `Slider`.\n         *\n         * @param {EventTarget~Event} event\n         *        `mousedown` or `touchstart` event that triggered this function\n         *\n         * @listens mousedown\n         * @listens touchstart\n         * @fires Slider#slideractive\n         */\n\n\n        Slider.prototype.handleMouseDown = function handleMouseDown(event) {\n          var doc = this.bar.el_.ownerDocument;\n          event.preventDefault();\n          Dom.blockTextSelection();\n          this.addClass('vjs-sliding');\n          /**\n           * Triggered when the slider is in an active state\n           *\n           * @event Slider#slideractive\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('slideractive');\n          this.on(doc, 'mousemove', this.handleMouseMove);\n          this.on(doc, 'mouseup', this.handleMouseUp);\n          this.on(doc, 'touchmove', this.handleMouseMove);\n          this.on(doc, 'touchend', this.handleMouseUp);\n          this.handleMouseMove(event);\n        };\n        /**\n         * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.\n         * The `mousemove` and `touchmove` events will only only trigger this function during\n         * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and\n         * {@link Slider#handleMouseUp}.\n         *\n         * @param {EventTarget~Event} event\n         *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered\n         *        this function\n         *\n         * @listens mousemove\n         * @listens touchmove\n         */\n\n\n        Slider.prototype.handleMouseMove = function handleMouseMove(event) {};\n        /**\n         * Handle `mouseup` or `touchend` events on the `Slider`.\n         *\n         * @param {EventTarget~Event} event\n         *        `mouseup` or `touchend` event that triggered this function.\n         *\n         * @listens touchend\n         * @listens mouseup\n         * @fires Slider#sliderinactive\n         */\n\n\n        Slider.prototype.handleMouseUp = function handleMouseUp() {\n          var doc = this.bar.el_.ownerDocument;\n          Dom.unblockTextSelection();\n          this.removeClass('vjs-sliding');\n          /**\n           * Triggered when the slider is no longer in an active state.\n           *\n           * @event Slider#sliderinactive\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('sliderinactive');\n          this.off(doc, 'mousemove', this.handleMouseMove);\n          this.off(doc, 'mouseup', this.handleMouseUp);\n          this.off(doc, 'touchmove', this.handleMouseMove);\n          this.off(doc, 'touchend', this.handleMouseUp);\n          this.update();\n        };\n        /**\n         * Update the progress bar of the `Slider`.\n         */\n\n\n        Slider.prototype.update = function update() {\n          // In VolumeBar init we have a setTimeout for update that pops and update to the end of the\n          // execution stack. The player is destroyed before then update will cause an error\n          if (!this.el_) {\n            return;\n          } // If scrubbing, we could use a cached value to make the handle keep up with the user's mouse.\n          // On HTML5 browsers scrubbing is really smooth, but some flash players are slow, so we might want to utilize this later.\n          // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();\n\n\n          var progress = this.getPercent();\n          var bar = this.bar; // If there's no bar...\n\n          if (!bar) {\n            return;\n          } // Protect against no duration and other division issues\n\n\n          if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {\n            progress = 0;\n          } // Convert to a percentage for setting\n\n\n          var percentage = (progress * 100).toFixed(2) + '%'; // Set the new bar width or height\n\n          if (this.vertical()) {\n            bar.el().style.height = percentage;\n          } else {\n            bar.el().style.width = percentage;\n          }\n        };\n        /**\n         * Calculate distance for slider\n         *\n         * @param {EventTarget~Event} event\n         *        The event that caused this function to run.\n         *\n         * @return {number}\n         *         The current position of the Slider.\n         *         - postition.x for vertical `Slider`s\n         *         - postition.y for horizontal `Slider`s\n         */\n\n\n        Slider.prototype.calculateDistance = function calculateDistance(event) {\n          var position = Dom.getPointerPosition(this.el_, event);\n\n          if (this.vertical()) {\n            return position.y;\n          }\n\n          return position.x;\n        };\n        /**\n         * Handle a `focus` event on this `Slider`.\n         *\n         * @param {EventTarget~Event} event\n         *        The `focus` event that caused this function to run.\n         *\n         * @listens focus\n         */\n\n\n        Slider.prototype.handleFocus = function handleFocus() {\n          this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);\n        };\n        /**\n         * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down\n         * arrow keys. This function will only be called when the slider has focus. See\n         * {@link Slider#handleFocus} and {@link Slider#handleBlur}.\n         *\n         * @param {EventTarget~Event} event\n         *        the `keydown` event that caused this function to run.\n         *\n         * @listens keydown\n         */\n\n\n        Slider.prototype.handleKeyPress = function handleKeyPress(event) {\n          // Left and Down Arrows\n          if (event.which === 37 || event.which === 40) {\n            event.preventDefault();\n            this.stepBack(); // Up and Right Arrows\n          } else if (event.which === 38 || event.which === 39) {\n            event.preventDefault();\n            this.stepForward();\n          }\n        };\n        /**\n         * Handle a `blur` event on this `Slider`.\n         *\n         * @param {EventTarget~Event} event\n         *        The `blur` event that caused this function to run.\n         *\n         * @listens blur\n         */\n\n\n        Slider.prototype.handleBlur = function handleBlur() {\n          this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);\n        };\n        /**\n         * Listener for click events on slider, used to prevent clicks\n         *   from bubbling up to parent elements like button menus.\n         *\n         * @param {Object} event\n         *        Event that caused this object to run\n         */\n\n\n        Slider.prototype.handleClick = function handleClick(event) {\n          event.stopImmediatePropagation();\n          event.preventDefault();\n        };\n        /**\n         * Get/set if slider is horizontal for vertical\n         *\n         * @param {boolean} [bool]\n         *        - true if slider is vertical,\n         *        - false is horizontal\n         *\n         * @return {boolean|Slider}\n         *         - true if slider is vertical, and getting\n         *         - false is horizontal, and getting\n         *         - a reference to this object when setting\n         */\n\n\n        Slider.prototype.vertical = function vertical(bool) {\n          if (bool === undefined) {\n            return this.vertical_ || false;\n          }\n\n          this.vertical_ = !!bool;\n\n          if (this.vertical_) {\n            this.addClass('vjs-slider-vertical');\n          } else {\n            this.addClass('vjs-slider-horizontal');\n          }\n\n          return this;\n        };\n\n        return Slider;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('Slider', Slider);\n\n      exports['default'] = Slider;\n      /***/\n    },\n    /* 69 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports['default'] = computedStyle;\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n      /**\n       * A safe getComputedStyle with an IE8 fallback.\n       *\n       * This is needed because in Firefox, if the player is loaded in an iframe with\n       * `display:none`, then `getComputedStyle` returns `null`, so, we do a null-check to\n       * make sure  that the player doesn't break in these cases.\n       *\n       * @param {Element} el\n       *        The element you want the computed style of\n       *\n       * @param {string} prop\n       *        The property name you want\n       *\n       * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n       */\n\n\n      function computedStyle(el, prop) {\n        if (!el || !prop) {\n          return '';\n        }\n\n        if (typeof _window2['default'].getComputedStyle === 'function') {\n          var cs = _window2['default'].getComputedStyle(el);\n\n          return cs ? cs[prop] : '';\n        }\n\n        return el.currentStyle[prop] || '';\n      }\n      /**\n       * @file computed-style.js\n       * @module computed-style\n       */\n\n      /***/\n\n    },\n    /* 70 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file load-progress-bar.js\n       */\n\n      /**\n       * Shows loading progress\n       *\n       * @extends Component\n       */\n\n\n      var LoadProgressBar = function (_Component) {\n        _inherits(LoadProgressBar, _Component);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function LoadProgressBar(player, options) {\n          _classCallCheck(this, LoadProgressBar);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          _this.partEls_ = [];\n\n          _this.on(player, 'progress', _this.update);\n\n          return _this;\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        LoadProgressBar.prototype.createEl = function createEl() {\n          return _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-load-progress',\n            innerHTML: '<span class=\"vjs-control-text\"><span>' + this.localize('Loaded') + '</span>: 0%</span>'\n          });\n        };\n        /**\n         * Update progress bar\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `progress` event that caused this function to run.\n         *\n         * @listens Player#progress\n         */\n\n\n        LoadProgressBar.prototype.update = function update(event) {\n          var buffered = this.player_.buffered();\n          var duration = this.player_.duration();\n          var bufferedEnd = this.player_.bufferedEnd();\n          var children = this.partEls_; // get the percent width of a time compared to the total end\n\n          var percentify = function percentify(time, end) {\n            // no NaN\n            var percent = time / end || 0;\n            return (percent >= 1 ? 1 : percent) * 100 + '%';\n          }; // update the width of the progress bar\n\n\n          this.el_.style.width = percentify(bufferedEnd, duration); // add child elements to represent the individual buffered time ranges\n\n          for (var i = 0; i < buffered.length; i++) {\n            var start = buffered.start(i);\n            var end = buffered.end(i);\n            var part = children[i];\n\n            if (!part) {\n              part = this.el_.appendChild(Dom.createEl());\n              children[i] = part;\n            } // set the percent based on the width of the progress bar (bufferedEnd)\n\n\n            part.style.left = percentify(start, bufferedEnd);\n            part.style.width = percentify(end - start, bufferedEnd);\n          } // remove unused buffered range elements\n\n\n          for (var _i = children.length; _i > buffered.length; _i--) {\n            this.el_.removeChild(children[_i - 1]);\n          }\n\n          children.length = buffered.length;\n        };\n\n        return LoadProgressBar;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('LoadProgressBar', LoadProgressBar);\n\n      exports['default'] = LoadProgressBar;\n      /***/\n    },\n    /* 71 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _formatTime = __webpack_require__(61);\n\n      var _formatTime2 = _interopRequireDefault(_formatTime);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file play-progress-bar.js\n       */\n\n      /**\n       * Shows play progress\n       *\n       * @extends Component\n       */\n\n\n      var PlayProgressBar = function (_Component) {\n        _inherits(PlayProgressBar, _Component);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function PlayProgressBar(player, options) {\n          _classCallCheck(this, PlayProgressBar);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          _this.updateDataAttr();\n\n          _this.on(player, 'timeupdate', _this.updateDataAttr);\n\n          player.ready(Fn.bind(_this, _this.updateDataAttr));\n\n          if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {\n            _this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;\n          }\n\n          if (_this.keepTooltipsInside) {\n            _this.addClass('vjs-keep-tooltips-inside');\n          }\n\n          return _this;\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        PlayProgressBar.prototype.createEl = function createEl() {\n          return _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-play-progress vjs-slider-bar',\n            innerHTML: '<span class=\"vjs-control-text\"><span>' + this.localize('Progress') + '</span>: 0%</span>'\n          });\n        };\n        /**\n         * Update the data-current-time attribute on the `PlayProgressBar`.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `timeupdate` event that caused this to run.\n         *\n         * @listens Player#timeupdate\n         */\n\n\n        PlayProgressBar.prototype.updateDataAttr = function updateDataAttr(event) {\n          var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n          this.el_.setAttribute('data-current-time', (0, _formatTime2['default'])(time, this.player_.duration()));\n        };\n\n        return PlayProgressBar;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('PlayProgressBar', PlayProgressBar);\n\n      exports['default'] = PlayProgressBar;\n      /***/\n    },\n    /* 72 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _formatTime = __webpack_require__(61);\n\n      var _formatTime2 = _interopRequireDefault(_formatTime);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file play-progress-bar.js\n       */\n\n      /**\n       * Shows play progress\n       *\n       * @extends Component\n       */\n\n\n      var TooltipProgressBar = function (_Component) {\n        _inherits(TooltipProgressBar, _Component);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function TooltipProgressBar(player, options) {\n          _classCallCheck(this, TooltipProgressBar);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          _this.updateDataAttr();\n\n          _this.on(player, 'timeupdate', _this.updateDataAttr);\n\n          player.ready(Fn.bind(_this, _this.updateDataAttr));\n          return _this;\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        TooltipProgressBar.prototype.createEl = function createEl() {\n          var el = _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-tooltip-progress-bar vjs-slider-bar',\n            innerHTML: '<div class=\"vjs-time-tooltip\"></div>\\n        <span class=\"vjs-control-text\"><span>' + this.localize('Progress') + '</span>: 0%</span>'\n          });\n\n          this.tooltip = el.querySelector('.vjs-time-tooltip');\n          return el;\n        };\n        /**\n         * Updatet the data-current-time attribute for TooltipProgressBar\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `timeupdate` event that caused this function to run.\n         *\n         * @listens Player#timeupdate\n         */\n\n\n        TooltipProgressBar.prototype.updateDataAttr = function updateDataAttr(event) {\n          var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n          var formattedTime = (0, _formatTime2['default'])(time, this.player_.duration());\n          this.el_.setAttribute('data-current-time', formattedTime);\n          this.tooltip.innerHTML = formattedTime;\n        };\n\n        return TooltipProgressBar;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('TooltipProgressBar', TooltipProgressBar);\n\n      exports['default'] = TooltipProgressBar;\n      /***/\n    },\n    /* 73 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _formatTime = __webpack_require__(61);\n\n      var _formatTime2 = _interopRequireDefault(_formatTime);\n\n      var _computedStyle = __webpack_require__(69);\n\n      var _computedStyle2 = _interopRequireDefault(_computedStyle);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file mouse-time-display.js\n       */\n\n      /**\n       * The Mouse Time Display component shows the time you will seek to\n       * when hovering over the progress bar\n       *\n       * @extends Component\n       */\n\n\n      var MouseTimeDisplay = function (_Component) {\n        _inherits(MouseTimeDisplay, _Component);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function MouseTimeDisplay(player, options) {\n          _classCallCheck(this, MouseTimeDisplay);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {\n            _this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;\n          }\n\n          if (_this.keepTooltipsInside) {\n            _this.tooltip = Dom.createEl('div', {\n              className: 'vjs-time-tooltip'\n            });\n\n            _this.el().appendChild(_this.tooltip);\n\n            _this.addClass('vjs-keep-tooltips-inside');\n          }\n\n          _this.update(0, 0);\n\n          player.on('ready', function () {\n            _this.on(player.controlBar.progressControl.el(), 'mousemove', Fn.throttle(Fn.bind(_this, _this.handleMouseMove), 25));\n          });\n          return _this;\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        MouseTimeDisplay.prototype.createEl = function createEl() {\n          return _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-mouse-display'\n          });\n        };\n        /**\n         * Handle the mouse move event on the `MouseTimeDisplay`.\n         *\n         * @param {EventTarget~Event} event\n         *        The `mousemove` event that caused this to event to run.\n         *\n         * @listen mousemove\n         */\n\n\n        MouseTimeDisplay.prototype.handleMouseMove = function handleMouseMove(event) {\n          var duration = this.player_.duration();\n          var newTime = this.calculateDistance(event) * duration;\n          var position = event.pageX - Dom.findElPosition(this.el().parentNode).left;\n          this.update(newTime, position);\n        };\n        /**\n         * Update the time and posistion of the `MouseTimeDisplay`.\n         *\n         * @param {number} newTime\n         *        Time to change the `MouseTimeDisplay` to.\n         *\n         * @param {nubmer} position\n         *        Postion from the left of the in pixels.\n         */\n\n\n        MouseTimeDisplay.prototype.update = function update(newTime, position) {\n          var time = (0, _formatTime2['default'])(newTime, this.player_.duration());\n          this.el().style.left = position + 'px';\n          this.el().setAttribute('data-current-time', time);\n\n          if (this.keepTooltipsInside) {\n            var clampedPosition = this.clampPosition_(position);\n            var difference = position - clampedPosition + 1;\n            var tooltipWidth = parseFloat((0, _computedStyle2['default'])(this.tooltip, 'width'));\n            var tooltipWidthHalf = tooltipWidth / 2;\n            this.tooltip.innerHTML = time;\n            this.tooltip.style.right = '-' + (tooltipWidthHalf - difference) + 'px';\n          }\n        };\n        /**\n         * Get the mouse pointers x coordinate in pixels.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `mousemove` event that was passed to this function by\n         *        {@link MouseTimeDisplay#handleMouseMove}\n         *\n         * @return {number}\n         *         THe x position in pixels of the mouse pointer.\n         */\n\n\n        MouseTimeDisplay.prototype.calculateDistance = function calculateDistance(event) {\n          return Dom.getPointerPosition(this.el().parentNode, event).x;\n        };\n        /**\n         * This takes in a horizontal position for the bar and returns a clamped position.\n         * Clamped position means that it will keep the position greater than half the width\n         * of the tooltip and smaller than the player width minus half the width o the tooltip.\n         * It will only clamp the position if `keepTooltipsInside` option is set.\n         *\n         * @param {number} position\n         *        The position the bar wants to be\n         *\n         * @return {number}\n         *         The (potentially) new clamped position.\n         *\n         * @private\n         */\n\n\n        MouseTimeDisplay.prototype.clampPosition_ = function clampPosition_(position) {\n          if (!this.keepTooltipsInside) {\n            return position;\n          }\n\n          var playerWidth = parseFloat((0, _computedStyle2['default'])(this.player().el(), 'width'));\n          var tooltipWidth = parseFloat((0, _computedStyle2['default'])(this.tooltip, 'width'));\n          var tooltipWidthHalf = tooltipWidth / 2;\n          var actualPosition = position;\n\n          if (position < tooltipWidthHalf) {\n            actualPosition = Math.ceil(tooltipWidthHalf);\n          } else if (position > playerWidth - tooltipWidthHalf) {\n            actualPosition = Math.floor(playerWidth - tooltipWidthHalf);\n          }\n\n          return actualPosition;\n        };\n\n        return MouseTimeDisplay;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('MouseTimeDisplay', MouseTimeDisplay);\n\n      exports['default'] = MouseTimeDisplay;\n      /***/\n    },\n    /* 74 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _button = __webpack_require__(56);\n\n      var _button2 = _interopRequireDefault(_button);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file fullscreen-toggle.js\n       */\n\n      /**\n       * Toggle fullscreen video\n       *\n       * @extends Button\n       */\n\n\n      var FullscreenToggle = function (_Button) {\n        _inherits(FullscreenToggle, _Button);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function FullscreenToggle(player, options) {\n          _classCallCheck(this, FullscreenToggle);\n\n          var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));\n\n          _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);\n\n          return _this;\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * Handles fullscreenchange on the player and change control text accordingly.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The {@link Player#fullscreenchange} event that caused this function to be\n         *        called.\n         *\n         * @listens Player#fullscreenchange\n         */\n\n\n        FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange(event) {\n          if (this.player_.isFullscreen()) {\n            this.controlText('Non-Fullscreen');\n          } else {\n            this.controlText('Fullscreen');\n          }\n        };\n        /**\n         * This gets called when an `FullscreenToggle` is \"clicked\". See\n         * {@link ClickableComponent} for more detailed information on what a click can be.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        FullscreenToggle.prototype.handleClick = function handleClick(event) {\n          if (!this.player_.isFullscreen()) {\n            this.player_.requestFullscreen();\n          } else {\n            this.player_.exitFullscreen();\n          }\n        };\n\n        return FullscreenToggle;\n      }(_button2['default']);\n      /**\n       * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n       *\n       * @type {string}\n       * @private\n       */\n\n\n      FullscreenToggle.prototype.controlText_ = 'Fullscreen';\n\n      _component2['default'].registerComponent('FullscreenToggle', FullscreenToggle);\n\n      exports['default'] = FullscreenToggle;\n      /***/\n    },\n    /* 75 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      __webpack_require__(76);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file volume-control.js\n       */\n      // Required children\n\n      /**\n       * The component for controlling the volume level\n       *\n       * @extends Component\n       */\n\n\n      var VolumeControl = function (_Component) {\n        _inherits(VolumeControl, _Component);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options={}]\n         *        The key/value store of player options.\n         */\n\n\n        function VolumeControl(player, options) {\n          _classCallCheck(this, VolumeControl); // hide volume controls when they're not supported by the current tech\n\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          if (player.tech_ && player.tech_.featuresVolumeControl === false) {\n            _this.addClass('vjs-hidden');\n          }\n\n          _this.on(player, 'loadstart', function () {\n            if (player.tech_.featuresVolumeControl === false) {\n              this.addClass('vjs-hidden');\n            } else {\n              this.removeClass('vjs-hidden');\n            }\n          });\n\n          return _this;\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        VolumeControl.prototype.createEl = function createEl() {\n          return _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-volume-control vjs-control'\n          });\n        };\n\n        return VolumeControl;\n      }(_component2['default']);\n      /**\n       * Default options for the `VolumeControl`\n       *\n       * @type {Object}\n       * @private\n       */\n\n\n      VolumeControl.prototype.options_ = {\n        children: ['volumeBar']\n      };\n\n      _component2['default'].registerComponent('VolumeControl', VolumeControl);\n\n      exports['default'] = VolumeControl;\n      /***/\n    },\n    /* 76 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _slider = __webpack_require__(68);\n\n      var _slider2 = _interopRequireDefault(_slider);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      __webpack_require__(77);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file volume-bar.js\n       */\n      // Required children\n\n      /**\n       * The bar that contains the volume level and can be clicked on to adjust the level\n       *\n       * @extends Slider\n       */\n\n\n      var VolumeBar = function (_Slider) {\n        _inherits(VolumeBar, _Slider);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function VolumeBar(player, options) {\n          _classCallCheck(this, VolumeBar);\n\n          var _this = _possibleConstructorReturn(this, _Slider.call(this, player, options));\n\n          _this.on(player, 'volumechange', _this.updateARIAAttributes);\n\n          player.ready(Fn.bind(_this, _this.updateARIAAttributes));\n          return _this;\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        VolumeBar.prototype.createEl = function createEl() {\n          return _Slider.prototype.createEl.call(this, 'div', {\n            className: 'vjs-volume-bar vjs-slider-bar'\n          }, {\n            'aria-label': 'volume level'\n          });\n        };\n        /**\n         * Handle movement events on the {@link VolumeMenuButton}.\n         *\n         * @param {EventTarget~Event} event\n         *        The event that caused this function to run.\n         *\n         * @listens mousemove\n         */\n\n\n        VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {\n          this.checkMuted();\n          this.player_.volume(this.calculateDistance(event));\n        };\n        /**\n         * If the player is muted unmute it.\n         */\n\n\n        VolumeBar.prototype.checkMuted = function checkMuted() {\n          if (this.player_.muted()) {\n            this.player_.muted(false);\n          }\n        };\n        /**\n         * Get percent of volume level\n         *\n         * @return {number}\n         *         Volume level percent as a decimal number.\n         */\n\n\n        VolumeBar.prototype.getPercent = function getPercent() {\n          if (this.player_.muted()) {\n            return 0;\n          }\n\n          return this.player_.volume();\n        };\n        /**\n         * Increase volume level for keyboard users\n         */\n\n\n        VolumeBar.prototype.stepForward = function stepForward() {\n          this.checkMuted();\n          this.player_.volume(this.player_.volume() + 0.1);\n        };\n        /**\n         * Decrease volume level for keyboard users\n         */\n\n\n        VolumeBar.prototype.stepBack = function stepBack() {\n          this.checkMuted();\n          this.player_.volume(this.player_.volume() - 0.1);\n        };\n        /**\n         * Update ARIA accessibility attributes\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `volumechange` event that caused this function to run.\n         *\n         * @listens Player#volumechange\n         */\n\n\n        VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes(event) {\n          // Current value of volume bar as a percentage\n          var volume = (this.player_.volume() * 100).toFixed(2);\n          this.el_.setAttribute('aria-valuenow', volume);\n          this.el_.setAttribute('aria-valuetext', volume + '%');\n        };\n\n        return VolumeBar;\n      }(_slider2['default']);\n      /**\n       * Default options for the `VolumeBar`\n       *\n       * @type {Object}\n       * @private\n       */\n\n\n      VolumeBar.prototype.options_ = {\n        children: ['volumeLevel'],\n        barName: 'volumeLevel'\n      };\n      /**\n       * Call the update event for this Slider when this event happens on the player.\n       *\n       * @type {string}\n       */\n\n      VolumeBar.prototype.playerEvent = 'volumechange';\n\n      _component2['default'].registerComponent('VolumeBar', VolumeBar);\n\n      exports['default'] = VolumeBar;\n      /***/\n    },\n    /* 77 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file volume-level.js\n       */\n\n      /**\n       * Shows volume level\n       *\n       * @extends Component\n       */\n\n\n      var VolumeLevel = function (_Component) {\n        _inherits(VolumeLevel, _Component);\n\n        function VolumeLevel() {\n          _classCallCheck(this, VolumeLevel);\n\n          return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        VolumeLevel.prototype.createEl = function createEl() {\n          return _Component.prototype.createEl.call(this, 'div', {\n            className: 'vjs-volume-level',\n            innerHTML: '<span class=\"vjs-control-text\"></span>'\n          });\n        };\n\n        return VolumeLevel;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('VolumeLevel', VolumeLevel);\n\n      exports['default'] = VolumeLevel;\n      /***/\n    },\n    /* 78 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _popup = __webpack_require__(79);\n\n      var _popup2 = _interopRequireDefault(_popup);\n\n      var _popupButton = __webpack_require__(80);\n\n      var _popupButton2 = _interopRequireDefault(_popupButton);\n\n      var _muteToggle = __webpack_require__(81);\n\n      var _muteToggle2 = _interopRequireDefault(_muteToggle);\n\n      var _volumeBar = __webpack_require__(76);\n\n      var _volumeBar2 = _interopRequireDefault(_volumeBar);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file volume-menu-button.js\n       */\n\n      /**\n       * Button for volume popup\n       *\n       * @extends PopupButton\n       */\n\n\n      var VolumeMenuButton = function (_PopupButton) {\n        _inherits(VolumeMenuButton, _PopupButton);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options={}]\n         *        The key/value store of player options.\n         */\n\n\n        function VolumeMenuButton(player) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          _classCallCheck(this, VolumeMenuButton); // Default to inline\n\n\n          if (options.inline === undefined) {\n            options.inline = true;\n          } // If the vertical option isn't passed at all, default to true.\n\n\n          if (options.vertical === undefined) {\n            // If an inline volumeMenuButton is used, we should default to using\n            // a horizontal slider for obvious reasons.\n            if (options.inline) {\n              options.vertical = false;\n            } else {\n              options.vertical = true;\n            }\n          } // The vertical option needs to be set on the volumeBar as well,\n          // since that will need to be passed along to the VolumeBar constructor\n\n\n          options.volumeBar = options.volumeBar || {};\n          options.volumeBar.vertical = !!options.vertical; // Same listeners as MuteToggle\n\n          var _this = _possibleConstructorReturn(this, _PopupButton.call(this, player, options));\n\n          _this.on(player, 'volumechange', _this.volumeUpdate);\n\n          _this.on(player, 'loadstart', _this.volumeUpdate); // hide mute toggle if the current tech doesn't support volume control\n\n\n          function updateVisibility() {\n            if (player.tech_ && player.tech_.featuresVolumeControl === false) {\n              this.addClass('vjs-hidden');\n            } else {\n              this.removeClass('vjs-hidden');\n            }\n          }\n\n          updateVisibility.call(_this);\n\n          _this.on(player, 'loadstart', updateVisibility);\n\n          _this.on(_this.volumeBar, ['slideractive', 'focus'], function () {\n            this.addClass('vjs-slider-active');\n          });\n\n          _this.on(_this.volumeBar, ['sliderinactive', 'blur'], function () {\n            this.removeClass('vjs-slider-active');\n          });\n\n          _this.on(_this.volumeBar, ['focus'], function () {\n            this.addClass('vjs-lock-showing');\n          });\n\n          _this.on(_this.volumeBar, ['blur'], function () {\n            this.removeClass('vjs-lock-showing');\n          });\n\n          return _this;\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        VolumeMenuButton.prototype.buildCSSClass = function buildCSSClass() {\n          var orientationClass = '';\n\n          if (this.options_.vertical) {\n            orientationClass = 'vjs-volume-menu-button-vertical';\n          } else {\n            orientationClass = 'vjs-volume-menu-button-horizontal';\n          }\n\n          return 'vjs-volume-menu-button ' + _PopupButton.prototype.buildCSSClass.call(this) + ' ' + orientationClass;\n        };\n        /**\n         * Create the VolumeMenuButton popup\n         */\n\n\n        VolumeMenuButton.prototype.createPopup = function createPopup() {\n          var popup = new _popup2['default'](this.player_, {\n            contentElType: 'div'\n          });\n          var vb = new _volumeBar2['default'](this.player_, this.options_.volumeBar);\n          popup.addChild(vb);\n          this.menuContent = popup;\n          this.volumeBar = vb;\n          this.attachVolumeBarEvents();\n          return popup;\n        };\n        /**\n         * This gets called when an `VolumeMenuButton` is \"clicked\". See\n         * {@link ClickableComponent} for more detailed information on what a click can be.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        VolumeMenuButton.prototype.handleClick = function handleClick(event) {\n          _muteToggle2['default'].prototype.handleClick.call(this);\n\n          _PopupButton.prototype.handleClick.call(this);\n        };\n        /**\n         * Add events listeners to the created `VolumeBar`.\n         */\n\n\n        VolumeMenuButton.prototype.attachVolumeBarEvents = function attachVolumeBarEvents() {\n          this.menuContent.on(['mousedown', 'touchdown'], Fn.bind(this, this.handleMouseDown));\n        };\n        /**\n         * Handle the `mousedown` and `touchdown` events on the `VolumeBar`\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `mousedown` or `touchdown` event that caused this to run.\n         *\n         * @listens mousedown\n         * @listens touchdown\n         */\n\n\n        VolumeMenuButton.prototype.handleMouseDown = function handleMouseDown(event) {\n          this.on(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));\n          this.on(this.el_.ownerDocument, ['mouseup', 'touchend'], this.handleMouseUp);\n        };\n        /**\n         * Handle the `mouseup` and `touchend` events on the `VolumeBar`\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `mouseup` or `touchend` event that caused this to run.\n         *\n         * @listens mouseup\n         * @listens touchend\n         */\n\n\n        VolumeMenuButton.prototype.handleMouseUp = function handleMouseUp(event) {\n          this.off(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));\n        };\n\n        return VolumeMenuButton;\n      }(_popupButton2['default']);\n      /**\n       * @borrows MuteToggle#update as VolumeMenuButton#volumeUpdate\n       */\n\n\n      VolumeMenuButton.prototype.volumeUpdate = _muteToggle2['default'].prototype.update;\n      /**\n       * The text that should display over the `VolumeMenuButton`s controls. Added for localization.\n       *\n       * @type {string}\n       * @private\n       */\n\n      VolumeMenuButton.prototype.controlText_ = 'Mute';\n\n      _component2['default'].registerComponent('VolumeMenuButton', VolumeMenuButton);\n\n      exports['default'] = VolumeMenuButton;\n      /***/\n    },\n    /* 79 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _events = __webpack_require__(8);\n\n      var Events = _interopRequireWildcard(_events);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file popup.js\n       */\n\n      /**\n       * The Popup component is used to build pop up controls.\n       *\n       * @extends Component\n       */\n\n\n      var Popup = function (_Component) {\n        _inherits(Popup, _Component);\n\n        function Popup() {\n          _classCallCheck(this, Popup);\n\n          return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n        }\n        /**\n         * Add a popup item to the popup\n         *\n         * @param {Object|string} component\n         *        Component or component type to add\n         *\n         */\n\n\n        Popup.prototype.addItem = function addItem(component) {\n          this.addChild(component);\n          component.on('click', Fn.bind(this, function () {\n            this.unlockShowing();\n          }));\n        };\n        /**\n         * Create the `PopupButton`s DOM element.\n         *\n         * @return {Element}\n         *         The element that gets created.\n         */\n\n\n        Popup.prototype.createEl = function createEl() {\n          var contentElType = this.options_.contentElType || 'ul';\n          this.contentEl_ = Dom.createEl(contentElType, {\n            className: 'vjs-menu-content'\n          });\n\n          var el = _Component.prototype.createEl.call(this, 'div', {\n            append: this.contentEl_,\n            className: 'vjs-menu'\n          });\n\n          el.appendChild(this.contentEl_); // Prevent clicks from bubbling up. Needed for Popup Buttons,\n          // where a click on the parent is significant\n\n          Events.on(el, 'click', function (event) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n          });\n          return el;\n        };\n\n        return Popup;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('Popup', Popup);\n\n      exports['default'] = Popup;\n      /***/\n    },\n    /* 80 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _clickableComponent = __webpack_require__(52);\n\n      var _clickableComponent2 = _interopRequireDefault(_clickableComponent);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file popup-button.js\n       */\n\n      /**\n       * A button class for use with {@link Popup} controls\n       *\n       * @extends ClickableComponent\n       */\n\n\n      var PopupButton = function (_ClickableComponent) {\n        _inherits(PopupButton, _ClickableComponent);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function PopupButton(player) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          _classCallCheck(this, PopupButton);\n\n          var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));\n\n          _this.update();\n\n          return _this;\n        }\n        /**\n         * Update the `Popup` that this button is attached to.\n         */\n\n\n        PopupButton.prototype.update = function update() {\n          var popup = this.createPopup();\n\n          if (this.popup) {\n            this.removeChild(this.popup);\n          }\n\n          this.popup = popup;\n          this.addChild(popup);\n\n          if (this.items && this.items.length === 0) {\n            this.hide();\n          } else if (this.items && this.items.length > 1) {\n            this.show();\n          }\n        };\n        /**\n         * Create a `Popup`. - Override with specific functionality for component\n         *\n         * @abstract\n         */\n\n\n        PopupButton.prototype.createPopup = function createPopup() {};\n        /**\n         * Create the `PopupButton`s DOM element.\n         *\n         * @return {Element}\n         *         The element that gets created.\n         */\n\n\n        PopupButton.prototype.createEl = function createEl() {\n          return _ClickableComponent.prototype.createEl.call(this, 'div', {\n            className: this.buildCSSClass()\n          });\n        };\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        PopupButton.prototype.buildCSSClass = function buildCSSClass() {\n          var menuButtonClass = 'vjs-menu-button'; // If the inline option is passed, we want to use different styles altogether.\n\n          if (this.options_.inline === true) {\n            menuButtonClass += '-inline';\n          } else {\n            menuButtonClass += '-popup';\n          }\n\n          return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);\n        };\n\n        return PopupButton;\n      }(_clickableComponent2['default']);\n\n      _component2['default'].registerComponent('PopupButton', PopupButton);\n\n      exports['default'] = PopupButton;\n      /***/\n    },\n    /* 81 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _button = __webpack_require__(56);\n\n      var _button2 = _interopRequireDefault(_button);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file mute-toggle.js\n       */\n\n      /**\n       * A button component for muting the audio.\n       *\n       * @extends Button\n       */\n\n\n      var MuteToggle = function (_Button) {\n        _inherits(MuteToggle, _Button);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function MuteToggle(player, options) {\n          _classCallCheck(this, MuteToggle);\n\n          var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));\n\n          _this.on(player, 'volumechange', _this.update); // hide mute toggle if the current tech doesn't support volume control\n\n\n          if (player.tech_ && player.tech_.featuresVolumeControl === false) {\n            _this.addClass('vjs-hidden');\n          }\n\n          _this.on(player, 'loadstart', function () {\n            // We need to update the button to account for a default muted state.\n            this.update();\n\n            if (player.tech_.featuresVolumeControl === false) {\n              this.addClass('vjs-hidden');\n            } else {\n              this.removeClass('vjs-hidden');\n            }\n          });\n\n          return _this;\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        MuteToggle.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * This gets called when an `MuteToggle` is \"clicked\". See\n         * {@link ClickableComponent} for more detailed information on what a click can be.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        MuteToggle.prototype.handleClick = function handleClick(event) {\n          this.player_.muted(this.player_.muted() ? false : true);\n        };\n        /**\n         * Update the state of volume.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The {@link Player#loadstart} event if this function was called through an\n         *        event.\n         *\n         * @listens Player#loadstart\n         */\n\n\n        MuteToggle.prototype.update = function update(event) {\n          var vol = this.player_.volume();\n          var level = 3;\n\n          if (vol === 0 || this.player_.muted()) {\n            level = 0;\n          } else if (vol < 0.33) {\n            level = 1;\n          } else if (vol < 0.67) {\n            level = 2;\n          } // Don't rewrite the button text if the actual text doesn't change.\n          // This causes unnecessary and confusing information for screen reader users.\n          // This check is needed because this function gets called every time the volume level is changed.\n\n\n          var toMute = this.player_.muted() ? 'Unmute' : 'Mute';\n\n          if (this.controlText() !== toMute) {\n            this.controlText(toMute);\n          } // TODO improve muted icon classes\n\n\n          for (var i = 0; i < 4; i++) {\n            Dom.removeElClass(this.el_, 'vjs-vol-' + i);\n          }\n\n          Dom.addElClass(this.el_, 'vjs-vol-' + level);\n        };\n\n        return MuteToggle;\n      }(_button2['default']);\n      /**\n       * The text that should display over the `MuteToggle`s controls. Added for localization.\n       *\n       * @type {string}\n       * @private\n       */\n\n\n      MuteToggle.prototype.controlText_ = 'Mute';\n\n      _component2['default'].registerComponent('MuteToggle', MuteToggle);\n\n      exports['default'] = MuteToggle;\n      /***/\n    },\n    /* 82 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _textTrackButton = __webpack_require__(83);\n\n      var _textTrackButton2 = _interopRequireDefault(_textTrackButton);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _chaptersTrackMenuItem = __webpack_require__(90);\n\n      var _chaptersTrackMenuItem2 = _interopRequireDefault(_chaptersTrackMenuItem);\n\n      var _toTitleCase = __webpack_require__(18);\n\n      var _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file chapters-button.js\n       */\n\n      /**\n       * The button component for toggling and selecting chapters\n       * Chapters act much differently than other text tracks\n       * Cues are navigation vs. other tracks of alternative languages\n       *\n       * @extends TextTrackButton\n       */\n\n\n      var ChaptersButton = function (_TextTrackButton) {\n        _inherits(ChaptersButton, _TextTrackButton);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         *\n         * @param {Component~ReadyCallback} [ready]\n         *        The function to call when this function is ready.\n         */\n\n\n        function ChaptersButton(player, options, ready) {\n          _classCallCheck(this, ChaptersButton);\n\n          var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n\n          _this.el_.setAttribute('aria-label', 'Chapters Menu');\n\n          return _this;\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * Update the menu based on the current state of its items.\n         *\n         * @param {EventTarget~Event} [event]\n         *        An event that triggered this function to run.\n         *\n         * @listens TextTrackList#addtrack\n         * @listens TextTrackList#removetrack\n         * @listens TextTrackList#change\n         */\n\n\n        ChaptersButton.prototype.update = function update(event) {\n          if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {\n            this.setTrack(this.findChaptersTrack());\n          }\n\n          _TextTrackButton.prototype.update.call(this);\n        };\n        /**\n         * Set the currently selected track for the chapters button.\n         *\n         * @param {TextTrack} track\n         *        The new track to select. Nothing will change if this is the currently selected\n         *        track.\n         */\n\n\n        ChaptersButton.prototype.setTrack = function setTrack(track) {\n          if (this.track_ === track) {\n            return;\n          }\n\n          if (!this.updateHandler_) {\n            this.updateHandler_ = this.update.bind(this);\n          } // here this.track_ refers to the old track instance\n\n\n          if (this.track_) {\n            var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n\n            if (remoteTextTrackEl) {\n              remoteTextTrackEl.removeEventListener('load', this.updateHandler_);\n            }\n\n            this.track_ = null;\n          }\n\n          this.track_ = track; // here this.track_ refers to the new track instance\n\n          if (this.track_) {\n            this.track_.mode = 'hidden';\n\n            var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n\n            if (_remoteTextTrackEl) {\n              _remoteTextTrackEl.addEventListener('load', this.updateHandler_);\n            }\n          }\n        };\n        /**\n         * Find the track object that is currently in use by this ChaptersButton\n         *\n         * @return {TextTrack|undefined}\n         *         The current track or undefined if none was found.\n         */\n\n\n        ChaptersButton.prototype.findChaptersTrack = function findChaptersTrack() {\n          var tracks = this.player_.textTracks() || [];\n\n          for (var i = tracks.length - 1; i >= 0; i--) {\n            // We will always choose the last track as our chaptersTrack\n            var track = tracks[i];\n\n            if (track.kind === this.kind_) {\n              return track;\n            }\n          }\n        };\n        /**\n         * Get the caption for the ChaptersButton based on the track label. This will also\n         * use the current tracks localized kind as a fallback if a label does not exist.\n         *\n         * @return {string}\n         *         The tracks current label or the localized track kind.\n         */\n\n\n        ChaptersButton.prototype.getMenuCaption = function getMenuCaption() {\n          if (this.track_ && this.track_.label) {\n            return this.track_.label;\n          }\n\n          return this.localize((0, _toTitleCase2['default'])(this.kind_));\n        };\n        /**\n         * Create menu from chapter track\n         *\n         * @return {Menu}\n         *         New menu for the chapter buttons\n         */\n\n\n        ChaptersButton.prototype.createMenu = function createMenu() {\n          this.options_.title = this.getMenuCaption();\n          return _TextTrackButton.prototype.createMenu.call(this);\n        };\n        /**\n         * Create a menu item for each text track\n         *\n         * @return {TextTrackMenuItem[]}\n         *         Array of menu items\n         */\n\n\n        ChaptersButton.prototype.createItems = function createItems() {\n          var items = [];\n\n          if (!this.track_) {\n            return items;\n          }\n\n          var cues = this.track_.cues;\n\n          if (!cues) {\n            return items;\n          }\n\n          for (var i = 0, l = cues.length; i < l; i++) {\n            var cue = cues[i];\n            var mi = new _chaptersTrackMenuItem2['default'](this.player_, {\n              track: this.track_,\n              cue: cue\n            });\n            items.push(mi);\n          }\n\n          return items;\n        };\n\n        return ChaptersButton;\n      }(_textTrackButton2['default']);\n      /**\n       * `kind` of TextTrack to look for to associate it with this menu.\n       *\n       * @type {string}\n       * @private\n       */\n\n\n      ChaptersButton.prototype.kind_ = 'chapters';\n      /**\n       * The text that should display over the `ChaptersButton`s controls. Added for localization.\n       *\n       * @type {string}\n       * @private\n       */\n\n      ChaptersButton.prototype.controlText_ = 'Chapters';\n\n      _component2['default'].registerComponent('ChaptersButton', ChaptersButton);\n\n      exports['default'] = ChaptersButton;\n      /***/\n    },\n    /* 83 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _trackButton = __webpack_require__(84);\n\n      var _trackButton2 = _interopRequireDefault(_trackButton);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _textTrackMenuItem = __webpack_require__(87);\n\n      var _textTrackMenuItem2 = _interopRequireDefault(_textTrackMenuItem);\n\n      var _offTextTrackMenuItem = __webpack_require__(89);\n\n      var _offTextTrackMenuItem2 = _interopRequireDefault(_offTextTrackMenuItem);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file text-track-button.js\n       */\n\n      /**\n       * The base class for buttons that toggle specific text track types (e.g. subtitles)\n       *\n       * @extends MenuButton\n       */\n\n\n      var TextTrackButton = function (_TrackButton) {\n        _inherits(TextTrackButton, _TrackButton);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options={}]\n         *        The key/value store of player options.\n         */\n\n\n        function TextTrackButton(player) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          _classCallCheck(this, TextTrackButton);\n\n          options.tracks = player.textTracks();\n          return _possibleConstructorReturn(this, _TrackButton.call(this, player, options));\n        }\n        /**\n         * Create a menu item for each text track\n         *\n         * @param {TextTrackMenuItem[]} [items=[]]\n         *        Existing array of items to use during creation\n         *\n         * @return {TextTrackMenuItem[]}\n         *         Array of menu items that were created\n         */\n\n\n        TextTrackButton.prototype.createItems = function createItems() {\n          var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : []; // Add an OFF menu item to turn all tracks off\n\n          items.push(new _offTextTrackMenuItem2['default'](this.player_, {\n            kind: this.kind_\n          }));\n          var tracks = this.player_.textTracks();\n\n          if (!tracks) {\n            return items;\n          }\n\n          for (var i = 0; i < tracks.length; i++) {\n            var track = tracks[i]; // only add tracks that are of the appropriate kind and have a label\n\n            if (track.kind === this.kind_) {\n              items.push(new _textTrackMenuItem2['default'](this.player_, {\n                track: track,\n                // MenuItem is selectable\n                selectable: true\n              }));\n            }\n          }\n\n          return items;\n        };\n\n        return TextTrackButton;\n      }(_trackButton2['default']);\n\n      _component2['default'].registerComponent('TextTrackButton', TextTrackButton);\n\n      exports['default'] = TextTrackButton;\n      /***/\n    },\n    /* 84 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _menuButton = __webpack_require__(85);\n\n      var _menuButton2 = _interopRequireDefault(_menuButton);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file track-button.js\n       */\n\n      /**\n       * The base class for buttons that toggle specific  track types (e.g. subtitles).\n       *\n       * @extends MenuButton\n       */\n\n\n      var TrackButton = function (_MenuButton) {\n        _inherits(TrackButton, _MenuButton);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function TrackButton(player, options) {\n          _classCallCheck(this, TrackButton);\n\n          var tracks = options.tracks;\n\n          var _this = _possibleConstructorReturn(this, _MenuButton.call(this, player, options));\n\n          if (_this.items.length <= 1) {\n            _this.hide();\n          }\n\n          if (!tracks) {\n            return _possibleConstructorReturn(_this);\n          }\n\n          var updateHandler = Fn.bind(_this, _this.update);\n          tracks.addEventListener('removetrack', updateHandler);\n          tracks.addEventListener('addtrack', updateHandler);\n\n          _this.player_.on('dispose', function () {\n            tracks.removeEventListener('removetrack', updateHandler);\n            tracks.removeEventListener('addtrack', updateHandler);\n          });\n\n          return _this;\n        }\n\n        return TrackButton;\n      }(_menuButton2['default']);\n\n      _component2['default'].registerComponent('TrackButton', TrackButton);\n\n      exports['default'] = TrackButton;\n      /***/\n    },\n    /* 85 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _clickableComponent = __webpack_require__(52);\n\n      var _clickableComponent2 = _interopRequireDefault(_clickableComponent);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _menu = __webpack_require__(86);\n\n      var _menu2 = _interopRequireDefault(_menu);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _toTitleCase = __webpack_require__(18);\n\n      var _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file menu-button.js\n       */\n\n      /**\n       * A `MenuButton` class for any popup {@link Menu}.\n       *\n       * @extends ClickableComponent\n       */\n\n\n      var MenuButton = function (_ClickableComponent) {\n        _inherits(MenuButton, _ClickableComponent);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options={}]\n         *        The key/value store of player options.\n         */\n\n\n        function MenuButton(player) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          _classCallCheck(this, MenuButton);\n\n          var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));\n\n          _this.update();\n\n          _this.enabled_ = true;\n\n          _this.el_.setAttribute('aria-haspopup', 'true');\n\n          _this.el_.setAttribute('role', 'menuitem');\n\n          _this.on('keydown', _this.handleSubmenuKeyPress);\n\n          return _this;\n        }\n        /**\n         * Update the menu based on the current state of its items.\n         */\n\n\n        MenuButton.prototype.update = function update() {\n          var menu = this.createMenu();\n\n          if (this.menu) {\n            this.removeChild(this.menu);\n          }\n\n          this.menu = menu;\n          this.addChild(menu);\n          /**\n           * Track the state of the menu button\n           *\n           * @type {Boolean}\n           * @private\n           */\n\n          this.buttonPressed_ = false;\n          this.el_.setAttribute('aria-expanded', 'false');\n\n          if (this.items && this.items.length === 0) {\n            this.hide();\n          } else if (this.items && this.items.length > 1) {\n            this.show();\n          }\n        };\n        /**\n         * Create the menu and add all items to it.\n         *\n         * @return {Menu}\n         *         The constructed menu\n         */\n\n\n        MenuButton.prototype.createMenu = function createMenu() {\n          var menu = new _menu2['default'](this.player_); // Add a title list item to the top\n\n          if (this.options_.title) {\n            var title = Dom.createEl('li', {\n              className: 'vjs-menu-title',\n              innerHTML: (0, _toTitleCase2['default'])(this.options_.title),\n              tabIndex: -1\n            });\n            menu.children_.unshift(title);\n            Dom.insertElFirst(title, menu.contentEl());\n          }\n\n          this.items = this.createItems();\n\n          if (this.items) {\n            // Add menu items to the menu\n            for (var i = 0; i < this.items.length; i++) {\n              menu.addItem(this.items[i]);\n            }\n          }\n\n          return menu;\n        };\n        /**\n         * Create the list of menu items. Specific to each subclass.\n         *\n         * @abstract\n         */\n\n\n        MenuButton.prototype.createItems = function createItems() {};\n        /**\n         * Create the `MenuButtons`s DOM element.\n         *\n         * @return {Element}\n         *         The element that gets created.\n         */\n\n\n        MenuButton.prototype.createEl = function createEl() {\n          return _ClickableComponent.prototype.createEl.call(this, 'div', {\n            className: this.buildCSSClass()\n          });\n        };\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        MenuButton.prototype.buildCSSClass = function buildCSSClass() {\n          var menuButtonClass = 'vjs-menu-button'; // If the inline option is passed, we want to use different styles altogether.\n\n          if (this.options_.inline === true) {\n            menuButtonClass += '-inline';\n          } else {\n            menuButtonClass += '-popup';\n          }\n\n          return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * Handle a click on a `MenuButton`.\n         * See {@link ClickableComponent#handleClick} for instances where this is called.\n         *\n         * @param {EventTarget~Event} event\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        MenuButton.prototype.handleClick = function handleClick(event) {\n          // When you click the button it adds focus, which will show the menu.\n          // So we'll remove focus when the mouse leaves the button. Focus is needed\n          // for tab navigation.\n          this.one(this.menu.contentEl(), 'mouseleave', Fn.bind(this, function (e) {\n            this.unpressButton();\n            this.el_.blur();\n          }));\n\n          if (this.buttonPressed_) {\n            this.unpressButton();\n          } else {\n            this.pressButton();\n          }\n        };\n        /**\n         * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See\n         * {@link ClickableComponent#handleKeyPress} for instances where this is called.\n         *\n         * @param {EventTarget~Event} event\n         *        The `keydown` event that caused this function to be called.\n         *\n         * @listens keydown\n         */\n\n\n        MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {\n          // Escape (27) key or Tab (9) key unpress the 'button'\n          if (event.which === 27 || event.which === 9) {\n            if (this.buttonPressed_) {\n              this.unpressButton();\n            } // Don't preventDefault for Tab key - we still want to lose focus\n\n\n            if (event.which !== 9) {\n              event.preventDefault();\n            } // Up (38) key or Down (40) key press the 'button'\n\n          } else if (event.which === 38 || event.which === 40) {\n            if (!this.buttonPressed_) {\n              this.pressButton();\n              event.preventDefault();\n            }\n          } else {\n            _ClickableComponent.prototype.handleKeyPress.call(this, event);\n          }\n        };\n        /**\n         * Handle a `keydown` event on a sub-menu. The listener for this is added in\n         * the constructor.\n         *\n         * @param {EventTarget~Event} event\n         *        Key press event\n         *\n         * @listens keydown\n         */\n\n\n        MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {\n          // Escape (27) key or Tab (9) key unpress the 'button'\n          if (event.which === 27 || event.which === 9) {\n            if (this.buttonPressed_) {\n              this.unpressButton();\n            } // Don't preventDefault for Tab key - we still want to lose focus\n\n\n            if (event.which !== 9) {\n              event.preventDefault();\n            }\n          }\n        };\n        /**\n         * Put the current `MenuButton` into a pressed state.\n         */\n\n\n        MenuButton.prototype.pressButton = function pressButton() {\n          if (this.enabled_) {\n            this.buttonPressed_ = true;\n            this.menu.lockShowing();\n            this.el_.setAttribute('aria-expanded', 'true'); // set the focus into the submenu\n\n            this.menu.focus();\n          }\n        };\n        /**\n         * Take the current `MenuButton` out of a pressed state.\n         */\n\n\n        MenuButton.prototype.unpressButton = function unpressButton() {\n          if (this.enabled_) {\n            this.buttonPressed_ = false;\n            this.menu.unlockShowing();\n            this.el_.setAttribute('aria-expanded', 'false'); // Set focus back to this menu button\n\n            this.el_.focus();\n          }\n        };\n        /**\n         * Disable the `MenuButton`. Don't allow it to be clicked.\n         *\n         * @return {MenuButton}\n         *         Returns itself; method can be chained.\n         */\n\n\n        MenuButton.prototype.disable = function disable() {\n          // Unpress, but don't force focus on this button\n          this.buttonPressed_ = false;\n          this.menu.unlockShowing();\n          this.el_.setAttribute('aria-expanded', 'false');\n          this.enabled_ = false;\n          return _ClickableComponent.prototype.disable.call(this);\n        };\n        /**\n         * Enable the `MenuButton`. Allow it to be clicked.\n         *\n         * @return {MenuButton}\n         *         Returns itself; method can be chained.\n         */\n\n\n        MenuButton.prototype.enable = function enable() {\n          this.enabled_ = true;\n          return _ClickableComponent.prototype.enable.call(this);\n        };\n\n        return MenuButton;\n      }(_clickableComponent2['default']);\n\n      _component2['default'].registerComponent('MenuButton', MenuButton);\n\n      exports['default'] = MenuButton;\n      /***/\n    },\n    /* 86 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _events = __webpack_require__(8);\n\n      var Events = _interopRequireWildcard(_events);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file menu.js\n       */\n\n      /**\n       * The Menu component is used to build popup menus, including subtitle and\n       * captions selection menus.\n       *\n       * @extends Component\n       */\n\n\n      var Menu = function (_Component) {\n        _inherits(Menu, _Component);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {Player} player\n         *        the player that this component should attach to\n         *\n         * @param {Object} [options]\n         *        Object of option names and values\n         *\n         */\n\n\n        function Menu(player, options) {\n          _classCallCheck(this, Menu);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          _this.focusedChild_ = -1;\n\n          _this.on('keydown', _this.handleKeyPress);\n\n          return _this;\n        }\n        /**\n         * Add a {@link MenuItem} to the menu.\n         *\n         * @param {Object|string} component\n         *        The name or instance of the `MenuItem` to add.\n         *\n         */\n\n\n        Menu.prototype.addItem = function addItem(component) {\n          this.addChild(component);\n          component.on('click', Fn.bind(this, function (event) {\n            this.unlockShowing(); // TODO: Need to set keyboard focus back to the menuButton\n          }));\n        };\n        /**\n         * Create the `Menu`s DOM element.\n         *\n         * @return {Element}\n         *         the element that was created\n         */\n\n\n        Menu.prototype.createEl = function createEl() {\n          var contentElType = this.options_.contentElType || 'ul';\n          this.contentEl_ = Dom.createEl(contentElType, {\n            className: 'vjs-menu-content'\n          });\n          this.contentEl_.setAttribute('role', 'menu');\n\n          var el = _Component.prototype.createEl.call(this, 'div', {\n            append: this.contentEl_,\n            className: 'vjs-menu'\n          });\n\n          el.setAttribute('role', 'presentation');\n          el.appendChild(this.contentEl_); // Prevent clicks from bubbling up. Needed for Menu Buttons,\n          // where a click on the parent is significant\n\n          Events.on(el, 'click', function (event) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n          });\n          return el;\n        };\n        /**\n         * Handle a `keydown` event on this menu. This listener is added in the constructor.\n         *\n         * @param {EventTarget~Event} event\n         *        A `keydown` event that happened on the menu.\n         *\n         * @listens keydown\n         */\n\n\n        Menu.prototype.handleKeyPress = function handleKeyPress(event) {\n          // Left and Down Arrows\n          if (event.which === 37 || event.which === 40) {\n            event.preventDefault();\n            this.stepForward(); // Up and Right Arrows\n          } else if (event.which === 38 || event.which === 39) {\n            event.preventDefault();\n            this.stepBack();\n          }\n        };\n        /**\n         * Move to next (lower) menu item for keyboard users.\n         */\n\n\n        Menu.prototype.stepForward = function stepForward() {\n          var stepChild = 0;\n\n          if (this.focusedChild_ !== undefined) {\n            stepChild = this.focusedChild_ + 1;\n          }\n\n          this.focus(stepChild);\n        };\n        /**\n         * Move to previous (higher) menu item for keyboard users.\n         */\n\n\n        Menu.prototype.stepBack = function stepBack() {\n          var stepChild = 0;\n\n          if (this.focusedChild_ !== undefined) {\n            stepChild = this.focusedChild_ - 1;\n          }\n\n          this.focus(stepChild);\n        };\n        /**\n         * Set focus on a {@link MenuItem} in the `Menu`.\n         *\n         * @param {Object|string} [item=0]\n         *        Index of child item set focus on.\n         */\n\n\n        Menu.prototype.focus = function focus() {\n          var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n          var children = this.children().slice();\n          var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);\n\n          if (haveTitle) {\n            children.shift();\n          }\n\n          if (children.length > 0) {\n            if (item < 0) {\n              item = 0;\n            } else if (item >= children.length) {\n              item = children.length - 1;\n            }\n\n            this.focusedChild_ = item;\n            children[item].el_.focus();\n          }\n        };\n\n        return Menu;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('Menu', Menu);\n\n      exports['default'] = Menu;\n      /***/\n    },\n    /* 87 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      var _menuItem = __webpack_require__(88);\n\n      var _menuItem2 = _interopRequireDefault(_menuItem);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file text-track-menu-item.js\n       */\n\n      /**\n       * The specific menu item type for selecting a language within a text track kind\n       *\n       * @extends MenuItem\n       */\n\n\n      var TextTrackMenuItem = function (_MenuItem) {\n        _inherits(TextTrackMenuItem, _MenuItem);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function TextTrackMenuItem(player, options) {\n          _classCallCheck(this, TextTrackMenuItem);\n\n          var track = options.track;\n          var tracks = player.textTracks(); // Modify options for parent MenuItem class's init.\n\n          options.label = track.label || track.language || 'Unknown';\n          options.selected = track['default'] || track.mode === 'showing';\n\n          var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n          _this.track = track;\n\n          if (tracks) {\n            (function () {\n              var changeHandler = Fn.bind(_this, _this.handleTracksChange);\n              tracks.addEventListener('change', changeHandler);\n\n              _this.on('dispose', function () {\n                tracks.removeEventListener('change', changeHandler);\n              });\n            })();\n          } // iOS7 doesn't dispatch change events to TextTrackLists when an\n          // associated track's mode changes. Without something like\n          // Object.observe() (also not present on iOS7), it's not\n          // possible to detect changes to the mode attribute and polyfill\n          // the change event. As a poor substitute, we manually dispatch\n          // change events whenever the controls modify the mode.\n\n\n          if (tracks && tracks.onchange === undefined) {\n            (function () {\n              var event = void 0;\n\n              _this.on(['tap', 'click'], function () {\n                if (_typeof(_window2['default'].Event) !== 'object') {\n                  // Android 2.3 throws an Illegal Constructor error for window.Event\n                  try {\n                    event = new _window2['default'].Event('change');\n                  } catch (err) {// continue regardless of error\n                  }\n                }\n\n                if (!event) {\n                  event = _document2['default'].createEvent('Event');\n                  event.initEvent('change', true, true);\n                }\n\n                tracks.dispatchEvent(event);\n              });\n            })();\n          }\n\n          return _this;\n        }\n        /**\n         * This gets called when an `TextTrackMenuItem` is \"clicked\". See\n         * {@link ClickableComponent} for more detailed information on what a click can be.\n         *\n         * @param {EventTarget~Event} event\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        TextTrackMenuItem.prototype.handleClick = function handleClick(event) {\n          var kind = this.track.kind;\n          var tracks = this.player_.textTracks();\n\n          _MenuItem.prototype.handleClick.call(this, event);\n\n          if (!tracks) {\n            return;\n          }\n\n          for (var i = 0; i < tracks.length; i++) {\n            var track = tracks[i];\n\n            if (track.kind !== kind) {\n              continue;\n            }\n\n            if (track === this.track) {\n              track.mode = 'showing';\n            } else {\n              track.mode = 'disabled';\n            }\n          }\n        };\n        /**\n         * Handle text track list change\n         *\n         * @param {EventTarget~Event} event\n         *        The `change` event that caused this function to be called.\n         *\n         * @listens TextTrackList#change\n         */\n\n\n        TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {\n          this.selected(this.track.mode === 'showing');\n        };\n\n        return TextTrackMenuItem;\n      }(_menuItem2['default']);\n\n      _component2['default'].registerComponent('TextTrackMenuItem', TextTrackMenuItem);\n\n      exports['default'] = TextTrackMenuItem;\n      /***/\n    },\n    /* 88 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _clickableComponent = __webpack_require__(52);\n\n      var _clickableComponent2 = _interopRequireDefault(_clickableComponent);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _obj = __webpack_require__(13);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file menu-item.js\n       */\n\n      /**\n       * The component for a menu item. `<li>`\n       *\n       * @extends ClickableComponent\n       */\n\n\n      var MenuItem = function (_ClickableComponent) {\n        _inherits(MenuItem, _ClickableComponent);\n        /**\n         * Creates an instance of the this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options={}]\n         *        The key/value store of player options.\n         *\n         */\n\n\n        function MenuItem(player, options) {\n          _classCallCheck(this, MenuItem);\n\n          var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));\n\n          _this.selectable = options.selectable;\n\n          _this.selected(options.selected);\n\n          if (_this.selectable) {\n            // TODO: May need to be either menuitemcheckbox or menuitemradio,\n            //       and may need logical grouping of menu items.\n            _this.el_.setAttribute('role', 'menuitemcheckbox');\n          } else {\n            _this.el_.setAttribute('role', 'menuitem');\n          }\n\n          return _this;\n        }\n        /**\n         * Create the `MenuItem's DOM element\n         *\n         * @param {string} [type=li]\n         *        Element's node type, not actually used, always set to `li`.\n         *\n         * @param {Object} [props={}]\n         *        An object of properties that should be set on the element\n         *\n         * @param {Object} [attrs={}]\n         *        An object of attributes that should be set on the element\n         *\n         * @return {Element}\n         *         The element that gets created.\n         */\n\n\n        MenuItem.prototype.createEl = function createEl(type, props, attrs) {\n          return _ClickableComponent.prototype.createEl.call(this, 'li', (0, _obj.assign)({\n            className: 'vjs-menu-item',\n            innerHTML: this.localize(this.options_.label),\n            tabIndex: -1\n          }, props), attrs);\n        };\n        /**\n         * Any click on a `MenuItem` puts int into the selected state.\n         * See {@link ClickableComponent#handleClick} for instances where this is called.\n         *\n         * @param {EventTarget~Event} event\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        MenuItem.prototype.handleClick = function handleClick(event) {\n          this.selected(true);\n        };\n        /**\n         * Set the state for this menu item as selected or not.\n         *\n         * @param {boolean} selected\n         *        if the menu item is selected or not\n         */\n\n\n        MenuItem.prototype.selected = function selected(_selected) {\n          if (this.selectable) {\n            if (_selected) {\n              this.addClass('vjs-selected');\n              this.el_.setAttribute('aria-checked', 'true'); // aria-checked isn't fully supported by browsers/screen readers,\n              // so indicate selected state to screen reader in the control text.\n\n              this.controlText(', selected');\n            } else {\n              this.removeClass('vjs-selected');\n              this.el_.setAttribute('aria-checked', 'false'); // Indicate un-selected state to screen reader\n              // Note that a space clears out the selected state text\n\n              this.controlText(' ');\n            }\n          }\n        };\n\n        return MenuItem;\n      }(_clickableComponent2['default']);\n\n      _component2['default'].registerComponent('MenuItem', MenuItem);\n\n      exports['default'] = MenuItem;\n      /***/\n    },\n    /* 89 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _textTrackMenuItem = __webpack_require__(87);\n\n      var _textTrackMenuItem2 = _interopRequireDefault(_textTrackMenuItem);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file off-text-track-menu-item.js\n       */\n\n      /**\n       * A special menu item for turning of a specific type of text track\n       *\n       * @extends TextTrackMenuItem\n       */\n\n\n      var OffTextTrackMenuItem = function (_TextTrackMenuItem) {\n        _inherits(OffTextTrackMenuItem, _TextTrackMenuItem);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function OffTextTrackMenuItem(player, options) {\n          _classCallCheck(this, OffTextTrackMenuItem); // Create pseudo track info\n          // Requires options['kind']\n\n\n          options.track = {\n            player: player,\n            kind: options.kind,\n            label: options.kind + ' off',\n            'default': false,\n            mode: 'disabled'\n          }; // MenuItem is selectable\n\n          options.selectable = true;\n\n          var _this = _possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));\n\n          _this.selected(true);\n\n          return _this;\n        }\n        /**\n         * Handle text track change\n         *\n         * @param {EventTarget~Event} event\n         *        The event that caused this function to run\n         */\n\n\n        OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {\n          var tracks = this.player().textTracks();\n          var selected = true;\n\n          for (var i = 0, l = tracks.length; i < l; i++) {\n            var track = tracks[i];\n\n            if (track.kind === this.track.kind && track.mode === 'showing') {\n              selected = false;\n              break;\n            }\n          }\n\n          this.selected(selected);\n        };\n\n        return OffTextTrackMenuItem;\n      }(_textTrackMenuItem2['default']);\n\n      _component2['default'].registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);\n\n      exports['default'] = OffTextTrackMenuItem;\n      /***/\n    },\n    /* 90 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _menuItem = __webpack_require__(88);\n\n      var _menuItem2 = _interopRequireDefault(_menuItem);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file chapters-track-menu-item.js\n       */\n\n      /**\n       * The chapter track menu item\n       *\n       * @extends MenuItem\n       */\n\n\n      var ChaptersTrackMenuItem = function (_MenuItem) {\n        _inherits(ChaptersTrackMenuItem, _MenuItem);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function ChaptersTrackMenuItem(player, options) {\n          _classCallCheck(this, ChaptersTrackMenuItem);\n\n          var track = options.track;\n          var cue = options.cue;\n          var currentTime = player.currentTime(); // Modify options for parent MenuItem class's init.\n\n          options.selectable = true;\n          options.label = cue.text;\n          options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;\n\n          var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n          _this.track = track;\n          _this.cue = cue;\n          track.addEventListener('cuechange', Fn.bind(_this, _this.update));\n          return _this;\n        }\n        /**\n         * This gets called when an `ChaptersTrackMenuItem` is \"clicked\". See\n         * {@link ClickableComponent} for more detailed information on what a click can be.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        ChaptersTrackMenuItem.prototype.handleClick = function handleClick(event) {\n          _MenuItem.prototype.handleClick.call(this);\n\n          this.player_.currentTime(this.cue.startTime);\n          this.update(this.cue.startTime);\n        };\n        /**\n         * Update chapter menu item\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `cuechange` event that caused this function to run.\n         *\n         * @listens TextTrack#cuechange\n         */\n\n\n        ChaptersTrackMenuItem.prototype.update = function update(event) {\n          var cue = this.cue;\n          var currentTime = this.player_.currentTime(); // vjs.log(currentTime, cue.startTime);\n\n          this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);\n        };\n\n        return ChaptersTrackMenuItem;\n      }(_menuItem2['default']);\n\n      _component2['default'].registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);\n\n      exports['default'] = ChaptersTrackMenuItem;\n      /***/\n    },\n    /* 91 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _textTrackButton = __webpack_require__(83);\n\n      var _textTrackButton2 = _interopRequireDefault(_textTrackButton);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file descriptions-button.js\n       */\n\n      /**\n       * The button component for toggling and selecting descriptions\n       *\n       * @extends TextTrackButton\n       */\n\n\n      var DescriptionsButton = function (_TextTrackButton) {\n        _inherits(DescriptionsButton, _TextTrackButton);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         *\n         * @param {Component~ReadyCallback} [ready]\n         *        The function to call when this component is ready.\n         */\n\n\n        function DescriptionsButton(player, options, ready) {\n          _classCallCheck(this, DescriptionsButton);\n\n          var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n\n          _this.el_.setAttribute('aria-label', 'Descriptions Menu');\n\n          var tracks = player.textTracks();\n\n          if (tracks) {\n            (function () {\n              var changeHandler = Fn.bind(_this, _this.handleTracksChange);\n              tracks.addEventListener('change', changeHandler);\n\n              _this.on('dispose', function () {\n                tracks.removeEventListener('change', changeHandler);\n              });\n            })();\n          }\n\n          return _this;\n        }\n        /**\n         * Handle text track change\n         *\n         * @param {EventTarget~Event} event\n         *        The event that caused this function to run\n         *\n         * @listens TextTrackList#change\n         */\n\n\n        DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {\n          var tracks = this.player().textTracks();\n          var disabled = false; // Check whether a track of a different kind is showing\n\n          for (var i = 0, l = tracks.length; i < l; i++) {\n            var track = tracks[i];\n\n            if (track.kind !== this.kind_ && track.mode === 'showing') {\n              disabled = true;\n              break;\n            }\n          } // If another track is showing, disable this menu button\n\n\n          if (disabled) {\n            this.disable();\n          } else {\n            this.enable();\n          }\n        };\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n        };\n\n        return DescriptionsButton;\n      }(_textTrackButton2['default']);\n      /**\n       * `kind` of TextTrack to look for to associate it with this menu.\n       *\n       * @type {string}\n       * @private\n       */\n\n\n      DescriptionsButton.prototype.kind_ = 'descriptions';\n      /**\n       * The text that should display over the `DescriptionsButton`s controls. Added for localization.\n       *\n       * @type {string}\n       * @private\n       */\n\n      DescriptionsButton.prototype.controlText_ = 'Descriptions';\n\n      _component2['default'].registerComponent('DescriptionsButton', DescriptionsButton);\n\n      exports['default'] = DescriptionsButton;\n      /***/\n    },\n    /* 92 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _textTrackButton = __webpack_require__(83);\n\n      var _textTrackButton2 = _interopRequireDefault(_textTrackButton);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file subtitles-button.js\n       */\n\n      /**\n       * The button component for toggling and selecting subtitles\n       *\n       * @extends TextTrackButton\n       */\n\n\n      var SubtitlesButton = function (_TextTrackButton) {\n        _inherits(SubtitlesButton, _TextTrackButton);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         *\n         * @param {Component~ReadyCallback} [ready]\n         *        The function to call when this component is ready.\n         */\n\n\n        function SubtitlesButton(player, options, ready) {\n          _classCallCheck(this, SubtitlesButton);\n\n          var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n\n          _this.el_.setAttribute('aria-label', 'Subtitles Menu');\n\n          return _this;\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n        };\n\n        return SubtitlesButton;\n      }(_textTrackButton2['default']);\n      /**\n       * `kind` of TextTrack to look for to associate it with this menu.\n       *\n       * @type {string}\n       * @private\n       */\n\n\n      SubtitlesButton.prototype.kind_ = 'subtitles';\n      /**\n       * The text that should display over the `SubtitlesButton`s controls. Added for localization.\n       *\n       * @type {string}\n       * @private\n       */\n\n      SubtitlesButton.prototype.controlText_ = 'Subtitles';\n\n      _component2['default'].registerComponent('SubtitlesButton', SubtitlesButton);\n\n      exports['default'] = SubtitlesButton;\n      /***/\n    },\n    /* 93 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _textTrackButton = __webpack_require__(83);\n\n      var _textTrackButton2 = _interopRequireDefault(_textTrackButton);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _captionSettingsMenuItem = __webpack_require__(94);\n\n      var _captionSettingsMenuItem2 = _interopRequireDefault(_captionSettingsMenuItem);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file captions-button.js\n       */\n\n      /**\n       * The button component for toggling and selecting captions\n       *\n       * @extends TextTrackButton\n       */\n\n\n      var CaptionsButton = function (_TextTrackButton) {\n        _inherits(CaptionsButton, _TextTrackButton);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         *\n         * @param {Component~ReadyCallback} [ready]\n         *        The function to call when this component is ready.\n         */\n\n\n        function CaptionsButton(player, options, ready) {\n          _classCallCheck(this, CaptionsButton);\n\n          var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n\n          _this.el_.setAttribute('aria-label', 'Captions Menu');\n\n          return _this;\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * Update caption menu items\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `addtrack` or `removetrack` event that caused this function to be\n         *        called.\n         *\n         * @listens TextTrackList#addtrack\n         * @listens TextTrackList#removetrack\n         */\n\n\n        CaptionsButton.prototype.update = function update(event) {\n          var threshold = 2;\n\n          _TextTrackButton.prototype.update.call(this); // if native, then threshold is 1 because no settings button\n\n\n          if (this.player().tech_ && this.player().tech_.featuresNativeTextTracks) {\n            threshold = 1;\n          }\n\n          if (this.items && this.items.length > threshold) {\n            this.show();\n          } else {\n            this.hide();\n          }\n        };\n        /**\n         * Create caption menu items\n         *\n         * @return {CaptionSettingsMenuItem[]}\n         *         The array of current menu items.\n         */\n\n\n        CaptionsButton.prototype.createItems = function createItems() {\n          var items = [];\n\n          if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks)) {\n            items.push(new _captionSettingsMenuItem2['default'](this.player_, {\n              kind: this.kind_\n            }));\n          }\n\n          return _TextTrackButton.prototype.createItems.call(this, items);\n        };\n\n        return CaptionsButton;\n      }(_textTrackButton2['default']);\n      /**\n       * `kind` of TextTrack to look for to associate it with this menu.\n       *\n       * @type {string}\n       * @private\n       */\n\n\n      CaptionsButton.prototype.kind_ = 'captions';\n      /**\n       * The text that should display over the `CaptionsButton`s controls. Added for localization.\n       *\n       * @type {string}\n       * @private\n       */\n\n      CaptionsButton.prototype.controlText_ = 'Captions';\n\n      _component2['default'].registerComponent('CaptionsButton', CaptionsButton);\n\n      exports['default'] = CaptionsButton;\n      /***/\n    },\n    /* 94 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _textTrackMenuItem = __webpack_require__(87);\n\n      var _textTrackMenuItem2 = _interopRequireDefault(_textTrackMenuItem);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file caption-settings-menu-item.js\n       */\n\n      /**\n       * The menu item for caption track settings menu\n       *\n       * @extends TextTrackMenuItem\n       */\n\n\n      var CaptionSettingsMenuItem = function (_TextTrackMenuItem) {\n        _inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function CaptionSettingsMenuItem(player, options) {\n          _classCallCheck(this, CaptionSettingsMenuItem);\n\n          options.track = {\n            player: player,\n            kind: options.kind,\n            label: options.kind + ' settings',\n            selectable: false,\n            'default': false,\n            mode: 'disabled'\n          }; // CaptionSettingsMenuItem has no concept of 'selected'\n\n          options.selectable = false;\n\n          var _this = _possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));\n\n          _this.addClass('vjs-texttrack-settings');\n\n          _this.controlText(', opens ' + options.kind + ' settings dialog');\n\n          return _this;\n        }\n        /**\n         * This gets called when an `CaptionSettingsMenuItem` is \"clicked\". See\n         * {@link ClickableComponent} for more detailed information on what a click can be.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        CaptionSettingsMenuItem.prototype.handleClick = function handleClick(event) {\n          this.player().getChild('textTrackSettings').show();\n          this.player().getChild('textTrackSettings').el_.focus();\n        };\n\n        return CaptionSettingsMenuItem;\n      }(_textTrackMenuItem2['default']);\n\n      _component2['default'].registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);\n\n      exports['default'] = CaptionSettingsMenuItem;\n      /***/\n    },\n    /* 95 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _trackButton = __webpack_require__(84);\n\n      var _trackButton2 = _interopRequireDefault(_trackButton);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _audioTrackMenuItem = __webpack_require__(96);\n\n      var _audioTrackMenuItem2 = _interopRequireDefault(_audioTrackMenuItem);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file audio-track-button.js\n       */\n\n      /**\n       * The base class for buttons that toggle specific {@link AudioTrack} types.\n       *\n       * @extends TrackButton\n       */\n\n\n      var AudioTrackButton = function (_TrackButton) {\n        _inherits(AudioTrackButton, _TrackButton);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options={}]\n         *        The key/value store of player options.\n         */\n\n\n        function AudioTrackButton(player) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          _classCallCheck(this, AudioTrackButton);\n\n          options.tracks = player.audioTracks && player.audioTracks();\n\n          var _this = _possibleConstructorReturn(this, _TrackButton.call(this, player, options));\n\n          _this.el_.setAttribute('aria-label', 'Audio Menu');\n\n          return _this;\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * Create a menu item for each audio track\n         *\n         * @param {AudioTrackMenuItem[]} [items=[]]\n         *        An array of existing menu items to use.\n         *\n         * @return {AudioTrackMenuItem[]}\n         *         An array of menu items\n         */\n\n\n        AudioTrackButton.prototype.createItems = function createItems() {\n          var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n          var tracks = this.player_.audioTracks && this.player_.audioTracks();\n\n          if (!tracks) {\n            return items;\n          }\n\n          for (var i = 0; i < tracks.length; i++) {\n            var track = tracks[i];\n            items.push(new _audioTrackMenuItem2['default'](this.player_, {\n              track: track,\n              // MenuItem is selectable\n              selectable: true\n            }));\n          }\n\n          return items;\n        };\n\n        return AudioTrackButton;\n      }(_trackButton2['default']);\n      /**\n       * The text that should display over the `AudioTrackButton`s controls. Added for localization.\n       *\n       * @type {string}\n       * @private\n       */\n\n\n      AudioTrackButton.prototype.controlText_ = 'Audio Track';\n\n      _component2['default'].registerComponent('AudioTrackButton', AudioTrackButton);\n\n      exports['default'] = AudioTrackButton;\n      /***/\n    },\n    /* 96 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _menuItem = __webpack_require__(88);\n\n      var _menuItem2 = _interopRequireDefault(_menuItem);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file audio-track-menu-item.js\n       */\n\n      /**\n       * An {@link AudioTrack} {@link MenuItem}\n       *\n       * @extends MenuItem\n       */\n\n\n      var AudioTrackMenuItem = function (_MenuItem) {\n        _inherits(AudioTrackMenuItem, _MenuItem);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function AudioTrackMenuItem(player, options) {\n          _classCallCheck(this, AudioTrackMenuItem);\n\n          var track = options.track;\n          var tracks = player.audioTracks(); // Modify options for parent MenuItem class's init.\n\n          options.label = track.label || track.language || 'Unknown';\n          options.selected = track.enabled;\n\n          var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n          _this.track = track;\n\n          if (tracks) {\n            (function () {\n              var changeHandler = Fn.bind(_this, _this.handleTracksChange);\n              tracks.addEventListener('change', changeHandler);\n\n              _this.on('dispose', function () {\n                tracks.removeEventListener('change', changeHandler);\n              });\n            })();\n          }\n\n          return _this;\n        }\n        /**\n         * This gets called when an `AudioTrackMenuItem is \"clicked\". See {@link ClickableComponent}\n         * for more detailed information on what a click can be.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {\n          var tracks = this.player_.audioTracks();\n\n          _MenuItem.prototype.handleClick.call(this, event);\n\n          if (!tracks) {\n            return;\n          }\n\n          for (var i = 0; i < tracks.length; i++) {\n            var track = tracks[i];\n            track.enabled = track === this.track;\n          }\n        };\n        /**\n         * Handle any {@link AudioTrack} change.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The {@link AudioTrackList#change} event that caused this to run.\n         *\n         * @listens AudioTrackList#change\n         */\n\n\n        AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {\n          this.selected(this.track.enabled);\n        };\n\n        return AudioTrackMenuItem;\n      }(_menuItem2['default']);\n\n      _component2['default'].registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);\n\n      exports['default'] = AudioTrackMenuItem;\n      /***/\n    },\n    /* 97 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _menuButton = __webpack_require__(85);\n\n      var _menuButton2 = _interopRequireDefault(_menuButton);\n\n      var _menu = __webpack_require__(86);\n\n      var _menu2 = _interopRequireDefault(_menu);\n\n      var _playbackRateMenuItem = __webpack_require__(98);\n\n      var _playbackRateMenuItem2 = _interopRequireDefault(_playbackRateMenuItem);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file playback-rate-menu-button.js\n       */\n\n      /**\n       * The component for controlling the playback rate.\n       *\n       * @extends MenuButton\n       */\n\n\n      var PlaybackRateMenuButton = function (_MenuButton) {\n        _inherits(PlaybackRateMenuButton, _MenuButton);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function PlaybackRateMenuButton(player, options) {\n          _classCallCheck(this, PlaybackRateMenuButton);\n\n          var _this = _possibleConstructorReturn(this, _MenuButton.call(this, player, options));\n\n          _this.updateVisibility();\n\n          _this.updateLabel();\n\n          _this.on(player, 'loadstart', _this.updateVisibility);\n\n          _this.on(player, 'ratechange', _this.updateLabel);\n\n          return _this;\n        }\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        PlaybackRateMenuButton.prototype.createEl = function createEl() {\n          var el = _MenuButton.prototype.createEl.call(this);\n\n          this.labelEl_ = Dom.createEl('div', {\n            className: 'vjs-playback-rate-value',\n            innerHTML: 1.0\n          });\n          el.appendChild(this.labelEl_);\n          return el;\n        };\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * Create the playback rate menu\n         *\n         * @return {Menu}\n         *         Menu object populated with {@link PlaybackRateMenuItem}s\n         */\n\n\n        PlaybackRateMenuButton.prototype.createMenu = function createMenu() {\n          var menu = new _menu2['default'](this.player());\n          var rates = this.playbackRates();\n\n          if (rates) {\n            for (var i = rates.length - 1; i >= 0; i--) {\n              menu.addChild(new _playbackRateMenuItem2['default'](this.player(), {\n                rate: rates[i] + 'x'\n              }));\n            }\n          }\n\n          return menu;\n        };\n        /**\n         * Updates ARIA accessibility attributes\n         */\n\n\n        PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {\n          // Current playback rate\n          this.el().setAttribute('aria-valuenow', this.player().playbackRate());\n        };\n        /**\n         * This gets called when an `PlaybackRateMenuButton` is \"clicked\". See\n         * {@link ClickableComponent} for more detailed information on what a click can be.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        PlaybackRateMenuButton.prototype.handleClick = function handleClick(event) {\n          // select next rate option\n          var currentRate = this.player().playbackRate();\n          var rates = this.playbackRates(); // this will select first one if the last one currently selected\n\n          var newRate = rates[0];\n\n          for (var i = 0; i < rates.length; i++) {\n            if (rates[i] > currentRate) {\n              newRate = rates[i];\n              break;\n            }\n          }\n\n          this.player().playbackRate(newRate);\n        };\n        /**\n         * Get possible playback rates\n         *\n         * @return {Array}\n         *         All possible playback rates\n         */\n\n\n        PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {\n          return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;\n        };\n        /**\n         * Get whether playback rates is supported by the tech\n         * and an array of playback rates exists\n         *\n         * @return {boolean}\n         *         Whether changing playback rate is supported\n         */\n\n\n        PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {\n          return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;\n        };\n        /**\n         * Hide playback rate controls when they're no playback rate options to select\n         *\n         * @param {EventTarget~Event} [event]\n         *        The event that caused this function to run.\n         *\n         * @listens Player#loadstart\n         */\n\n\n        PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility(event) {\n          if (this.playbackRateSupported()) {\n            this.removeClass('vjs-hidden');\n          } else {\n            this.addClass('vjs-hidden');\n          }\n        };\n        /**\n         * Update button label when rate changed\n         *\n         * @param {EventTarget~Event} [event]\n         *        The event that caused this function to run.\n         *\n         * @listens Player#ratechange\n         */\n\n\n        PlaybackRateMenuButton.prototype.updateLabel = function updateLabel(event) {\n          if (this.playbackRateSupported()) {\n            this.labelEl_.innerHTML = this.player().playbackRate() + 'x';\n          }\n        };\n\n        return PlaybackRateMenuButton;\n      }(_menuButton2['default']);\n      /**\n       * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n       *\n       * @type {string}\n       * @private\n       */\n\n\n      PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';\n\n      _component2['default'].registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);\n\n      exports['default'] = PlaybackRateMenuButton;\n      /***/\n    },\n    /* 98 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _menuItem = __webpack_require__(88);\n\n      var _menuItem2 = _interopRequireDefault(_menuItem);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file playback-rate-menu-item.js\n       */\n\n      /**\n       * The specific menu item type for selecting a playback rate.\n       *\n       * @extends MenuItem\n       */\n\n\n      var PlaybackRateMenuItem = function (_MenuItem) {\n        _inherits(PlaybackRateMenuItem, _MenuItem);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *        The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         */\n\n\n        function PlaybackRateMenuItem(player, options) {\n          _classCallCheck(this, PlaybackRateMenuItem);\n\n          var label = options.rate;\n          var rate = parseFloat(label, 10); // Modify options for parent MenuItem class's init.\n\n          options.label = label;\n          options.selected = rate === 1;\n\n          var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n          _this.label = label;\n          _this.rate = rate;\n\n          _this.on(player, 'ratechange', _this.update);\n\n          return _this;\n        }\n        /**\n         * This gets called when an `PlaybackRateMenuItem` is \"clicked\". See\n         * {@link ClickableComponent} for more detailed information on what a click can be.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `keydown`, `tap`, or `click` event that caused this function to be\n         *        called.\n         *\n         * @listens tap\n         * @listens click\n         */\n\n\n        PlaybackRateMenuItem.prototype.handleClick = function handleClick(event) {\n          _MenuItem.prototype.handleClick.call(this);\n\n          this.player().playbackRate(this.rate);\n        };\n        /**\n         * Update the PlaybackRateMenuItem when the playbackrate changes.\n         *\n         * @param {EventTarget~Event} [event]\n         *        The `ratechange` event that caused this function to run.\n         *\n         * @listens Player#ratechange\n         */\n\n\n        PlaybackRateMenuItem.prototype.update = function update(event) {\n          this.selected(this.player().playbackRate() === this.rate);\n        };\n\n        return PlaybackRateMenuItem;\n      }(_menuItem2['default']);\n      /**\n       * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.\n       *\n       * @type {string}\n       * @private\n       */\n\n\n      PlaybackRateMenuItem.prototype.contentElType = 'button';\n\n      _component2['default'].registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);\n\n      exports['default'] = PlaybackRateMenuItem;\n      /***/\n    },\n    /* 99 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _spacer = __webpack_require__(100);\n\n      var _spacer2 = _interopRequireDefault(_spacer);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file custom-control-spacer.js\n       */\n\n      /**\n       * Spacer specifically meant to be used as an insertion point for new plugins, etc.\n       *\n       * @extends Spacer\n       */\n\n\n      var CustomControlSpacer = function (_Spacer) {\n        _inherits(CustomControlSpacer, _Spacer);\n\n        function CustomControlSpacer() {\n          _classCallCheck(this, CustomControlSpacer);\n\n          return _possibleConstructorReturn(this, _Spacer.apply(this, arguments));\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        CustomControlSpacer.prototype.createEl = function createEl() {\n          var el = _Spacer.prototype.createEl.call(this, {\n            className: this.buildCSSClass()\n          }); // No-flex/table-cell mode requires there be some content\n          // in the cell to fill the remaining space of the table.\n\n\n          el.innerHTML = '&nbsp;';\n          return el;\n        };\n\n        return CustomControlSpacer;\n      }(_spacer2['default']);\n\n      _component2['default'].registerComponent('CustomControlSpacer', CustomControlSpacer);\n\n      exports['default'] = CustomControlSpacer;\n      /***/\n    },\n    /* 100 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file spacer.js\n       */\n\n      /**\n       * Just an empty spacer element that can be used as an append point for plugins, etc.\n       * Also can be used to create space between elements when necessary.\n       *\n       * @extends Component\n       */\n\n\n      var Spacer = function (_Component) {\n        _inherits(Spacer, _Component);\n\n        function Spacer() {\n          _classCallCheck(this, Spacer);\n\n          return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         */\n\n\n        Spacer.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * Create the `Component`'s DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        Spacer.prototype.createEl = function createEl() {\n          return _Component.prototype.createEl.call(this, 'div', {\n            className: this.buildCSSClass()\n          });\n        };\n\n        return Spacer;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('Spacer', Spacer);\n\n      exports['default'] = Spacer;\n      /***/\n    },\n    /* 101 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _modalDialog = __webpack_require__(28);\n\n      var _modalDialog2 = _interopRequireDefault(_modalDialog);\n\n      var _mergeOptions = __webpack_require__(19);\n\n      var _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file error-display.js\n       */\n\n      /**\n       * A display that indicates an error has occurred. This means that the video\n       * is unplayable.\n       *\n       * @extends ModalDialog\n       */\n\n\n      var ErrorDisplay = function (_ModalDialog) {\n        _inherits(ErrorDisplay, _ModalDialog);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param  {Player} player\n         *         The `Player` that this class should be attached to.\n         *\n         * @param  {Object} [options]\n         *         The key/value store of player options.\n         */\n\n\n        function ErrorDisplay(player, options) {\n          _classCallCheck(this, ErrorDisplay);\n\n          var _this = _possibleConstructorReturn(this, _ModalDialog.call(this, player, options));\n\n          _this.on(player, 'error', _this.open);\n\n          return _this;\n        }\n        /**\n         * Builds the default DOM `className`.\n         *\n         * @return {string}\n         *         The DOM `className` for this object.\n         *\n         * @deprecated Since version 5.\n         */\n\n\n        ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {\n          return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);\n        };\n        /**\n         * Gets the localized error message based on the `Player`s error.\n         *\n         * @return {string}\n         *         The `Player`s error message localized or an empty string.\n         */\n\n\n        ErrorDisplay.prototype.content = function content() {\n          var error = this.player().error();\n          return error ? this.localize(error.message) : '';\n        };\n\n        return ErrorDisplay;\n      }(_modalDialog2['default']);\n      /**\n       * The default options for an `ErrorDisplay`.\n       *\n       * @private\n       */\n\n\n      ErrorDisplay.prototype.options_ = (0, _mergeOptions2['default'])(_modalDialog2['default'].prototype.options_, {\n        fillAlways: true,\n        temporary: false,\n        uncloseable: true\n      });\n\n      _component2['default'].registerComponent('ErrorDisplay', ErrorDisplay);\n\n      exports['default'] = ErrorDisplay;\n      /***/\n    },\n    /* 102 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _obj = __webpack_require__(13);\n\n      var Obj = _interopRequireWildcard(_obj);\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file text-track-settings.js\n       */\n\n\n      var LOCAL_STORAGE_KEY = 'vjs-text-track-settings';\n      var COLOR_BLACK = ['#000', 'Black'];\n      var COLOR_BLUE = ['#00F', 'Blue'];\n      var COLOR_CYAN = ['#0FF', 'Cyan'];\n      var COLOR_GREEN = ['#0F0', 'Green'];\n      var COLOR_MAGENTA = ['#F0F', 'Magenta'];\n      var COLOR_RED = ['#F00', 'Red'];\n      var COLOR_WHITE = ['#FFF', 'White'];\n      var COLOR_YELLOW = ['#FF0', 'Yellow'];\n      var OPACITY_OPAQUE = ['1', 'Opaque'];\n      var OPACITY_SEMI = ['0.5', 'Semi-Transparent'];\n      var OPACITY_TRANS = ['0', 'Transparent']; // Configuration for the various <select> elements in the DOM of this component.\n      //\n      // Possible keys include:\n      //\n      // `default`:\n      //   The default option index. Only needs to be provided if not zero.\n      // `parser`:\n      //   A function which is used to parse the value from the selected option in\n      //   a customized way.\n      // `selector`:\n      //   The selector used to find the associated <select> element.\n\n      var selectConfigs = {\n        backgroundColor: {\n          selector: '.vjs-bg-color > select',\n          id: 'captions-background-color-%s',\n          label: 'Color',\n          options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n        },\n        backgroundOpacity: {\n          selector: '.vjs-bg-opacity > select',\n          id: 'captions-background-opacity-%s',\n          label: 'Transparency',\n          options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]\n        },\n        color: {\n          selector: '.vjs-fg-color > select',\n          id: 'captions-foreground-color-%s',\n          label: 'Color',\n          options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n        },\n        edgeStyle: {\n          selector: '.vjs-edge-style > select',\n          id: '%s',\n          label: 'Text Edge Style',\n          options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]\n        },\n        fontFamily: {\n          selector: '.vjs-font-family > select',\n          id: 'captions-font-family-%s',\n          label: 'Font Family',\n          options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]\n        },\n        fontPercent: {\n          selector: '.vjs-font-percent > select',\n          id: 'captions-font-size-%s',\n          label: 'Font Size',\n          options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],\n          'default': 2,\n          parser: function parser(v) {\n            return v === '1.00' ? null : Number(v);\n          }\n        },\n        textOpacity: {\n          selector: '.vjs-text-opacity > select',\n          id: 'captions-foreground-opacity-%s',\n          label: 'Transparency',\n          options: [OPACITY_OPAQUE, OPACITY_SEMI]\n        },\n        // Options for this object are defined below.\n        windowColor: {\n          selector: '.vjs-window-color > select',\n          id: 'captions-window-color-%s',\n          label: 'Color'\n        },\n        // Options for this object are defined below.\n        windowOpacity: {\n          selector: '.vjs-window-opacity > select',\n          id: 'captions-window-opacity-%s',\n          label: 'Transparency',\n          options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]\n        }\n      };\n      selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;\n      /**\n       * Get the actual value of an option.\n       *\n       * @param  {string} value\n       *         The value to get\n       *\n       * @param  {Function} [parser]\n       *         Optional function to adjust the value.\n       *\n       * @return {Mixed}\n       *         - Will be `undefined` if no value exists\n       *         - Will be `undefined` if the given value is \"none\".\n       *         - Will be the actual value otherwise.\n       *\n       * @private\n       */\n\n      function parseOptionValue(value, parser) {\n        if (parser) {\n          value = parser(value);\n        }\n\n        if (value && value !== 'none') {\n          return value;\n        }\n      }\n      /**\n       * Gets the value of the selected <option> element within a <select> element.\n       *\n       * @param  {Element} el\n       *         the element to look in\n       *\n       * @param  {Function} [parser]\n       *         Optional function to adjust the value.\n       *\n       * @return {Mixed}\n       *         - Will be `undefined` if no value exists\n       *         - Will be `undefined` if the given value is \"none\".\n       *         - Will be the actual value otherwise.\n       *\n       * @private\n       */\n\n\n      function getSelectedOptionValue(el, parser) {\n        var value = el.options[el.options.selectedIndex].value;\n        return parseOptionValue(value, parser);\n      }\n      /**\n       * Sets the selected <option> element within a <select> element based on a\n       * given value.\n       *\n       * @param {Element} el\n       *        The element to look in.\n       *\n       * @param {string} value\n       *        the property to look on.\n       *\n       * @param {Function} [parser]\n       *        Optional function to adjust the value before comparing.\n       *\n       * @private\n       */\n\n\n      function setSelectedOption(el, value, parser) {\n        if (!value) {\n          return;\n        }\n\n        for (var i = 0; i < el.options.length; i++) {\n          if (parseOptionValue(el.options[i].value, parser) === value) {\n            el.selectedIndex = i;\n            break;\n          }\n        }\n      }\n      /**\n       * Manipulate Text Tracks settings.\n       *\n       * @extends Component\n       */\n\n\n      var TextTrackSettings = function (_Component) {\n        _inherits(TextTrackSettings, _Component);\n        /**\n         * Creates an instance of this class.\n         *\n         * @param {Player} player\n         *         The `Player` that this class should be attached to.\n         *\n         * @param {Object} [options]\n         *         The key/value store of player options.\n         */\n\n\n        function TextTrackSettings(player, options) {\n          _classCallCheck(this, TextTrackSettings);\n\n          var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n          _this.setDefaults();\n\n          _this.hide();\n\n          _this.updateDisplay = Fn.bind(_this, _this.updateDisplay); // Grab `persistTextTrackSettings` from the player options if not passed in child options\n\n          if (options.persistTextTrackSettings === undefined) {\n            _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;\n          }\n\n          _this.on(_this.$('.vjs-done-button'), 'click', function () {\n            _this.saveSettings();\n\n            _this.hide();\n          });\n\n          _this.on(_this.$('.vjs-default-button'), 'click', function () {\n            _this.setDefaults();\n\n            _this.updateDisplay();\n          });\n\n          Obj.each(selectConfigs, function (config) {\n            _this.on(_this.$(config.selector), 'change', _this.updateDisplay);\n          });\n\n          if (_this.options_.persistTextTrackSettings) {\n            _this.restoreSettings();\n          }\n\n          return _this;\n        }\n        /**\n         * Create a <select> element with configured options.\n         *\n         * @param {string} key\n         *        Configuration key to use during creation.\n         *\n         * @return {Element}\n         *         The DOM element that gets created.\n         * @private\n         */\n\n\n        TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {\n          var _this2 = this;\n\n          var config = selectConfigs[key];\n          var id = config.id.replace('%s', this.id_);\n          return [(0, _dom.createEl)('label', {\n            className: 'vjs-label',\n            textContent: config.label\n          }, {\n            'for': id\n          }), (0, _dom.createEl)('select', {\n            id: id\n          }, undefined, config.options.map(function (o) {\n            return (0, _dom.createEl)('option', {\n              textContent: _this2.localize(o[1]),\n              value: o[0]\n            });\n          }))];\n        };\n        /**\n         * Create foreground color element for the component\n         *\n         * @return {Element}\n         *         The element that was created.\n         *\n         * @private\n         */\n\n\n        TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {\n          var legend = (0, _dom.createEl)('legend', {\n            textContent: this.localize('Text')\n          });\n          var select = this.createElSelect_('color');\n          var opacity = (0, _dom.createEl)('span', {\n            className: 'vjs-text-opacity vjs-opacity'\n          }, undefined, this.createElSelect_('textOpacity'));\n          return (0, _dom.createEl)('fieldset', {\n            className: 'vjs-fg-color vjs-tracksetting'\n          }, undefined, [legend].concat(select, opacity));\n        };\n        /**\n         * Create background color element for the component\n         *\n         * @return {Element}\n         *         The element that was created\n         *\n         * @private\n         */\n\n\n        TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {\n          var legend = (0, _dom.createEl)('legend', {\n            textContent: this.localize('Background')\n          });\n          var select = this.createElSelect_('backgroundColor');\n          var opacity = (0, _dom.createEl)('span', {\n            className: 'vjs-bg-opacity vjs-opacity'\n          }, undefined, this.createElSelect_('backgroundOpacity'));\n          return (0, _dom.createEl)('fieldset', {\n            className: 'vjs-bg-color vjs-tracksetting'\n          }, undefined, [legend].concat(select, opacity));\n        };\n        /**\n         * Create window color element for the component\n         *\n         * @return {Element}\n         *         The element that was created\n         *\n         * @private\n         */\n\n\n        TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {\n          var legend = (0, _dom.createEl)('legend', {\n            textContent: this.localize('Window')\n          });\n          var select = this.createElSelect_('windowColor');\n          var opacity = (0, _dom.createEl)('span', {\n            className: 'vjs-window-opacity vjs-opacity'\n          }, undefined, this.createElSelect_('windowOpacity'));\n          return (0, _dom.createEl)('fieldset', {\n            className: 'vjs-window-color vjs-tracksetting'\n          }, undefined, [legend].concat(select, opacity));\n        };\n        /**\n         * Create color elements for the component\n         *\n         * @return {Element}\n         *         The element that was created\n         *\n         * @private\n         */\n\n\n        TextTrackSettings.prototype.createElColors_ = function createElColors_() {\n          return (0, _dom.createEl)('div', {\n            className: 'vjs-tracksettings-colors'\n          }, undefined, [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()]);\n        };\n        /**\n         * Create font elements for the component\n         *\n         * @return {Element}\n         *         The element that was created.\n         *\n         * @private\n         */\n\n\n        TextTrackSettings.prototype.createElFont_ = function createElFont_() {\n          var fontPercent = (0, _dom.createEl)('div', {\n            className: 'vjs-font-percent vjs-tracksetting'\n          }, undefined, this.createElSelect_('fontPercent'));\n          var edgeStyle = (0, _dom.createEl)('div', {\n            className: 'vjs-edge-style vjs-tracksetting'\n          }, undefined, this.createElSelect_('edgeStyle'));\n          var fontFamily = (0, _dom.createEl)('div', {\n            className: 'vjs-font-family vjs-tracksetting'\n          }, undefined, this.createElSelect_('fontFamily'));\n          return (0, _dom.createEl)('div', {\n            className: 'vjs-tracksettings-font'\n          }, undefined, [fontPercent, edgeStyle, fontFamily]);\n        };\n        /**\n         * Create controls for the component\n         *\n         * @return {Element}\n         *         The element that was created.\n         *\n         * @private\n         */\n\n\n        TextTrackSettings.prototype.createElControls_ = function createElControls_() {\n          var defaultsButton = (0, _dom.createEl)('button', {\n            className: 'vjs-default-button',\n            textContent: this.localize('Defaults')\n          });\n          var doneButton = (0, _dom.createEl)('button', {\n            className: 'vjs-done-button',\n            textContent: 'Done'\n          });\n          return (0, _dom.createEl)('div', {\n            className: 'vjs-tracksettings-controls'\n          }, undefined, [defaultsButton, doneButton]);\n        };\n        /**\n         * Create the component's DOM element\n         *\n         * @return {Element}\n         *         The element that was created.\n         */\n\n\n        TextTrackSettings.prototype.createEl = function createEl() {\n          var settings = (0, _dom.createEl)('div', {\n            className: 'vjs-tracksettings'\n          }, undefined, [this.createElColors_(), this.createElFont_(), this.createElControls_()]);\n          var heading = (0, _dom.createEl)('div', {\n            className: 'vjs-control-text',\n            id: 'TTsettingsDialogLabel-' + this.id_,\n            textContent: 'Caption Settings Dialog'\n          }, {\n            'aria-level': '1',\n            'role': 'heading'\n          });\n          var description = (0, _dom.createEl)('div', {\n            className: 'vjs-control-text',\n            id: 'TTsettingsDialogDescription-' + this.id_,\n            textContent: 'Beginning of dialog window. Escape will cancel and close the window.'\n          });\n          var doc = (0, _dom.createEl)('div', undefined, {\n            role: 'document'\n          }, [heading, description, settings]);\n          return (0, _dom.createEl)('div', {\n            className: 'vjs-caption-settings vjs-modal-overlay',\n            tabIndex: -1\n          }, {\n            'role': 'dialog',\n            'aria-labelledby': heading.id,\n            'aria-describedby': description.id\n          }, doc);\n        };\n        /**\n         * Gets an object of text track settings (or null).\n         *\n         * @return {Object}\n         *         An object with config values parsed from the DOM or localStorage.\n         */\n\n\n        TextTrackSettings.prototype.getValues = function getValues() {\n          var _this3 = this;\n\n          return Obj.reduce(selectConfigs, function (accum, config, key) {\n            var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);\n\n            if (value !== undefined) {\n              accum[key] = value;\n            }\n\n            return accum;\n          }, {});\n        };\n        /**\n         * Sets text track settings from an object of values.\n         *\n         * @param {Object} values\n         *        An object with config values parsed from the DOM or localStorage.\n         */\n\n\n        TextTrackSettings.prototype.setValues = function setValues(values) {\n          var _this4 = this;\n\n          Obj.each(selectConfigs, function (config, key) {\n            setSelectedOption(_this4.$(config.selector), values[key], config.parser);\n          });\n        };\n        /**\n         * Sets all <select> elements to their default values.\n         */\n\n\n        TextTrackSettings.prototype.setDefaults = function setDefaults() {\n          var _this5 = this;\n\n          Obj.each(selectConfigs, function (config) {\n            var index = config.hasOwnProperty('default') ? config['default'] : 0;\n            _this5.$(config.selector).selectedIndex = index;\n          });\n        };\n        /**\n         * Restore texttrack settings from localStorage\n         */\n\n\n        TextTrackSettings.prototype.restoreSettings = function restoreSettings() {\n          var values = void 0;\n\n          try {\n            values = JSON.parse(_window2['default'].localStorage.getItem(LOCAL_STORAGE_KEY));\n          } catch (err) {\n            _log2['default'].warn(err);\n          }\n\n          if (values) {\n            this.setValues(values);\n          }\n        };\n        /**\n         * Save text track settings to localStorage\n         */\n\n\n        TextTrackSettings.prototype.saveSettings = function saveSettings() {\n          if (!this.options_.persistTextTrackSettings) {\n            return;\n          }\n\n          var values = this.getValues();\n\n          try {\n            if (Object.keys(values).length) {\n              _window2['default'].localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));\n            } else {\n              _window2['default'].localStorage.removeItem(LOCAL_STORAGE_KEY);\n            }\n          } catch (err) {\n            _log2['default'].warn(err);\n          }\n        };\n        /**\n         * Update display of text track settings\n         */\n\n\n        TextTrackSettings.prototype.updateDisplay = function updateDisplay() {\n          var ttDisplay = this.player_.getChild('textTrackDisplay');\n\n          if (ttDisplay) {\n            ttDisplay.updateDisplay();\n          }\n        };\n\n        return TextTrackSettings;\n      }(_component2['default']);\n\n      _component2['default'].registerComponent('TextTrackSettings', TextTrackSettings);\n\n      exports['default'] = TextTrackSettings;\n      /***/\n    },\n    /* 103 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      var _templateObject = _taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.']);\n\n      var _tech = __webpack_require__(29);\n\n      var _tech2 = _interopRequireDefault(_tech);\n\n      var _component = __webpack_require__(16);\n\n      var _component2 = _interopRequireDefault(_component);\n\n      var _dom = __webpack_require__(9);\n\n      var Dom = _interopRequireWildcard(_dom);\n\n      var _url = __webpack_require__(35);\n\n      var Url = _interopRequireWildcard(_url);\n\n      var _fn = __webpack_require__(17);\n\n      var Fn = _interopRequireWildcard(_fn);\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      var _tsml = __webpack_require__(14);\n\n      var _tsml2 = _interopRequireDefault(_tsml);\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      var _document = __webpack_require__(5);\n\n      var _document2 = _interopRequireDefault(_document);\n\n      var _window = __webpack_require__(4);\n\n      var _window2 = _interopRequireDefault(_window);\n\n      var _obj = __webpack_require__(13);\n\n      var _mergeOptions = __webpack_require__(19);\n\n      var _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\n      var _toTitleCase = __webpack_require__(18);\n\n      var _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _taggedTemplateLiteralLoose(strings, raw) {\n        strings.raw = raw;\n        return strings;\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * @file html5.js\n       */\n\n      /**\n       * HTML5 Media Controller - Wrapper for HTML5 Media API\n       *\n       * @mixes Tech~SouceHandlerAdditions\n       * @extends Tech\n       */\n\n\n      var Html5 = function (_Tech) {\n        _inherits(Html5, _Tech);\n        /**\n         * Create an instance of this Tech.\n         *\n         * @param {Object} [options]\n         *        The key/value store of player options.\n         *\n         * @param {Component~ReadyCallback} ready\n         *        Callback function to call when the `HTML5` Tech is ready.\n         */\n\n\n        function Html5(options, ready) {\n          _classCallCheck(this, Html5);\n\n          var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n          var source = options.source;\n          var crossoriginTracks = false; // Set the source if one is provided\n          // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\n          // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\n          // anyway so the error gets fired.\n\n          if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\n            _this.setSource(source);\n          } else {\n            _this.handleLateInit_(_this.el_);\n          }\n\n          if (_this.el_.hasChildNodes()) {\n            var nodes = _this.el_.childNodes;\n            var nodesLength = nodes.length;\n            var removeNodes = [];\n\n            while (nodesLength--) {\n              var node = nodes[nodesLength];\n              var nodeName = node.nodeName.toLowerCase();\n\n              if (nodeName === 'track') {\n                if (!_this.featuresNativeTextTracks) {\n                  // Empty video tag tracks so the built-in player doesn't use them also.\n                  // This may not be fast enough to stop HTML5 browsers from reading the tags\n                  // so we'll need to turn off any default tracks if we're manually doing\n                  // captions and subtitles. videoElement.textTracks\n                  removeNodes.push(node);\n                } else {\n                  // store HTMLTrackElement and TextTrack to remote list\n                  _this.remoteTextTrackEls().addTrackElement_(node);\n\n                  _this.remoteTextTracks().addTrack_(node.track);\n\n                  if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && Url.isCrossOrigin(node.src)) {\n                    crossoriginTracks = true;\n                  }\n                }\n              }\n            }\n\n            for (var i = 0; i < removeNodes.length; i++) {\n              _this.el_.removeChild(removeNodes[i]);\n            }\n          } // TODO: add text tracks into this list\n\n\n          var trackTypes = ['audio', 'video']; // ProxyNative Video/Audio Track\n\n          trackTypes.forEach(function (type) {\n            var elTracks = _this.el()[type + 'Tracks'];\n\n            var techTracks = _this[type + 'Tracks']();\n\n            var capitalType = (0, _toTitleCase2['default'])(type);\n\n            if (!_this['featuresNative' + capitalType + 'Tracks'] || !elTracks || !elTracks.addEventListener) {\n              return;\n            }\n\n            _this['handle' + capitalType + 'TrackChange_'] = function (e) {\n              techTracks.trigger({\n                type: 'change',\n                target: techTracks,\n                currentTarget: techTracks,\n                srcElement: techTracks\n              });\n            };\n\n            _this['handle' + capitalType + 'TrackAdd_'] = function (e) {\n              return techTracks.addTrack(e.track);\n            };\n\n            _this['handle' + capitalType + 'TrackRemove_'] = function (e) {\n              return techTracks.removeTrack(e.track);\n            };\n\n            elTracks.addEventListener('change', _this['handle' + capitalType + 'TrackChange_']);\n            elTracks.addEventListener('addtrack', _this['handle' + capitalType + 'TrackAdd_']);\n            elTracks.addEventListener('removetrack', _this['handle' + capitalType + 'TrackRemove_']);\n\n            _this['removeOld' + capitalType + 'Tracks_'] = function (e) {\n              return _this.removeOldTracks_(techTracks, elTracks);\n            }; // Remove (native) tracks that are not used anymore\n\n\n            _this.on('loadstart', _this['removeOld' + capitalType + 'Tracks_']);\n          });\n\n          if (_this.featuresNativeTextTracks) {\n            if (crossoriginTracks) {\n              _log2['default'].warn((0, _tsml2['default'])(_templateObject));\n            }\n\n            _this.handleTextTrackChange_ = Fn.bind(_this, _this.handleTextTrackChange);\n            _this.handleTextTrackAdd_ = Fn.bind(_this, _this.handleTextTrackAdd);\n            _this.handleTextTrackRemove_ = Fn.bind(_this, _this.handleTextTrackRemove);\n\n            _this.proxyNativeTextTracks_();\n          } // Determine if native controls should be used\n          // Our goal should be to get the custom controls on mobile solid everywhere\n          // so we can remove this all together. Right now this will block custom\n          // controls on touch enabled laptops like the Chrome Pixel\n\n\n          if ((browser.TOUCH_ENABLED || browser.IS_IPHONE || browser.IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {\n            _this.setControls(true);\n          } // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\n          // into a `fullscreenchange` event\n\n\n          _this.proxyWebkitFullscreen_();\n\n          _this.triggerReady();\n\n          return _this;\n        }\n        /**\n         * Dispose of `HTML5` media element and remove all tracks.\n         */\n\n\n        Html5.prototype.dispose = function dispose() {\n          var _this2 = this; // Un-ProxyNativeTracks\n\n\n          ['audio', 'video', 'text'].forEach(function (type) {\n            var capitalType = (0, _toTitleCase2['default'])(type);\n            var tl = _this2.el_[type + 'Tracks'];\n\n            if (tl && tl.removeEventListener) {\n              tl.removeEventListener('change', _this2['handle' + capitalType + 'TrackChange_']);\n              tl.removeEventListener('addtrack', _this2['handle' + capitalType + 'TrackAdd_']);\n              tl.removeEventListener('removetrack', _this2['handle' + capitalType + 'TrackRemove_']);\n            } // Stop removing old text tracks\n\n\n            if (tl) {\n              _this2.off('loadstart', _this2['removeOld' + capitalType + 'Tracks_']);\n            }\n          });\n          Html5.disposeMediaElement(this.el_); // tech will handle clearing of the emulated track list\n\n          _Tech.prototype.dispose.call(this);\n        };\n        /**\n         * Create the `Html5` Tech's DOM element.\n         *\n         * @return {Element}\n         *         The element that gets created.\n         */\n\n\n        Html5.prototype.createEl = function createEl() {\n          var el = this.options_.tag; // Check if this browser supports moving the element into the box.\n          // On the iPhone video will break if you move the element,\n          // So we have to create a brand new element.\n\n          if (!el || this.movingMediaElementInDOM === false) {\n            // If the original tag is still there, clone and remove it.\n            if (el) {\n              var clone = el.cloneNode(true);\n              el.parentNode.insertBefore(clone, el);\n              Html5.disposeMediaElement(el);\n              el = clone;\n            } else {\n              el = _document2['default'].createElement('video'); // determine if native controls should be used\n\n              var tagAttributes = this.options_.tag && Dom.getElAttributes(this.options_.tag);\n              var attributes = (0, _mergeOptions2['default'])({}, tagAttributes);\n\n              if (!browser.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\n                delete attributes.controls;\n              }\n\n              Dom.setElAttributes(el, (0, _obj.assign)(attributes, {\n                id: this.options_.techId,\n                'class': 'vjs-tech'\n              }));\n            }\n\n            el.playerId = this.options_.playerId;\n          } // Update specific tag settings, in case they were overridden\n\n\n          var settingsAttrs = ['autoplay', 'preload', 'loop', 'muted'];\n\n          for (var i = settingsAttrs.length - 1; i >= 0; i--) {\n            var attr = settingsAttrs[i];\n            var overwriteAttrs = {};\n\n            if (typeof this.options_[attr] !== 'undefined') {\n              overwriteAttrs[attr] = this.options_[attr];\n            }\n\n            Dom.setElAttributes(el, overwriteAttrs);\n          }\n\n          return el;\n        };\n        /**\n         * This will be triggered if the loadstart event has already fired, before videojs was\n         * ready. Two known examples of when this can happen are:\n         * 1. If we're loading the playback object after it has started loading\n         * 2. The media is already playing the (often with autoplay on) then\n         *\n         * This function will fire another loadstart so that videojs can catchup.\n         *\n         * @fires Tech#loadstart\n         *\n         * @return {undefined}\n         *         returns nothing.\n         */\n\n\n        Html5.prototype.handleLateInit_ = function handleLateInit_(el) {\n          var _this3 = this;\n\n          if (el.networkState === 0 || el.networkState === 3) {\n            // The video element hasn't started loading the source yet\n            // or didn't find a source\n            return;\n          }\n\n          if (el.readyState === 0) {\n            var _ret = function () {\n              // NetworkState is set synchronously BUT loadstart is fired at the\n              // end of the current stack, usually before setInterval(fn, 0).\n              // So at this point we know loadstart may have already fired or is\n              // about to fire, and either way the player hasn't seen it yet.\n              // We don't want to fire loadstart prematurely here and cause a\n              // double loadstart so we'll wait and see if it happens between now\n              // and the next loop, and fire it if not.\n              // HOWEVER, we also want to make sure it fires before loadedmetadata\n              // which could also happen between now and the next loop, so we'll\n              // watch for that also.\n              var loadstartFired = false;\n\n              var setLoadstartFired = function setLoadstartFired() {\n                loadstartFired = true;\n              };\n\n              _this3.on('loadstart', setLoadstartFired);\n\n              var triggerLoadstart = function triggerLoadstart() {\n                // We did miss the original loadstart. Make sure the player\n                // sees loadstart before loadedmetadata\n                if (!loadstartFired) {\n                  this.trigger('loadstart');\n                }\n              };\n\n              _this3.on('loadedmetadata', triggerLoadstart);\n\n              _this3.ready(function () {\n                this.off('loadstart', setLoadstartFired);\n                this.off('loadedmetadata', triggerLoadstart);\n\n                if (!loadstartFired) {\n                  // We did miss the original native loadstart. Fire it now.\n                  this.trigger('loadstart');\n                }\n              });\n\n              return {\n                v: void 0\n              };\n            }();\n\n            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n          } // From here on we know that loadstart already fired and we missed it.\n          // The other readyState events aren't as much of a problem if we double\n          // them, so not going to go to as much trouble as loadstart to prevent\n          // that unless we find reason to.\n\n\n          var eventsToTrigger = ['loadstart']; // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\n\n          eventsToTrigger.push('loadedmetadata'); // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\n\n          if (el.readyState >= 2) {\n            eventsToTrigger.push('loadeddata');\n          } // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\n\n\n          if (el.readyState >= 3) {\n            eventsToTrigger.push('canplay');\n          } // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\n\n\n          if (el.readyState >= 4) {\n            eventsToTrigger.push('canplaythrough');\n          } // We still need to give the player time to add event listeners\n\n\n          this.ready(function () {\n            eventsToTrigger.forEach(function (type) {\n              this.trigger(type);\n            }, this);\n          });\n        };\n        /**\n         * Add event listeners to native text track events. This adds the native text tracks\n         * to our emulated {@link TextTrackList}.\n         */\n\n\n        Html5.prototype.proxyNativeTextTracks_ = function proxyNativeTextTracks_() {\n          var tt = this.el().textTracks;\n\n          if (tt) {\n            // Add tracks - if player is initialised after DOM loaded, textTracks\n            // will not trigger addtrack\n            for (var i = 0; i < tt.length; i++) {\n              this.textTracks().addTrack_(tt[i]);\n            }\n\n            if (tt.addEventListener) {\n              tt.addEventListener('change', this.handleTextTrackChange_);\n              tt.addEventListener('addtrack', this.handleTextTrackAdd_);\n              tt.addEventListener('removetrack', this.handleTextTrackRemove_);\n            } // Remove (native) texttracks that are not used anymore\n\n\n            this.on('loadstart', this.removeOldTextTracks_);\n          }\n        };\n        /**\n         * Handle any {@link TextTrackList} `change` event.\n         *\n         * @param {EventTarget~Event} e\n         *        The `change` event that caused this to run.\n         *\n         * @listens TextTrackList#change\n         */\n\n\n        Html5.prototype.handleTextTrackChange = function handleTextTrackChange(e) {\n          var tt = this.textTracks();\n          this.textTracks().trigger({\n            type: 'change',\n            target: tt,\n            currentTarget: tt,\n            srcElement: tt\n          });\n        };\n        /**\n         * Handle any {@link TextTrackList} `addtrack` event.\n         *\n         * @param {EventTarget~Event} e\n         *        The `addtrack` event that caused this to run.\n         *\n         * @listens TextTrackList#addtrack\n         */\n\n\n        Html5.prototype.handleTextTrackAdd = function handleTextTrackAdd(e) {\n          this.textTracks().addTrack_(e.track);\n        };\n        /**\n         * Handle any {@link TextTrackList} `removetrack` event.\n         *\n         * @param {EventTarget~Event} e\n         *        The `removetrack` event that caused this to run.\n         *\n         * @listens TextTrackList#removetrack\n         */\n\n\n        Html5.prototype.handleTextTrackRemove = function handleTextTrackRemove(e) {\n          this.textTracks().removeTrack_(e.track);\n        };\n        /**\n         * This function removes any {@link AudioTrack}s, {@link VideoTrack}s, or\n         * {@link TextTrack}s that are not in the media elements TrackList.\n         *\n         * @param {TrackList} techTracks\n         *        HTML5 Tech's TrackList to search through\n         *\n         * @param {TrackList} elTracks\n         *        HTML5 media elements TrackList to search trough.\n         *\n         * @private\n         */\n\n\n        Html5.prototype.removeOldTracks_ = function removeOldTracks_(techTracks, elTracks) {\n          // This will loop over the techTracks and check if they are still used by the HTML5 media element\n          // If not, they will be removed from the emulated list\n          var removeTracks = [];\n\n          if (!elTracks) {\n            return;\n          }\n\n          for (var i = 0; i < techTracks.length; i++) {\n            var techTrack = techTracks[i];\n            var found = false;\n\n            for (var j = 0; j < elTracks.length; j++) {\n              if (elTracks[j] === techTrack) {\n                found = true;\n                break;\n              }\n            }\n\n            if (!found) {\n              removeTracks.push(techTrack);\n            }\n          }\n\n          for (var _i = 0; _i < removeTracks.length; _i++) {\n            var _track = removeTracks[_i];\n            techTracks.removeTrack_(_track);\n          }\n        };\n        /**\n         * Remove {@link TextTrack}s that dont exist in the native track list from our\n         * emulated {@link TextTrackList}.\n         *\n         * @listens Tech#loadstart\n         */\n\n\n        Html5.prototype.removeOldTextTracks_ = function removeOldTextTracks_(e) {\n          var techTracks = this.textTracks();\n          var elTracks = this.el().textTracks;\n          this.removeOldTracks_(techTracks, elTracks);\n        };\n        /**\n         * Called by {@link Player#play} to play using the `Html5` `Tech`.\n         */\n\n\n        Html5.prototype.play = function play() {\n          var playPromise = this.el_.play(); // Catch/silence error when a pause interrupts a play request\n          // on browsers which return a promise\n\n          if (playPromise !== undefined && typeof playPromise.then === 'function') {\n            playPromise.then(null, function (e) {});\n          }\n        };\n        /**\n         * Set current time for the `HTML5` tech.\n         *\n         * @param {number} seconds\n         *        Set the current time of the media to this.\n         */\n\n\n        Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {\n          try {\n            this.el_.currentTime = seconds;\n          } catch (e) {\n            (0, _log2['default'])(e, 'Video is not ready. (Video.js)'); // this.warning(VideoJS.warnings.videoNotReady);\n          }\n        };\n        /**\n         * Get the current duration of the HTML5 media element.\n         *\n         * @return {number}\n         *         The duration of the media or 0 if there is no duration.\n         */\n\n\n        Html5.prototype.duration = function duration() {\n          var _this4 = this; // Android Chrome will report duration as Infinity for VOD HLS until after\n          // playback has started, which triggers the live display erroneously.\n          // Return NaN if playback has not started and trigger a durationupdate once\n          // the duration can be reliably known.\n\n\n          if (this.el_.duration === Infinity && browser.IS_ANDROID && browser.IS_CHROME) {\n            if (this.el_.currentTime === 0) {\n              var _ret2 = function () {\n                // Wait for the first `timeupdate` with currentTime > 0 - there may be\n                // several with 0\n                var checkProgress = function checkProgress() {\n                  if (_this4.el_.currentTime > 0) {\n                    // Trigger durationchange for genuinely live video\n                    if (_this4.el_.duration === Infinity) {\n                      _this4.trigger('durationchange');\n                    }\n\n                    _this4.off('timeupdate', checkProgress);\n                  }\n                };\n\n                _this4.on('timeupdate', checkProgress);\n\n                return {\n                  v: NaN\n                };\n              }();\n\n              if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === \"object\") return _ret2.v;\n            }\n          }\n\n          return this.el_.duration || NaN;\n        };\n        /**\n         * Get the current width of the HTML5 media element.\n         *\n         * @return {number}\n         *         The width of the HTML5 media element.\n         */\n\n\n        Html5.prototype.width = function width() {\n          return this.el_.offsetWidth;\n        };\n        /**\n         * Get the current height of the HTML5 media element.\n         *\n         * @return {number}\n         *         The heigth of the HTML5 media element.\n         */\n\n\n        Html5.prototype.height = function height() {\n          return this.el_.offsetHeight;\n        };\n        /**\n         * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\n         * `fullscreenchange` event.\n         *\n         * @private\n         * @fires fullscreenchange\n         * @listens webkitendfullscreen\n         * @listens webkitbeginfullscreen\n         * @listens webkitbeginfullscreen\n         */\n\n\n        Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {\n          var _this5 = this;\n\n          if (!('webkitDisplayingFullscreen' in this.el_)) {\n            return;\n          }\n\n          var endFn = function endFn() {\n            this.trigger('fullscreenchange', {\n              isFullscreen: false\n            });\n          };\n\n          var beginFn = function beginFn() {\n            this.one('webkitendfullscreen', endFn);\n            this.trigger('fullscreenchange', {\n              isFullscreen: true\n            });\n          };\n\n          this.on('webkitbeginfullscreen', beginFn);\n          this.on('dispose', function () {\n            _this5.off('webkitbeginfullscreen', beginFn);\n\n            _this5.off('webkitendfullscreen', endFn);\n          });\n        };\n        /**\n         * Check if fullscreen is supported on the current playback device.\n         *\n         * @return {boolean}\n         *         - True if fullscreen is supported.\n         *         - False if fullscreen is not supported.\n         */\n\n\n        Html5.prototype.supportsFullScreen = function supportsFullScreen() {\n          if (typeof this.el_.webkitEnterFullScreen === 'function') {\n            var userAgent = _window2['default'].navigator && _window2['default'].navigator.userAgent || ''; // Seems to be broken in Chromium/Chrome && Safari in Leopard\n\n            if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {\n              return true;\n            }\n          }\n\n          return false;\n        };\n        /**\n         * Request that the `HTML5` Tech enter fullscreen.\n         */\n\n\n        Html5.prototype.enterFullScreen = function enterFullScreen() {\n          var video = this.el_;\n\n          if (video.paused && video.networkState <= video.HAVE_METADATA) {\n            // attempt to prime the video element for programmatic access\n            // this isn't necessary on the desktop but shouldn't hurt\n            this.el_.play(); // playing and pausing synchronously during the transition to fullscreen\n            // can get iOS ~6.1 devices into a play/pause loop\n\n            this.setTimeout(function () {\n              video.pause();\n              video.webkitEnterFullScreen();\n            }, 0);\n          } else {\n            video.webkitEnterFullScreen();\n          }\n        };\n        /**\n         * Request that the `HTML5` Tech exit fullscreen.\n         */\n\n\n        Html5.prototype.exitFullScreen = function exitFullScreen() {\n          this.el_.webkitExitFullScreen();\n        };\n        /**\n         * A getter/setter for the `Html5` Tech's source object.\n         * > Note: Please use {@link Html5#setSource}\n         *\n         * @param {Tech~SourceObject} [src]\n         *        The source object you want to set on the `HTML5` techs element.\n         *\n         * @return {Tech~SourceObject|undefined}\n         *         - The current source object when a source is not passed in.\n         *         - undefined when setting\n         *\n         * @deprecated Since version 5.\n         */\n\n\n        Html5.prototype.src = function src(_src) {\n          if (_src === undefined) {\n            return this.el_.src;\n          } // Setting src through `src` instead of `setSrc` will be deprecated\n\n\n          this.setSrc(_src);\n        };\n        /**\n         * Reset the tech by removing all sources and then calling\n         * {@link Html5.resetMediaElement}.\n         */\n\n\n        Html5.prototype.reset = function reset() {\n          Html5.resetMediaElement(this.el_);\n        };\n        /**\n         * Get the current source on the `HTML5` Tech. Falls back to returning the source from\n         * the HTML5 media element.\n         *\n         * @return {Tech~SourceObject}\n         *         The current source object from the HTML5 tech. With a fallback to the\n         *         elements source.\n         */\n\n\n        Html5.prototype.currentSrc = function currentSrc() {\n          if (this.currentSource_) {\n            return this.currentSource_.src;\n          }\n\n          return this.el_.currentSrc;\n        };\n        /**\n         * Set controls attribute for the HTML5 media Element.\n         *\n         * @param {string} val\n         *        Value to set the controls attribute to\n         */\n\n\n        Html5.prototype.setControls = function setControls(val) {\n          this.el_.controls = !!val;\n        };\n        /**\n         * Create and returns a remote {@link TextTrack} object.\n         *\n         * @param {string} kind\n         *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n         *\n         * @param {string} [label]\n         *        Label to identify the text track\n         *\n         * @param {string} [language]\n         *        Two letter language abbreviation\n         *\n         * @return {TextTrack}\n         *         The TextTrack that gets created.\n         */\n\n\n        Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n          if (!this.featuresNativeTextTracks) {\n            return _Tech.prototype.addTextTrack.call(this, kind, label, language);\n          }\n\n          return this.el_.addTextTrack(kind, label, language);\n        };\n        /**\n         * Creates either native TextTrack or an emulated TextTrack depending\n         * on the value of `featuresNativeTextTracks`\n         *\n         * @param {Object} options\n         *        The object should contain the options to intialize the TextTrack with.\n         *\n         * @param {string} [options.kind]\n         *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n         *\n         * @param {string} [options.label].\n         *        Label to identify the text track\n         *\n         * @param {string} [options.language]\n         *        Two letter language abbreviation.\n         *\n         * @param {boolean} [options.default]\n         *        Default this track to on.\n         *\n         * @param {string} [options.id]\n         *        The internal id to assign this track.\n         *\n         * @param {string} [options.src]\n         *        A source url for the track.\n         *\n         * @return {HTMLTrackElement}\n         *         The track element that gets created.\n         */\n\n\n        Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {\n          if (!this.featuresNativeTextTracks) {\n            return _Tech.prototype.createRemoteTextTrack.call(this, options);\n          }\n\n          var htmlTrackElement = _document2['default'].createElement('track');\n\n          if (options.kind) {\n            htmlTrackElement.kind = options.kind;\n          }\n\n          if (options.label) {\n            htmlTrackElement.label = options.label;\n          }\n\n          if (options.language || options.srclang) {\n            htmlTrackElement.srclang = options.language || options.srclang;\n          }\n\n          if (options['default']) {\n            htmlTrackElement['default'] = options['default'];\n          }\n\n          if (options.id) {\n            htmlTrackElement.id = options.id;\n          }\n\n          if (options.src) {\n            htmlTrackElement.src = options.src;\n          }\n\n          return htmlTrackElement;\n        };\n        /**\n         * Creates a remote text track object and returns an html track element.\n         *\n         * @param {Object} options The object should contain values for\n         * kind, language, label, and src (location of the WebVTT file)\n         * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be\n         * automatically removed from the video element whenever the source changes\n         * @return {HTMLTrackElement} An Html Track Element.\n         * This can be an emulated {@link HTMLTrackElement} or a native one.\n         * @deprecated The default value of the \"manualCleanup\" parameter will default\n         * to \"false\" in upcoming versions of Video.js\n         */\n\n\n        Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n          var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);\n\n          if (this.featuresNativeTextTracks) {\n            this.el().appendChild(htmlTrackElement);\n          }\n\n          return htmlTrackElement;\n        };\n        /**\n         * Remove remote `TextTrack` from `TextTrackList` object\n         *\n         * @param {TextTrack} track\n         *        `TextTrack` object to remove\n         */\n\n\n        Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n          _Tech.prototype.removeRemoteTextTrack.call(this, track);\n\n          if (this.featuresNativeTextTracks) {\n            var tracks = this.$$('track');\n            var i = tracks.length;\n\n            while (i--) {\n              if (track === tracks[i] || track === tracks[i].track) {\n                this.el().removeChild(tracks[i]);\n              }\n            }\n          }\n        };\n\n        return Html5;\n      }(_tech2['default']);\n      /* HTML5 Support Testing ---------------------------------------------------- */\n\n      /**\n       * Element for testing browser HTML5 media capabilities\n       *\n       * @type {Element}\n       * @constant\n       * @private\n       */\n\n\n      Html5.TEST_VID = _document2['default'].createElement('video');\n\n      var track = _document2['default'].createElement('track');\n\n      track.kind = 'captions';\n      track.srclang = 'en';\n      track.label = 'English';\n      Html5.TEST_VID.appendChild(track);\n      /**\n       * Check if HTML5 media is supported by this browser/device.\n       *\n       * @return {boolean}\n       *         - True if HTML5 media is supported.\n       *         - False if HTML5 media is not supported.\n       */\n\n      Html5.isSupported = function () {\n        // IE9 with no Media Player is a LIAR! (#984)\n        try {\n          Html5.TEST_VID.volume = 0.5;\n        } catch (e) {\n          return false;\n        }\n\n        return !!Html5.TEST_VID.canPlayType;\n      };\n      /**\n       * Check if the volume can be changed in this browser/device.\n       * Volume cannot be changed in a lot of mobile devices.\n       * Specifically, it can't be changed from 1 on iOS.\n       *\n       * @return {boolean}\n       *         - True if volume can be controlled\n       *         - False otherwise\n       */\n\n\n      Html5.canControlVolume = function () {\n        // IE will error if Windows Media Player not installed #3315\n        try {\n          var volume = Html5.TEST_VID.volume;\n          Html5.TEST_VID.volume = volume / 2 + 0.1;\n          return volume !== Html5.TEST_VID.volume;\n        } catch (e) {\n          return false;\n        }\n      };\n      /**\n       * Check if the playback rate can be changed in this browser/device.\n       *\n       * @return {boolean}\n       *         - True if playback rate can be controlled\n       *         - False otherwise\n       */\n\n\n      Html5.canControlPlaybackRate = function () {\n        // Playback rate API is implemented in Android Chrome, but doesn't do anything\n        // https://github.com/videojs/video.js/issues/3180\n        if (browser.IS_ANDROID && browser.IS_CHROME) {\n          return false;\n        } // IE will error if Windows Media Player not installed #3315\n\n\n        try {\n          var playbackRate = Html5.TEST_VID.playbackRate;\n          Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\n          return playbackRate !== Html5.TEST_VID.playbackRate;\n        } catch (e) {\n          return false;\n        }\n      };\n      /**\n       * Check to see if native `TextTrack`s are supported by this browser/device.\n       *\n       * @return {boolean}\n       *         - True if native `TextTrack`s are supported.\n       *         - False otherwise\n       */\n\n\n      Html5.supportsNativeTextTracks = function () {\n        return browser.IS_ANY_SAFARI;\n      };\n      /**\n       * Check to see if native `VideoTrack`s are supported by this browser/device\n       *\n       * @return {boolean}\n       *        - True if native `VideoTrack`s are supported.\n       *        - False otherwise\n       */\n\n\n      Html5.supportsNativeVideoTracks = function () {\n        var supportsVideoTracks = !!Html5.TEST_VID.videoTracks;\n        return supportsVideoTracks;\n      };\n      /**\n       * Check to see if native `AudioTrack`s are supported by this browser/device\n       *\n       * @return {boolean}\n       *        - True if native `AudioTrack`s are supported.\n       *        - False otherwise\n       */\n\n\n      Html5.supportsNativeAudioTracks = function () {\n        var supportsAudioTracks = !!Html5.TEST_VID.audioTracks;\n        return supportsAudioTracks;\n      };\n      /**\n       * An array of events available on the Html5 tech.\n       *\n       * @private\n       * @type {Array}\n       */\n\n\n      Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'volumechange'];\n      /**\n       * Boolean indicating whether the `Tech` supports volume control.\n       *\n       * @type {boolean}\n       * @default {@link Html5.canControlVolume}\n       */\n\n      Html5.prototype.featuresVolumeControl = Html5.canControlVolume();\n      /**\n       * Boolean indicating whether the `Tech` supports changing the speed at which the media\n       * plays. Examples:\n       *   - Set player to play 2x (twice) as fast\n       *   - Set player to play 0.5x (half) as fast\n       *\n       * @type {boolean}\n       * @default {@link Html5.canControlPlaybackRate}\n       */\n\n      Html5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();\n      /**\n       * Boolean indicating whether the `HTML5` tech currently supports the media element\n       * moving in the DOM. iOS breaks if you move the media element, so this is set this to\n       * false there. Everywhere else this should be true.\n       *\n       * @type {boolean}\n       * @default\n       */\n\n      Html5.prototype.movingMediaElementInDOM = !browser.IS_IOS; // TODO: Previous comment: No longer appears to be used. Can probably be removed.\n      //       Is this true?\n\n      /**\n       * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\n       * when going into fullscreen.\n       *\n       * @type {boolean}\n       * @default\n       */\n\n      Html5.prototype.featuresFullscreenResize = true;\n      /**\n       * Boolean indicating whether the `HTML5` tech currently supports the progress event.\n       * If this is false, manual `progress` events will be triggred instead.\n       *\n       * @type {boolean}\n       * @default\n       */\n\n      Html5.prototype.featuresProgressEvents = true;\n      /**\n       * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\n       * If this is false, manual `timeupdate` events will be triggred instead.\n       *\n       * @default\n       */\n\n      Html5.prototype.featuresTimeupdateEvents = true;\n      /**\n       * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\n       *\n       * @type {boolean}\n       * @default {@link Html5.supportsNativeTextTracks}\n       */\n\n      Html5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();\n      /**\n       * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\n       *\n       * @type {boolean}\n       * @default {@link Html5.supportsNativeVideoTracks}\n       */\n\n      Html5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();\n      /**\n       * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\n       *\n       * @type {boolean}\n       * @default {@link Html5.supportsNativeAudioTracks}\n       */\n\n      Html5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks(); // HTML5 Feature detection and Device Fixes --------------------------------- //\n\n      var canPlayType = void 0;\n      var mpegurlRE = /^application\\/(?:x-|vnd\\.apple\\.)mpegurl/i;\n      var mp4RE = /^video\\/mp4/i;\n\n      Html5.patchCanPlayType = function () {\n        // Android 4.0 and above can play HLS to some extent but it reports being unable to do so\n        if (browser.ANDROID_VERSION >= 4.0 && !browser.IS_FIREFOX) {\n          if (!canPlayType) {\n            canPlayType = Html5.TEST_VID.constructor.prototype.canPlayType;\n          }\n\n          Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n            if (type && mpegurlRE.test(type)) {\n              return 'maybe';\n            }\n\n            return canPlayType.call(this, type);\n          };\n        } // Override Android 2.2 and less canPlayType method which is broken\n\n\n        if (browser.IS_OLD_ANDROID) {\n          if (!canPlayType) {\n            canPlayType = Html5.TEST_VID.constructor.prototype.canPlayType;\n          }\n\n          Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n            if (type && mp4RE.test(type)) {\n              return 'maybe';\n            }\n\n            return canPlayType.call(this, type);\n          };\n        }\n      };\n\n      Html5.unpatchCanPlayType = function () {\n        var r = Html5.TEST_VID.constructor.prototype.canPlayType;\n        Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;\n        canPlayType = null;\n        return r;\n      }; // by default, patch the media element\n\n\n      Html5.patchCanPlayType();\n\n      Html5.disposeMediaElement = function (el) {\n        if (!el) {\n          return;\n        }\n\n        if (el.parentNode) {\n          el.parentNode.removeChild(el);\n        } // remove any child track or source nodes to prevent their loading\n\n\n        while (el.hasChildNodes()) {\n          el.removeChild(el.firstChild);\n        } // remove any src reference. not setting `src=''` because that causes a warning\n        // in firefox\n\n\n        el.removeAttribute('src'); // force the media element to update its loading state by calling load()\n        // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\n\n        if (typeof el.load === 'function') {\n          // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n          (function () {\n            try {\n              el.load();\n            } catch (e) {// not supported\n            }\n          })();\n        }\n      };\n\n      Html5.resetMediaElement = function (el) {\n        if (!el) {\n          return;\n        }\n\n        var sources = el.querySelectorAll('source');\n        var i = sources.length;\n\n        while (i--) {\n          el.removeChild(sources[i]);\n        } // remove any src reference.\n        // not setting `src=''` because that throws an error\n\n\n        el.removeAttribute('src');\n\n        if (typeof el.load === 'function') {\n          // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n          (function () {\n            try {\n              el.load();\n            } catch (e) {// satisfy linter\n            }\n          })();\n        }\n      };\n      /* Native HTML5 element property wrapping ----------------------------------- */\n      // Wrap native properties with a getter\n\n\n      [\n      /**\n       * Get the value of `paused` from the media element. `paused` indicates whether the media element\n       * is currently paused or not.\n       *\n       * @method Html5.prototype.paused\n       * @return {boolean}\n       *         The value of `paused` from the media element.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\n       */\n      'paused',\n      /**\n       * Get the value of `currentTime` from the media element. `currentTime` indicates\n       * the current second that the media is at in playback.\n       *\n       * @method Html5.prototype.currentTime\n       * @return {number}\n       *         The value of `currentTime` from the media element.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\n       */\n      'currentTime',\n      /**\n       * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\n       * object that represents the parts of the media that are already downloaded and\n       * available for playback.\n       *\n       * @method Html5.prototype.buffered\n       * @return {TimeRange}\n       *         The value of `buffered` from the media element.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\n       */\n      'buffered',\n      /**\n       * Get the value of `volume` from the media element. `volume` indicates\n       * the current playback volume of audio for a media. `volume` will be a value from 0\n       * (silent) to 1 (loudest and default).\n       *\n       * @method Html5.prototype.volume\n       * @return {number}\n       *         The value of `volume` from the media element. Value will be between 0-1.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n       */\n      'volume',\n      /**\n       * Get the value of `muted` from the media element. `muted` indicates\n       * that the volume for the media should be set to silent. This does not actually change\n       * the `volume` attribute.\n       *\n       * @method Html5.prototype.muted\n       * @return {boolean}\n       *         - True if the value of `volume` should be ignored and the audio set to silent.\n       *         - False if the value of `volume` should be used.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n       */\n      'muted',\n      /**\n       * Get the value of `poster` from the media element. `poster` indicates\n       * that the url of an image file that can/will be shown when no media data is available.\n       *\n       * @method Html5.prototype.poster\n       * @return {string}\n       *         The value of `poster` from the media element. Value will be a url to an\n       *         image.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\n       */\n      'poster',\n      /**\n       * Get the value of `preload` from the media element. `preload` indicates\n       * what should download before the media is interacted with. It can have the following\n       * values:\n       * - none: nothing should be downloaded\n       * - metadata: poster and the first few frames of the media may be downloaded to get\n       *   media dimensions and other metadata\n       * - auto: allow the media and metadata for the media to be downloaded before\n       *    interaction\n       *\n       * @method Html5.prototype.preload\n       * @return {string}\n       *         The value of `preload` from the media element. Will be 'none', 'metadata',\n       *         or 'auto'.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n       */\n      'preload',\n      /**\n       * Get the value of `autoplay` from the media element. `autoplay` indicates\n       * that the media should start to play as soon as the page is ready.\n       *\n       * @method Html5.prototype.autoplay\n       * @return {boolean}\n       *         - The value of `autoplay` from the media element.\n       *         - True indicates that the media should start as soon as the page loads.\n       *         - False indicates that the media should not start as soon as the page loads.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n       */\n      'autoplay',\n      /**\n       * Get the value of `controls` from the media element. `controls` indicates\n       * whether the native media controls should be shown or hidden.\n       *\n       * @method Html5.prototype.controls\n       * @return {boolean}\n       *         - The value of `controls` from the media element.\n       *         - True indicates that native controls should be showing.\n       *         - False indicates that native controls should be hidden.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\n       */\n      'controls',\n      /**\n       * Get the value of `loop` from the media element. `loop` indicates\n       * that the media should return to the start of the media and continue playing once\n       * it reaches the end.\n       *\n       * @method Html5.prototype.loop\n       * @return {boolean}\n       *         - The value of `loop` from the media element.\n       *         - True indicates that playback should seek back to start once\n       *           the end of a media is reached.\n       *         - False indicates that playback should not loop back to the start when the\n       *           end of the media is reached.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n       */\n      'loop',\n      /**\n       * Get the value of the `error` from the media element. `error` indicates any\n       * MediaError that may have occured during playback. If error returns null there is no\n       * current error.\n       *\n       * @method Html5.prototype.error\n       * @return {MediaError|null}\n       *         The value of `error` from the media element. Will be `MediaError` if there\n       *         is a current error and null otherwise.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\n       */\n      'error',\n      /**\n       * Get the value of `seeking` from the media element. `seeking` indicates whether the\n       * media is currently seeking to a new position or not.\n       *\n       * @method Html5.prototype.seeking\n       * @return {boolean}\n       *         - The value of `seeking` from the media element.\n       *         - True indicates that the media is currently seeking to a new position.\n       *         - Flase indicates that the media is not seeking to a new position at this time.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\n       */\n      'seeking',\n      /**\n       * Get the value of `seekable` from the media element. `seekable` returns a\n       * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\n       *\n       * @method Html5.prototype.seekable\n       * @return {TimeRange}\n       *         The value of `seekable` from the media element. A `TimeRange` object\n       *         indicating the current ranges of time that can be seeked to.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\n       */\n      'seekable',\n      /**\n       * Get the value of `ended` from the media element. `ended` indicates whether\n       * the media has reached the end or not.\n       *\n       * @method Html5.prototype.ended\n       * @return {boolean}\n       *         - The value of `ended` from the media element.\n       *         - True indicates that the media has ended.\n       *         - False indicates that the media has not ended.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n       */\n      'ended',\n      /**\n       * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\n       * whether the media should start muted or not. Only changes the default state of the\n       * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n       * current state.\n       *\n       * @method Html5.prototype.defaultMuted\n       * @return {boolean}\n       *         - The value of `defaultMuted` from the media element.\n       *         - True indicates that the media should start muted.\n       *         - False indicates that the media should not start muted\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n       */\n      'defaultMuted',\n      /**\n       * Get the value of `playbackRate` from the media element. `playbackRate` indicates\n       * the rate at which the media is currently playing back. Examples:\n       *   - if playbackRate is set to 2, media will play twice as fast.\n       *   - if playbackRate is set to 0.5, media will play half as fast.\n       *\n       * @method Html5.prototype.playbackRate\n       * @return {number}\n       *         The value of `playbackRate` from the media element. A number indicating\n       *         the current playback speed of the media, where 1 is normal speed.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n       */\n      'playbackRate',\n      /**\n       * Get the value of `played` from the media element. `played` returns a `TimeRange`\n       * object representing points in the media timeline that have been played.\n       *\n       * @method Html5.prototype.played\n       * @return {TimeRange}\n       *         The value of `played` from the media element. A `TimeRange` object indicating\n       *         the ranges of time that have been played.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\n       */\n      'played',\n      /**\n       * Get the value of `networkState` from the media element. `networkState` indicates\n       * the current network state. It returns an enumeration from the following list:\n       * - 0: NETWORK_EMPTY\n       * - 1: NEWORK_IDLE\n       * - 2: NETWORK_LOADING\n       * - 3: NETWORK_NO_SOURCE\n       *\n       * @method Html5.prototype.networkState\n       * @return {number}\n       *         The value of `networkState` from the media element. This will be a number\n       *         from the list in the description.\n       *\n       * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\n       */\n      'networkState',\n      /**\n       * Get the value of `readyState` from the media element. `readyState` indicates\n       * the current state of the media element. It returns an enumeration from the\n       * following list:\n       * - 0: HAVE_NOTHING\n       * - 1: HAVE_METADATA\n       * - 2: HAVE_CURRENT_DATA\n       * - 3: HAVE_FUTURE_DATA\n       * - 4: HAVE_ENOUGH_DATA\n       *\n       * @method Html5.prototype.readyState\n       * @return {number}\n       *         The value of `readyState` from the media element. This will be a number\n       *         from the list in the description.\n       *\n       * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\n       */\n      'readyState',\n      /**\n       * Get the value of `videoWidth` from the video element. `videoWidth` indicates\n       * the current width of the video in css pixels.\n       *\n       * @method Html5.prototype.videoWidth\n       * @return {number}\n       *         The value of `videoWidth` from the video element. This will be a number\n       *         in css pixels.\n       *\n       * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n       */\n      'videoWidth',\n      /**\n       * Get the value of `videoHeight` from the video element. `videoHeigth` indicates\n       * the current height of the video in css pixels.\n       *\n       * @method Html5.prototype.videoHeight\n       * @return {number}\n       *         The value of `videoHeight` from the video element. This will be a number\n       *         in css pixels.\n       *\n       * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n       */\n      'videoHeight'].forEach(function (prop) {\n        Html5.prototype[prop] = function () {\n          return this.el_[prop];\n        };\n      }); // Wrap native properties with a setter in this format:\n      // set + toTitleCase(name)\n\n      [\n      /**\n       * Set the value of `volume` on the media element. `volume` indicates the current\n       * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n       * so on.\n       *\n       * @method Html5.prototype.setVolume\n       * @param {number} percentAsDecimal\n       *        The volume percent as a decimal. Valid range is from 0-1.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n       */\n      'volume',\n      /**\n       * Set the value of `muted` on the media element. `muted` indicates the current\n       * audio level should be silent.\n       *\n       * @method Html5.prototype.setMuted\n       * @param {boolean} muted\n       *        - True if the audio should be set to silent\n       *        - False otherwise\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n       */\n      'muted',\n      /**\n       * Set the value of `src` on the media element. `src` indicates the current\n       * {@link Tech~SourceObject} for the media.\n       *\n       * @method Html5.prototype.setSrc\n       * @param {Tech~SourceObject} src\n       *        The source object to set as the current source.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\n       */\n      'src',\n      /**\n       * Set the value of `poster` on the media element. `poster` is the url to\n       * an image file that can/will be shown when no media data is available.\n       *\n       * @method Html5.prototype.setPoster\n       * @param {string} poster\n       *        The url to an image that should be used as the `poster` for the media\n       *        element.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\n       */\n      'poster',\n      /**\n       * Set the value of `preload` on the media element. `preload` indicates\n       * what should download before the media is interacted with. It can have the following\n       * values:\n       * - none: nothing should be downloaded\n       * - metadata: poster and the first few frames of the media may be downloaded to get\n       *   media dimensions and other metadata\n       * - auto: allow the media and metadata for the media to be downloaded before\n       *    interaction\n       *\n       * @method Html5.prototype.setPreload\n       * @param {string} preload\n       *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\n       *         or 'auto'.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n       */\n      'preload',\n      /**\n       * Set the value of `autoplay` on the media element. `autoplay` indicates\n       * that the media should start to play as soon as the page is ready.\n       *\n       * @method Html5.prototype.setAutoplay\n       * @param {boolean} autoplay\n       *         - True indicates that the media should start as soon as the page loads.\n       *         - False indicates that the media should not start as soon as the page loads.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n       */\n      'autoplay',\n      /**\n       * Set the value of `loop` on the media element. `loop` indicates\n       * that the media should return to the start of the media and continue playing once\n       * it reaches the end.\n       *\n       * @method Html5.prototype.setLoop\n       * @param {boolean} loop\n       *         - True indicates that playback should seek back to start once\n       *           the end of a media is reached.\n       *         - False indicates that playback should not loop back to the start when the\n       *           end of the media is reached.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n       */\n      'loop',\n      /**\n       * Set the value of `playbackRate` on the media element. `playbackRate` indicates\n       * the rate at which the media should play back. Examples:\n       *   - if playbackRate is set to 2, media will play twice as fast.\n       *   - if playbackRate is set to 0.5, media will play half as fast.\n       *\n       * @method Html5.prototype.setPlaybackRate\n       * @return {number}\n       *         The value of `playbackRate` from the media element. A number indicating\n       *         the current playback speed of the media, where 1 is normal speed.\n       *\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n       */\n      'playbackRate'].forEach(function (prop) {\n        Html5.prototype['set' + (0, _toTitleCase2['default'])(prop)] = function (v) {\n          this.el_[prop] = v;\n        };\n      }); // wrap native functions with a function\n\n      [\n      /**\n       * A wrapper around the media elements `pause` function. This will call the `HTML5`\n       * media elements `pause` function.\n       *\n       * @method Html5.prototype.pause\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\n       */\n      'pause',\n      /**\n       * A wrapper around the media elements `load` function. This will call the `HTML5`s\n       * media element `load` function.\n       *\n       * @method Html5.prototype.load\n       * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\n       */\n      'load'].forEach(function (prop) {\n        Html5.prototype[prop] = function () {\n          return this.el_[prop]();\n        };\n      });\n\n      _tech2['default'].withSourceHandlers(Html5);\n      /**\n       * Native source handler for Html5, simply passes the source to the media element.\n       *\n       * @proprety {Tech~SourceObject} source\n       *        The source object\n       *\n       * @proprety {Html5} tech\n       *        The instance of the HTML5 tech.\n       */\n\n\n      Html5.nativeSourceHandler = {};\n      /**\n       * Check if the media element can play the given mime type.\n       *\n       * @param {string} type\n       *        The mimetype to check\n       *\n       * @return {string}\n       *         'probably', 'maybe', or '' (empty string)\n       */\n\n      Html5.nativeSourceHandler.canPlayType = function (type) {\n        // IE9 on Windows 7 without MediaPlayer throws an error here\n        // https://github.com/videojs/video.js/issues/519\n        try {\n          return Html5.TEST_VID.canPlayType(type);\n        } catch (e) {\n          return '';\n        }\n      };\n      /**\n       * Check if the media element can handle a source natively.\n       *\n       * @param {Tech~SourceObject} source\n       *         The source object\n       *\n       * @param {Object} [options]\n       *         Options to be passed to the tech.\n       *\n       * @return {string}\n       *         'probably', 'maybe', or '' (empty string).\n       */\n\n\n      Html5.nativeSourceHandler.canHandleSource = function (source, options) {\n        // If a type was provided we should rely on that\n        if (source.type) {\n          return Html5.nativeSourceHandler.canPlayType(source.type); // If no type, fall back to checking 'video/[EXTENSION]'\n        } else if (source.src) {\n          var ext = Url.getFileExtension(source.src);\n          return Html5.nativeSourceHandler.canPlayType('video/' + ext);\n        }\n\n        return '';\n      };\n      /**\n       * Pass the source to the native media element.\n       *\n       * @param {Tech~SourceObject} source\n       *        The source object\n       *\n       * @param {Html5} tech\n       *        The instance of the Html5 tech\n       *\n       * @param {Object} [options]\n       *        The options to pass to the source\n       */\n\n\n      Html5.nativeSourceHandler.handleSource = function (source, tech, options) {\n        tech.setSrc(source.src);\n      };\n      /**\n       * A noop for the native dispose function, as cleanup is not needed.\n       */\n\n\n      Html5.nativeSourceHandler.dispose = function () {}; // Register the native source handler\n\n\n      Html5.registerSourceHandler(Html5.nativeSourceHandler);\n\n      _component2['default'].registerComponent('Html5', Html5);\n\n      _tech2['default'].registerTech('Html5', Html5);\n\n      exports['default'] = Html5;\n      /***/\n    },\n    /* 104 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _player = __webpack_require__(21);\n\n      var _player2 = _interopRequireDefault(_player);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n      /**\n       *\n       */\n\n      /**\n       * The method for registering a video.js plugin. {@link videojs:videojs.registerPlugin].\n       *\n       * @param {string} name\n       *        The name of the plugin that is being registered\n       *\n       * @param {plugins:PluginFn} init\n       *        The function that gets run when a `Player` initializes.\n       */\n\n\n      var plugin = function plugin(name, init) {\n        _player2['default'].prototype[name] = init;\n      };\n      /**\n       * @file plugins.js\n       * @module plugins\n       */\n\n\n      exports['default'] = plugin;\n      /***/\n    },\n    /* 105 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _trackEnums = __webpack_require__(33);\n\n      var _track = __webpack_require__(34);\n\n      var _track2 = _interopRequireDefault(_track);\n\n      var _mergeOptions = __webpack_require__(19);\n\n      var _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}\n       * only one `AudioTrack` in the list will be enabled at a time.\n       *\n       * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}\n       * @extends Track\n       */\n\n\n      var AudioTrack = function (_Track) {\n        _inherits(AudioTrack, _Track);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {Object} [options={}]\n         *        Object of option names and values\n         *\n         * @param {AudioTrack~Kind} [options.kind='']\n         *        A valid audio track kind\n         *\n         * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n         *        A unique id for this AudioTrack.\n         *\n         * @param {string} [options.label='']\n         *        The menu label for this track.\n         *\n         * @param {string} [options.language='']\n         *        A valid two character language code.\n         *\n         * @param {boolean} [options.enabled]\n         *        If this track is the one that is currently playing. If this track is part of\n         *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.\n         */\n\n\n        function AudioTrack() {\n          var _this, _ret;\n\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n          _classCallCheck(this, AudioTrack);\n\n          var settings = (0, _mergeOptions2['default'])(options, {\n            kind: _trackEnums.AudioTrackKind[options.kind] || ''\n          }); // on IE8 this will be a document element\n          // for every other browser this will be a normal object\n\n          var track = (_this = _possibleConstructorReturn(this, _Track.call(this, settings)), _this);\n          var enabled = false;\n\n          if (browser.IS_IE8) {\n            for (var prop in AudioTrack.prototype) {\n              if (prop !== 'constructor') {\n                track[prop] = AudioTrack.prototype[prop];\n              }\n            }\n          }\n          /**\n           * @member {boolean} enabled\n           *         If this `AudioTrack` is enabled or not. When setting this will\n           *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.\n           *\n           * @fires VideoTrack#selectedchange\n           */\n\n\n          Object.defineProperty(track, 'enabled', {\n            get: function get() {\n              return enabled;\n            },\n            set: function set(newEnabled) {\n              // an invalid or unchanged value\n              if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {\n                return;\n              }\n\n              enabled = newEnabled;\n              /**\n               * An event that fires when enabled changes on this track. This allows\n               * the AudioTrackList that holds this track to act accordingly.\n               *\n               * > Note: This is not part of the spec! Native tracks will do\n               *         this internally without an event.\n               *\n               * @event AudioTrack#enabledchange\n               * @type {EventTarget~Event}\n               */\n\n              this.trigger('enabledchange');\n            }\n          }); // if the user sets this track to selected then\n          // set selected to that true value otherwise\n          // we keep it false\n\n          if (settings.enabled) {\n            track.enabled = settings.enabled;\n          }\n\n          track.loaded_ = true;\n          return _ret = track, _possibleConstructorReturn(_this, _ret);\n        }\n\n        return AudioTrack;\n      }(_track2['default']);\n\n      exports['default'] = AudioTrack;\n      /***/\n    },\n    /* 106 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _trackEnums = __webpack_require__(33);\n\n      var _track = __webpack_require__(34);\n\n      var _track2 = _interopRequireDefault(_track);\n\n      var _mergeOptions = __webpack_require__(19);\n\n      var _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\n      var _browser = __webpack_require__(12);\n\n      var browser = _interopRequireWildcard(_browser);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * A representation of a single `VideoTrack`.\n       *\n       * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}\n       * @extends Track\n       */\n\n\n      var VideoTrack = function (_Track) {\n        _inherits(VideoTrack, _Track);\n        /**\n         * Create an instance of this class.\n         *\n         * @param {Object} [options={}]\n         *        Object of option names and values\n         *\n         * @param {string} [options.kind='']\n         *        A valid {@link VideoTrack~Kind}\n         *\n         * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n         *        A unique id for this AudioTrack.\n         *\n         * @param {string} [options.label='']\n         *        The menu label for this track.\n         *\n         * @param {string} [options.language='']\n         *        A valid two character language code.\n         *\n         * @param {boolean} [options.selected]\n         *        If this track is the one that is currently playing.\n         */\n\n\n        function VideoTrack() {\n          var _this, _ret;\n\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n          _classCallCheck(this, VideoTrack);\n\n          var settings = (0, _mergeOptions2['default'])(options, {\n            kind: _trackEnums.VideoTrackKind[options.kind] || ''\n          }); // on IE8 this will be a document element\n          // for every other browser this will be a normal object\n\n          var track = (_this = _possibleConstructorReturn(this, _Track.call(this, settings)), _this);\n          var selected = false;\n\n          if (browser.IS_IE8) {\n            for (var prop in VideoTrack.prototype) {\n              if (prop !== 'constructor') {\n                track[prop] = VideoTrack.prototype[prop];\n              }\n            }\n          }\n          /**\n           * @member {boolean} selected\n           *         If this `VideoTrack` is selected or not. When setting this will\n           *         fire {@link VideoTrack#selectedchange} if the state of selected changed.\n           *\n           * @fires VideoTrack#selectedchange\n           */\n\n\n          Object.defineProperty(track, 'selected', {\n            get: function get() {\n              return selected;\n            },\n            set: function set(newSelected) {\n              // an invalid or unchanged value\n              if (typeof newSelected !== 'boolean' || newSelected === selected) {\n                return;\n              }\n\n              selected = newSelected;\n              /**\n               * An event that fires when selected changes on this track. This allows\n               * the VideoTrackList that holds this track to act accordingly.\n               *\n               * > Note: This is not part of the spec! Native tracks will do\n               *         this internally without an event.\n               *\n               * @event VideoTrack#selectedchange\n               * @type {EventTarget~Event}\n               */\n\n              this.trigger('selectedchange');\n            }\n          }); // if the user sets this track to selected then\n          // set selected to that true value otherwise\n          // we keep it false\n\n          if (settings.selected) {\n            track.selected = settings.selected;\n          }\n\n          return _ret = track, _possibleConstructorReturn(_this, _ret);\n        }\n\n        return VideoTrack;\n      }(_track2['default']);\n\n      exports['default'] = VideoTrack;\n      /***/\n    },\n    /* 107 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      var _log = __webpack_require__(11);\n\n      var _log2 = _interopRequireDefault(_log);\n\n      var _obj = __webpack_require__(13);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n      /*\n       * @file extend.js\n       *\n       * A combination of node inherits and babel's inherits (after transpile).\n       * Both work the same but node adds `super_` to the subClass\n       * and Bable adds the superClass as __proto__. Both seem useful.\n       */\n\n\n      var _inherits = function _inherits(subClass, superClass) {\n        if (typeof superClass !== 'function' && superClass !== null) {\n          throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n\n        if (superClass) {\n          // node\n          subClass.super_ = superClass;\n        }\n      };\n      /*\n       * Function for subclassing using the same inheritance that\n       * videojs uses internally\n       * ```js\n       * var Button = videojs.getComponent('Button');\n       * ```\n       * ```js\n       * var MyButton = videojs.extend(Button, {\n       *   constructor: function(player, options) {\n       *     Button.call(this, player, options);\n       *   },\n       *   onClick: function() {\n       *     // doSomething\n       *   }\n       * });\n       * ```\n       */\n\n\n      var extendFn = function extendFn(superClass) {\n        var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var subClass = function subClass() {\n          superClass.apply(this, arguments);\n        };\n\n        var methods = {};\n\n        if ((0, _obj.isObject)(subClassMethods)) {\n          if (typeof subClassMethods.init === 'function') {\n            _log2['default'].warn('Constructor logic via init() is deprecated; please use constructor() instead.');\n\n            subClassMethods.constructor = subClassMethods.init;\n          }\n\n          if (subClassMethods.constructor !== Object.prototype.constructor) {\n            subClass = subClassMethods.constructor;\n          }\n\n          methods = subClassMethods;\n        } else if (typeof subClassMethods === 'function') {\n          subClass = subClassMethods;\n        }\n\n        _inherits(subClass, superClass); // Extend subObj's prototype with functions and other properties from props\n\n\n        for (var name in methods) {\n          if (methods.hasOwnProperty(name)) {\n            subClass.prototype[name] = methods[name];\n          }\n        }\n\n        return subClass;\n      };\n\n      exports['default'] = extendFn;\n      /***/\n    },\n    /* 108 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n      /*!\n      Copyright (c) 2016 Jed Watson.\n      Licensed under the MIT License (MIT), see\n      http://jedwatson.github.io/classnames\n      */\n\n      /* global define */\n\n\n      (function () {\n        'use strict';\n\n        var hasOwn = {}.hasOwnProperty;\n\n        function classNames() {\n          var classes = [];\n\n          for (var i = 0; i < arguments.length; i++) {\n            var arg = arguments[i];\n            if (!arg) continue;\n            var argType = typeof arg;\n\n            if (argType === 'string' || argType === 'number') {\n              classes.push(arg);\n            } else if (Array.isArray(arg)) {\n              classes.push(classNames.apply(null, arg));\n            } else if (argType === 'object') {\n              for (var key in arg) {\n                if (hasOwn.call(arg, key) && arg[key]) {\n                  classes.push(key);\n                }\n              }\n            }\n          }\n\n          return classes.join(' ');\n        }\n\n        if (typeof module !== 'undefined' && module.exports) {\n          module.exports = classNames;\n        } else if (true) {\n          // register as 'classnames', consistent with npm package name\n          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return classNames;\n          }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        } else {\n          window.classNames = classNames;\n        }\n      })();\n      /***/\n\n    },\n    /* 109 */\n\n    /***/\n    function (module, exports) {\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var addEvent = function addEvent(elem, event, fn, binder) {\n        // avoid memory overhead of new anonymous functions for every event handler that's installed\n        // by using local functions\n        function listenHandler(e) {\n          var ret = fn.apply(binder || this, arguments);\n\n          if (ret === false) {\n            e.stopPropagation();\n            e.preventDefault();\n          }\n\n          return ret;\n        }\n\n        function attachHandler() {\n          // set the this pointer same as addEventListener when fn is called\n          // and make sure the event is passed to the fn also so that works the same too\n          var ret = fn.call(elem, window.event);\n\n          if (ret === false) {\n            window.event.returnValue = false;\n            window.event.cancelBubble = true;\n          }\n\n          return ret;\n        }\n\n        if (elem.addEventListener) {\n          elem.addEventListener(event, listenHandler, false);\n          return {\n            elem: elem,\n            handler: listenHandler,\n            event: event\n          };\n        } else {\n          elem.attachEvent('on' + event, attachHandler);\n          return {\n            elem: elem,\n            handler: attachHander,\n            event: event\n          };\n        }\n      };\n\n      exports.default = addEvent;\n      /***/\n    },\n    /* 110 */\n\n    /***/\n    function (module, exports) {\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var removeEvent = function removeEvent(token) {\n        if (token.elem.removeEventListener) {\n          token.elem.removeEventListener(token.event, token.handler);\n        } else {\n          token.elem.detachEvent('on' + token.event, token.handler);\n        }\n      };\n\n      exports.default = removeEvent;\n      /***/\n    },\n    /* 111 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      var _get = function get(object, property, receiver) {\n        if (object === null) object = Function.prototype;\n        var desc = Object.getOwnPropertyDescriptor(object, property);\n\n        if (desc === undefined) {\n          var parent = Object.getPrototypeOf(object);\n\n          if (parent === null) {\n            return undefined;\n          } else {\n            return get(parent, property, receiver);\n          }\n        } else if (\"value\" in desc) {\n          return desc.value;\n        } else {\n          var getter = desc.get;\n\n          if (getter === undefined) {\n            return undefined;\n          }\n\n          return getter.call(receiver);\n        }\n      };\n\n      var _video = __webpack_require__(3);\n\n      var _video2 = _interopRequireDefault(_video);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n\n      var Button = _video2.default.getComponent('Button');\n\n      var ZvuiBigPlayButton = function (_Button) {\n        _inherits(ZvuiBigPlayButton, _Button);\n\n        function ZvuiBigPlayButton(player, options) {\n          _classCallCheck(this, ZvuiBigPlayButton);\n\n          return _possibleConstructorReturn(this, (ZvuiBigPlayButton.__proto__ || Object.getPrototypeOf(ZvuiBigPlayButton)).call(this, player, options));\n        }\n\n        _createClass(ZvuiBigPlayButton, [{\n          key: 'createEl',\n          value: function createEl() {\n            return _get(ZvuiBigPlayButton.prototype.__proto__ || Object.getPrototypeOf(ZvuiBigPlayButton.prototype), 'createEl', this).call(this, 'button', {\n              name: 'ZvuiBigPlayButton',\n              id: 'zvui-video-pause-button',\n              className: 'zvui-video-pause-button',\n              title: 'Play Toggle',\n              role: 'button'\n            });\n          }\n        }, {\n          key: 'handleClick',\n          value: function handleClick() {\n            var player = this.player();\n            player.pause();\n          }\n        }]);\n\n        return ZvuiBigPlayButton;\n      }(Button); // ZvuiBigPlayButton.prototype.controlText_ = 'Play Toggle';\n\n\n      _video2.default.registerComponent('ZvuiBigPlayButton', ZvuiBigPlayButton);\n\n      exports.default = ZvuiBigPlayButton;\n      /***/\n    },\n    /* 112 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      var _get = function get(object, property, receiver) {\n        if (object === null) object = Function.prototype;\n        var desc = Object.getOwnPropertyDescriptor(object, property);\n\n        if (desc === undefined) {\n          var parent = Object.getPrototypeOf(object);\n\n          if (parent === null) {\n            return undefined;\n          } else {\n            return get(parent, property, receiver);\n          }\n        } else if (\"value\" in desc) {\n          return desc.value;\n        } else {\n          var getter = desc.get;\n\n          if (getter === undefined) {\n            return undefined;\n          }\n\n          return getter.call(receiver);\n        }\n      };\n\n      var _video = __webpack_require__(3);\n\n      var _video2 = _interopRequireDefault(_video);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n\n      var Button = _video2.default.getComponent('Button');\n\n      var ZvuiHDButton = function (_Button) {\n        _inherits(ZvuiHDButton, _Button);\n\n        function ZvuiHDButton(player, options) {\n          _classCallCheck(this, ZvuiHDButton);\n\n          return _possibleConstructorReturn(this, (ZvuiHDButton.__proto__ || Object.getPrototypeOf(ZvuiHDButton)).call(this, player, options));\n        }\n\n        _createClass(ZvuiHDButton, [{\n          key: 'createEl',\n          value: function createEl() {\n            return _get(ZvuiHDButton.prototype.__proto__ || Object.getPrototypeOf(ZvuiHDButton.prototype), 'createEl', this).call(this, 'button', {\n              name: 'ZvuiHDButton',\n              id: 'zvui-video-hd-button',\n              className: 'zvui-video-hd-button',\n              title: 'Show HD',\n              role: 'button'\n            });\n          }\n        }, {\n          key: 'handleClick',\n          value: function handleClick() {\n            var container = this.player();\n            var className = this.el_.className;\n\n            if (!className.includes('active')) {\n              this.addClass('active');\n            } else {\n              this.removeClass('active');\n            }\n\n            container._updateToHD();\n\n            container._player.play();\n          }\n        }]);\n\n        return ZvuiHDButton;\n      }(Button);\n\n      _video2.default.registerComponent('ZvuiHDButton', ZvuiHDButton);\n\n      exports.default = ZvuiHDButton;\n      /***/\n    },\n    /* 113 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      var _get = function get(object, property, receiver) {\n        if (object === null) object = Function.prototype;\n        var desc = Object.getOwnPropertyDescriptor(object, property);\n\n        if (desc === undefined) {\n          var parent = Object.getPrototypeOf(object);\n\n          if (parent === null) {\n            return undefined;\n          } else {\n            return get(parent, property, receiver);\n          }\n        } else if (\"value\" in desc) {\n          return desc.value;\n        } else {\n          var getter = desc.get;\n\n          if (getter === undefined) {\n            return undefined;\n          }\n\n          return getter.call(receiver);\n        }\n      };\n\n      var _video = __webpack_require__(3);\n\n      var _video2 = _interopRequireDefault(_video);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n\n      var Button = _video2.default.getComponent('Button');\n\n      var ZvuiZoomButton = function (_Button) {\n        _inherits(ZvuiZoomButton, _Button);\n\n        function ZvuiZoomButton(player, options) {\n          _classCallCheck(this, ZvuiZoomButton);\n\n          return _possibleConstructorReturn(this, (ZvuiZoomButton.__proto__ || Object.getPrototypeOf(ZvuiZoomButton)).call(this, player, options));\n        }\n\n        _createClass(ZvuiZoomButton, [{\n          key: 'createEl',\n          value: function createEl() {\n            return _get(ZvuiZoomButton.prototype.__proto__ || Object.getPrototypeOf(ZvuiZoomButton.prototype), 'createEl', this).call(this, 'button', {\n              name: 'ZvuiZoomButton',\n              id: 'zvui-video-zoom-button',\n              className: 'zvui-video-zoom-button',\n              title: 'Zoom',\n              role: 'button'\n            });\n          }\n        }, {\n          key: 'handleClick',\n          value: function handleClick() {\n            var container = this.player();\n            var zoomIn = container.props.zoomIn;\n\n            container._player.pause();\n\n            if (typeof zoomIn === 'function') {\n              zoomIn.call(this);\n            }\n          }\n        }]);\n\n        return ZvuiZoomButton;\n      }(Button);\n\n      _video2.default.registerComponent('ZvuiZoomButton', ZvuiZoomButton);\n\n      exports.default = ZvuiZoomButton;\n      /***/\n    }\n    /******/\n    ])\n  );\n});\n\n;","map":null,"metadata":{},"sourceType":"script"}